/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// LicenseFields
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class LicenseFields :  IEquatable<LicenseFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseFields" /> class.
        /// </summary>
        /// <param name="Unattended">Unattended.</param>
        /// <param name="Attended">Attended.</param>
        /// <param name="NonProduction">NonProduction.</param>
        /// <param name="Development">Development.</param>
        public LicenseFields(long? Unattended = default(long?), long? Attended = default(long?), long? NonProduction = default(long?), long? Development = default(long?))
        {
            this.Unattended = Unattended;
            this.Attended = Attended;
            this.NonProduction = NonProduction;
            this.Development = Development;
        }
        
        /// <summary>
        /// Gets or Sets Unattended
        /// </summary>
        [DataMember(Name="Unattended", EmitDefaultValue=false)]
        public long? Unattended { get; set; }

        /// <summary>
        /// Gets or Sets Attended
        /// </summary>
        [DataMember(Name="Attended", EmitDefaultValue=false)]
        public long? Attended { get; set; }

        /// <summary>
        /// Gets or Sets NonProduction
        /// </summary>
        [DataMember(Name="NonProduction", EmitDefaultValue=false)]
        public long? NonProduction { get; set; }

        /// <summary>
        /// Gets or Sets Development
        /// </summary>
        [DataMember(Name="Development", EmitDefaultValue=false)]
        public long? Development { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseFields {\n");
            sb.Append("  Unattended: ").Append(Unattended).Append("\n");
            sb.Append("  Attended: ").Append(Attended).Append("\n");
            sb.Append("  NonProduction: ").Append(NonProduction).Append("\n");
            sb.Append("  Development: ").Append(Development).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseFields);
        }

        /// <summary>
        /// Returns true if LicenseFields instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unattended == input.Unattended ||
                    (this.Unattended != null &&
                    this.Unattended.Equals(input.Unattended))
                ) && 
                (
                    this.Attended == input.Attended ||
                    (this.Attended != null &&
                    this.Attended.Equals(input.Attended))
                ) && 
                (
                    this.NonProduction == input.NonProduction ||
                    (this.NonProduction != null &&
                    this.NonProduction.Equals(input.NonProduction))
                ) && 
                (
                    this.Development == input.Development ||
                    (this.Development != null &&
                    this.Development.Equals(input.Development))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unattended != null)
                    hashCode = hashCode * 59 + this.Unattended.GetHashCode();
                if (this.Attended != null)
                    hashCode = hashCode * 59 + this.Attended.GetHashCode();
                if (this.NonProduction != null)
                    hashCode = hashCode * 59 + this.NonProduction.GetHashCode();
                if (this.Development != null)
                    hashCode = hashCode * 59 + this.Development.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
