/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// UserLoginAttemptDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class UserLoginAttemptDto :  IEquatable<UserLoginAttemptDto>, IValidatableObject
    {
        /// <summary>
        /// The login&#39;s attempt result
        /// </summary>
        /// <value>The login&#39;s attempt result</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 1,
            
            /// <summary>
            /// Enum InvalidUserNameOrEmailAddress for value: InvalidUserNameOrEmailAddress
            /// </summary>
            [EnumMember(Value = "InvalidUserNameOrEmailAddress")]
            InvalidUserNameOrEmailAddress = 2,
            
            /// <summary>
            /// Enum InvalidPassword for value: InvalidPassword
            /// </summary>
            [EnumMember(Value = "InvalidPassword")]
            InvalidPassword = 3,
            
            /// <summary>
            /// Enum UserIsNotActive for value: UserIsNotActive
            /// </summary>
            [EnumMember(Value = "UserIsNotActive")]
            UserIsNotActive = 4,
            
            /// <summary>
            /// Enum InvalidTenancyName for value: InvalidTenancyName
            /// </summary>
            [EnumMember(Value = "InvalidTenancyName")]
            InvalidTenancyName = 5,
            
            /// <summary>
            /// Enum TenantIsNotActive for value: TenantIsNotActive
            /// </summary>
            [EnumMember(Value = "TenantIsNotActive")]
            TenantIsNotActive = 6,
            
            /// <summary>
            /// Enum UserEmailIsNotConfirmed for value: UserEmailIsNotConfirmed
            /// </summary>
            [EnumMember(Value = "UserEmailIsNotConfirmed")]
            UserEmailIsNotConfirmed = 7,
            
            /// <summary>
            /// Enum UnknownExternalLogin for value: UnknownExternalLogin
            /// </summary>
            [EnumMember(Value = "UnknownExternalLogin")]
            UnknownExternalLogin = 8,
            
            /// <summary>
            /// Enum LockedOut for value: LockedOut
            /// </summary>
            [EnumMember(Value = "LockedOut")]
            LockedOut = 9,
            
            /// <summary>
            /// Enum UserPhoneNumberIsNotConfirmed for value: UserPhoneNumberIsNotConfirmed
            /// </summary>
            [EnumMember(Value = "UserPhoneNumberIsNotConfirmed")]
            UserPhoneNumberIsNotConfirmed = 10
        }

        /// <summary>
        /// The login&#39;s attempt result
        /// </summary>
        /// <value>The login&#39;s attempt result</value>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public ResultEnum? Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLoginAttemptDto" /> class.
        /// </summary>
        /// <param name="CreationTime">The date and time when the action was performed..</param>
        /// <param name="ClientIpAddress">Client IP Address.</param>
        /// <param name="ClientName">Client name.</param>
        /// <param name="BrowserInfo">Browser Information.</param>
        /// <param name="Result">The login&#39;s attempt result.</param>
        /// <param name="UserId">The user that authenticated.</param>
        /// <param name="Id">Id.</param>
        public UserLoginAttemptDto(DateTime? CreationTime = default(DateTime?), string ClientIpAddress = default(string), string ClientName = default(string), string BrowserInfo = default(string), ResultEnum? Result = default(ResultEnum?), long? UserId = default(long?), long? Id = default(long?))
        {
            this.CreationTime = CreationTime;
            this.ClientIpAddress = ClientIpAddress;
            this.ClientName = ClientName;
            this.BrowserInfo = BrowserInfo;
            this.Result = Result;
            this.UserId = UserId;
            this.Id = Id;
        }
        
        /// <summary>
        /// The date and time when the action was performed.
        /// </summary>
        /// <value>The date and time when the action was performed.</value>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// Client IP Address
        /// </summary>
        /// <value>Client IP Address</value>
        [DataMember(Name="ClientIpAddress", EmitDefaultValue=false)]
        public string ClientIpAddress { get; set; }

        /// <summary>
        /// Client name
        /// </summary>
        /// <value>Client name</value>
        [DataMember(Name="ClientName", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Browser Information
        /// </summary>
        /// <value>Browser Information</value>
        [DataMember(Name="BrowserInfo", EmitDefaultValue=false)]
        public string BrowserInfo { get; set; }


        /// <summary>
        /// The user that authenticated
        /// </summary>
        /// <value>The user that authenticated</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserLoginAttemptDto {\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  BrowserInfo: ").Append(BrowserInfo).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLoginAttemptDto);
        }

        /// <summary>
        /// Returns true if UserLoginAttemptDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLoginAttemptDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLoginAttemptDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.ClientIpAddress == input.ClientIpAddress ||
                    (this.ClientIpAddress != null &&
                    this.ClientIpAddress.Equals(input.ClientIpAddress))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.BrowserInfo == input.BrowserInfo ||
                    (this.BrowserInfo != null &&
                    this.BrowserInfo.Equals(input.BrowserInfo))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.ClientIpAddress != null)
                    hashCode = hashCode * 59 + this.ClientIpAddress.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.BrowserInfo != null)
                    hashCode = hashCode * 59 + this.BrowserInfo.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
