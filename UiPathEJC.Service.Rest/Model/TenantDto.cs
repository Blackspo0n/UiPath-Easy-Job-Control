/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// TenantDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class TenantDto :  IEquatable<TenantDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantDto" /> class.
        /// </summary>
        /// <param name="Name">Name of the tenant..</param>
        /// <param name="Key">Unique Key of the tenant..</param>
        /// <param name="DisplayName">Display name of the the tenant.</param>
        /// <param name="AdminEmailAddress">Default tenant&#39;s admin user account email address..</param>
        /// <param name="AdminName">Default tenant&#39;s admin user account name..</param>
        /// <param name="AdminSurname">Default tenant&#39;s admin user account surname..</param>
        /// <param name="AdminPassword">Default tenant&#39;s admin user account password. Only valid for create/update operations..</param>
        /// <param name="LastLoginTime">The last time a user logged in this tenant..</param>
        /// <param name="IsActive">Specifies if the tenant is active or not..</param>
        /// <param name="AcceptedDomainsList">Accepted DNS list..</param>
        /// <param name="License">Licensing info..</param>
        /// <param name="Id">Id.</param>
        public TenantDto(string Name = default(string), string Key = default(string), string DisplayName = default(string), string AdminEmailAddress = default(string), string AdminName = default(string), string AdminSurname = default(string), string AdminPassword = default(string), DateTime? LastLoginTime = default(DateTime?), bool? IsActive = default(bool?), List<string> AcceptedDomainsList = default(List<string>), TenantLicenseDto License = default(TenantLicenseDto), int? Id = default(int?))
        {
            this.Name = Name;
            this.Key = Key;
            this.DisplayName = DisplayName;
            this.AdminEmailAddress = AdminEmailAddress;
            this.AdminName = AdminName;
            this.AdminSurname = AdminSurname;
            this.AdminPassword = AdminPassword;
            this.LastLoginTime = LastLoginTime;
            this.IsActive = IsActive;
            this.AcceptedDomainsList = AcceptedDomainsList;
            this.License = License;
            this.Id = Id;
        }
        
        /// <summary>
        /// Name of the tenant.
        /// </summary>
        /// <value>Name of the tenant.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Unique Key of the tenant.
        /// </summary>
        /// <value>Unique Key of the tenant.</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Display name of the the tenant
        /// </summary>
        /// <value>Display name of the the tenant</value>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Default tenant&#39;s admin user account email address.
        /// </summary>
        /// <value>Default tenant&#39;s admin user account email address.</value>
        [DataMember(Name="AdminEmailAddress", EmitDefaultValue=false)]
        public string AdminEmailAddress { get; set; }

        /// <summary>
        /// Default tenant&#39;s admin user account name.
        /// </summary>
        /// <value>Default tenant&#39;s admin user account name.</value>
        [DataMember(Name="AdminName", EmitDefaultValue=false)]
        public string AdminName { get; set; }

        /// <summary>
        /// Default tenant&#39;s admin user account surname.
        /// </summary>
        /// <value>Default tenant&#39;s admin user account surname.</value>
        [DataMember(Name="AdminSurname", EmitDefaultValue=false)]
        public string AdminSurname { get; set; }

        /// <summary>
        /// Default tenant&#39;s admin user account password. Only valid for create/update operations.
        /// </summary>
        /// <value>Default tenant&#39;s admin user account password. Only valid for create/update operations.</value>
        [DataMember(Name="AdminPassword", EmitDefaultValue=false)]
        public string AdminPassword { get; set; }

        /// <summary>
        /// The last time a user logged in this tenant.
        /// </summary>
        /// <value>The last time a user logged in this tenant.</value>
        [DataMember(Name="LastLoginTime", EmitDefaultValue=false)]
        public DateTime? LastLoginTime { get; set; }

        /// <summary>
        /// Specifies if the tenant is active or not.
        /// </summary>
        /// <value>Specifies if the tenant is active or not.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Accepted DNS list.
        /// </summary>
        /// <value>Accepted DNS list.</value>
        [DataMember(Name="AcceptedDomainsList", EmitDefaultValue=false)]
        public List<string> AcceptedDomainsList { get; set; }

        /// <summary>
        /// Licensing info.
        /// </summary>
        /// <value>Licensing info.</value>
        [DataMember(Name="License", EmitDefaultValue=false)]
        public TenantLicenseDto License { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  AdminEmailAddress: ").Append(AdminEmailAddress).Append("\n");
            sb.Append("  AdminName: ").Append(AdminName).Append("\n");
            sb.Append("  AdminSurname: ").Append(AdminSurname).Append("\n");
            sb.Append("  AdminPassword: ").Append(AdminPassword).Append("\n");
            sb.Append("  LastLoginTime: ").Append(LastLoginTime).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  AcceptedDomainsList: ").Append(AcceptedDomainsList).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantDto);
        }

        /// <summary>
        /// Returns true if TenantDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.AdminEmailAddress == input.AdminEmailAddress ||
                    (this.AdminEmailAddress != null &&
                    this.AdminEmailAddress.Equals(input.AdminEmailAddress))
                ) && 
                (
                    this.AdminName == input.AdminName ||
                    (this.AdminName != null &&
                    this.AdminName.Equals(input.AdminName))
                ) && 
                (
                    this.AdminSurname == input.AdminSurname ||
                    (this.AdminSurname != null &&
                    this.AdminSurname.Equals(input.AdminSurname))
                ) && 
                (
                    this.AdminPassword == input.AdminPassword ||
                    (this.AdminPassword != null &&
                    this.AdminPassword.Equals(input.AdminPassword))
                ) && 
                (
                    this.LastLoginTime == input.LastLoginTime ||
                    (this.LastLoginTime != null &&
                    this.LastLoginTime.Equals(input.LastLoginTime))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.AcceptedDomainsList == input.AcceptedDomainsList ||
                    this.AcceptedDomainsList != null &&
                    this.AcceptedDomainsList.SequenceEqual(input.AcceptedDomainsList)
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.AdminEmailAddress != null)
                    hashCode = hashCode * 59 + this.AdminEmailAddress.GetHashCode();
                if (this.AdminName != null)
                    hashCode = hashCode * 59 + this.AdminName.GetHashCode();
                if (this.AdminSurname != null)
                    hashCode = hashCode * 59 + this.AdminSurname.GetHashCode();
                if (this.AdminPassword != null)
                    hashCode = hashCode * 59 + this.AdminPassword.GetHashCode();
                if (this.LastLoginTime != null)
                    hashCode = hashCode * 59 + this.LastLoginTime.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.AcceptedDomainsList != null)
                    hashCode = hashCode * 59 + this.AcceptedDomainsList.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"^[\\p{L}][\\p{L}0-9-_]+$", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            // DisplayName (string) maxLength
            if(this.DisplayName != null && this.DisplayName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 128.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if(this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // AdminEmailAddress (string) maxLength
            if(this.AdminEmailAddress != null && this.AdminEmailAddress.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminEmailAddress, length must be less than 256.", new [] { "AdminEmailAddress" });
            }

            // AdminEmailAddress (string) minLength
            if(this.AdminEmailAddress != null && this.AdminEmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminEmailAddress, length must be greater than 0.", new [] { "AdminEmailAddress" });
            }

            // AdminName (string) maxLength
            if(this.AdminName != null && this.AdminName.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminName, length must be less than 32.", new [] { "AdminName" });
            }

            // AdminName (string) minLength
            if(this.AdminName != null && this.AdminName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminName, length must be greater than 0.", new [] { "AdminName" });
            }

            // AdminSurname (string) maxLength
            if(this.AdminSurname != null && this.AdminSurname.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminSurname, length must be less than 32.", new [] { "AdminSurname" });
            }

            // AdminSurname (string) minLength
            if(this.AdminSurname != null && this.AdminSurname.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminSurname, length must be greater than 0.", new [] { "AdminSurname" });
            }

            // AdminPassword (string) maxLength
            if(this.AdminPassword != null && this.AdminPassword.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminPassword, length must be less than 32.", new [] { "AdminPassword" });
            }

            // AdminPassword (string) minLength
            if(this.AdminPassword != null && this.AdminPassword.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminPassword, length must be greater than 0.", new [] { "AdminPassword" });
            }

            yield break;
        }
    }

}
