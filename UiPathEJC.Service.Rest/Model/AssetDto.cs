/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores specific data so that robots can easily have access to it.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class AssetDto :  IEquatable<AssetDto>, IValidatableObject
    {
        /// <summary>
        /// Defines the scope of the asset.
        /// </summary>
        /// <value>Defines the scope of the asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueScopeEnum
        {
            
            /// <summary>
            /// Enum Global for value: Global
            /// </summary>
            [EnumMember(Value = "Global")]
            Global = 1,
            
            /// <summary>
            /// Enum PerRobot for value: PerRobot
            /// </summary>
            [EnumMember(Value = "PerRobot")]
            PerRobot = 2
        }

        /// <summary>
        /// Defines the scope of the asset.
        /// </summary>
        /// <value>Defines the scope of the asset.</value>
        [DataMember(Name="ValueScope", EmitDefaultValue=false)]
        public ValueScopeEnum ValueScope { get; set; }
        /// <summary>
        /// Defines the type of value stored by the asset.
        /// </summary>
        /// <value>Defines the type of value stored by the asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueTypeEnum
        {
            
            /// <summary>
            /// Enum DBConnectionString for value: DBConnectionString
            /// </summary>
            [EnumMember(Value = "DBConnectionString")]
            DBConnectionString = 1,
            
            /// <summary>
            /// Enum HttpConnectionString for value: HttpConnectionString
            /// </summary>
            [EnumMember(Value = "HttpConnectionString")]
            HttpConnectionString = 2,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 3,
            
            /// <summary>
            /// Enum Bool for value: Bool
            /// </summary>
            [EnumMember(Value = "Bool")]
            Bool = 4,
            
            /// <summary>
            /// Enum Integer for value: Integer
            /// </summary>
            [EnumMember(Value = "Integer")]
            Integer = 5,
            
            /// <summary>
            /// Enum Credential for value: Credential
            /// </summary>
            [EnumMember(Value = "Credential")]
            Credential = 6,
            
            /// <summary>
            /// Enum WindowsCredential for value: WindowsCredential
            /// </summary>
            [EnumMember(Value = "WindowsCredential")]
            WindowsCredential = 7,
            
            /// <summary>
            /// Enum KeyValueList for value: KeyValueList
            /// </summary>
            [EnumMember(Value = "KeyValueList")]
            KeyValueList = 8
        }

        /// <summary>
        /// Defines the type of value stored by the asset.
        /// </summary>
        /// <value>Defines the type of value stored by the asset.</value>
        [DataMember(Name="ValueType", EmitDefaultValue=false)]
        public ValueTypeEnum? ValueType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetDto" /> class.
        /// </summary>
        /// <param name="Name">A custom name for the asset. (required).</param>
        /// <param name="CanBeDeleted">States if an assets can be deleted. The default value of this property is true..</param>
        /// <param name="ValueScope">Defines the scope of the asset. (required).</param>
        /// <param name="ValueType">Defines the type of value stored by the asset..</param>
        /// <param name="Value">The textual representation of the asset value, irrespective of value type..</param>
        /// <param name="StringValue">The value of the asset when the value type is Text. Empty when the value type is not Text..</param>
        /// <param name="BoolValue">The value of the asset when the value type is Bool. False when the value type is not Bool..</param>
        /// <param name="IntValue">The value of the asset when the value type is Integer. 0 when the value type is not Integer..</param>
        /// <param name="CredentialUsername">The user name when the value type is Credential. Empty when the value type is not Credential..</param>
        /// <param name="CredentialPassword">The password when the value type is Credential. Empty when the value type is not Credential..</param>
        /// <param name="KeyValueList">A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList..</param>
        /// <param name="RobotValues">The collection of asset values per robot. Empty if the asset type is Global..</param>
        /// <param name="Id">Id.</param>
        public AssetDto(string Name = default(string), bool? CanBeDeleted = default(bool?), ValueScopeEnum ValueScope = default(ValueScopeEnum), ValueTypeEnum? ValueType = default(ValueTypeEnum?), string Value = default(string), string StringValue = default(string), bool? BoolValue = default(bool?), int? IntValue = default(int?), string CredentialUsername = default(string), string CredentialPassword = default(string), List<CustomKeyValuePair> KeyValueList = default(List<CustomKeyValuePair>), List<AssetRobotValueDto> RobotValues = default(List<AssetRobotValueDto>), long? Id = default(long?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for AssetDto and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ValueScope" is required (not null)
            if (ValueScope == null)
            {
                throw new InvalidDataException("ValueScope is a required property for AssetDto and cannot be null");
            }
            else
            {
                this.ValueScope = ValueScope;
            }
            this.CanBeDeleted = CanBeDeleted;
            this.ValueType = ValueType;
            this.Value = Value;
            this.StringValue = StringValue;
            this.BoolValue = BoolValue;
            this.IntValue = IntValue;
            this.CredentialUsername = CredentialUsername;
            this.CredentialPassword = CredentialPassword;
            this.KeyValueList = KeyValueList;
            this.RobotValues = RobotValues;
            this.Id = Id;
        }
        
        /// <summary>
        /// A custom name for the asset.
        /// </summary>
        /// <value>A custom name for the asset.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// States if an assets can be deleted. The default value of this property is true.
        /// </summary>
        /// <value>States if an assets can be deleted. The default value of this property is true.</value>
        [DataMember(Name="CanBeDeleted", EmitDefaultValue=false)]
        public bool? CanBeDeleted { get; set; }



        /// <summary>
        /// The textual representation of the asset value, irrespective of value type.
        /// </summary>
        /// <value>The textual representation of the asset value, irrespective of value type.</value>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// The value of the asset when the value type is Text. Empty when the value type is not Text.
        /// </summary>
        /// <value>The value of the asset when the value type is Text. Empty when the value type is not Text.</value>
        [DataMember(Name="StringValue", EmitDefaultValue=false)]
        public string StringValue { get; set; }

        /// <summary>
        /// The value of the asset when the value type is Bool. False when the value type is not Bool.
        /// </summary>
        /// <value>The value of the asset when the value type is Bool. False when the value type is not Bool.</value>
        [DataMember(Name="BoolValue", EmitDefaultValue=false)]
        public bool? BoolValue { get; set; }

        /// <summary>
        /// The value of the asset when the value type is Integer. 0 when the value type is not Integer.
        /// </summary>
        /// <value>The value of the asset when the value type is Integer. 0 when the value type is not Integer.</value>
        [DataMember(Name="IntValue", EmitDefaultValue=false)]
        public int? IntValue { get; set; }

        /// <summary>
        /// The user name when the value type is Credential. Empty when the value type is not Credential.
        /// </summary>
        /// <value>The user name when the value type is Credential. Empty when the value type is not Credential.</value>
        [DataMember(Name="CredentialUsername", EmitDefaultValue=false)]
        public string CredentialUsername { get; set; }

        /// <summary>
        /// The password when the value type is Credential. Empty when the value type is not Credential.
        /// </summary>
        /// <value>The password when the value type is Credential. Empty when the value type is not Credential.</value>
        [DataMember(Name="CredentialPassword", EmitDefaultValue=false)]
        public string CredentialPassword { get; set; }

        /// <summary>
        /// A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.
        /// </summary>
        /// <value>A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.</value>
        [DataMember(Name="KeyValueList", EmitDefaultValue=false)]
        public List<CustomKeyValuePair> KeyValueList { get; set; }

        /// <summary>
        /// The collection of asset values per robot. Empty if the asset type is Global.
        /// </summary>
        /// <value>The collection of asset values per robot. Empty if the asset type is Global.</value>
        [DataMember(Name="RobotValues", EmitDefaultValue=false)]
        public List<AssetRobotValueDto> RobotValues { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CanBeDeleted: ").Append(CanBeDeleted).Append("\n");
            sb.Append("  ValueScope: ").Append(ValueScope).Append("\n");
            sb.Append("  ValueType: ").Append(ValueType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  BoolValue: ").Append(BoolValue).Append("\n");
            sb.Append("  IntValue: ").Append(IntValue).Append("\n");
            sb.Append("  CredentialUsername: ").Append(CredentialUsername).Append("\n");
            sb.Append("  CredentialPassword: ").Append(CredentialPassword).Append("\n");
            sb.Append("  KeyValueList: ").Append(KeyValueList).Append("\n");
            sb.Append("  RobotValues: ").Append(RobotValues).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetDto);
        }

        /// <summary>
        /// Returns true if AssetDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CanBeDeleted == input.CanBeDeleted ||
                    (this.CanBeDeleted != null &&
                    this.CanBeDeleted.Equals(input.CanBeDeleted))
                ) && 
                (
                    this.ValueScope == input.ValueScope ||
                    (this.ValueScope != null &&
                    this.ValueScope.Equals(input.ValueScope))
                ) && 
                (
                    this.ValueType == input.ValueType ||
                    (this.ValueType != null &&
                    this.ValueType.Equals(input.ValueType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                ) && 
                (
                    this.BoolValue == input.BoolValue ||
                    (this.BoolValue != null &&
                    this.BoolValue.Equals(input.BoolValue))
                ) && 
                (
                    this.IntValue == input.IntValue ||
                    (this.IntValue != null &&
                    this.IntValue.Equals(input.IntValue))
                ) && 
                (
                    this.CredentialUsername == input.CredentialUsername ||
                    (this.CredentialUsername != null &&
                    this.CredentialUsername.Equals(input.CredentialUsername))
                ) && 
                (
                    this.CredentialPassword == input.CredentialPassword ||
                    (this.CredentialPassword != null &&
                    this.CredentialPassword.Equals(input.CredentialPassword))
                ) && 
                (
                    this.KeyValueList == input.KeyValueList ||
                    this.KeyValueList != null &&
                    this.KeyValueList.SequenceEqual(input.KeyValueList)
                ) && 
                (
                    this.RobotValues == input.RobotValues ||
                    this.RobotValues != null &&
                    this.RobotValues.SequenceEqual(input.RobotValues)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CanBeDeleted != null)
                    hashCode = hashCode * 59 + this.CanBeDeleted.GetHashCode();
                if (this.ValueScope != null)
                    hashCode = hashCode * 59 + this.ValueScope.GetHashCode();
                if (this.ValueType != null)
                    hashCode = hashCode * 59 + this.ValueType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.StringValue != null)
                    hashCode = hashCode * 59 + this.StringValue.GetHashCode();
                if (this.BoolValue != null)
                    hashCode = hashCode * 59 + this.BoolValue.GetHashCode();
                if (this.IntValue != null)
                    hashCode = hashCode * 59 + this.IntValue.GetHashCode();
                if (this.CredentialUsername != null)
                    hashCode = hashCode * 59 + this.CredentialUsername.GetHashCode();
                if (this.CredentialPassword != null)
                    hashCode = hashCode * 59 + this.CredentialPassword.GetHashCode();
                if (this.KeyValueList != null)
                    hashCode = hashCode * 59 + this.KeyValueList.GetHashCode();
                if (this.RobotValues != null)
                    hashCode = hashCode * 59 + this.RobotValues.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
