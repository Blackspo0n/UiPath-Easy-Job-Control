/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// LicenseStatsModel
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class LicenseStatsModel :  IEquatable<LicenseStatsModel>, IValidatableObject
    {
        /// <summary>
        /// Defines RobotType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RobotTypeEnum
        {
            
            /// <summary>
            /// Enum NonProduction for value: NonProduction
            /// </summary>
            [EnumMember(Value = "NonProduction")]
            NonProduction = 1,
            
            /// <summary>
            /// Enum Attended for value: Attended
            /// </summary>
            [EnumMember(Value = "Attended")]
            Attended = 2,
            
            /// <summary>
            /// Enum Unattended for value: Unattended
            /// </summary>
            [EnumMember(Value = "Unattended")]
            Unattended = 3,
            
            /// <summary>
            /// Enum Development for value: Development
            /// </summary>
            [EnumMember(Value = "Development")]
            Development = 4
        }

        /// <summary>
        /// Gets or Sets RobotType
        /// </summary>
        [DataMember(Name="robotType", EmitDefaultValue=false)]
        public RobotTypeEnum? RobotType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseStatsModel" /> class.
        /// </summary>
        /// <param name="RobotType">RobotType.</param>
        /// <param name="Count">Count.</param>
        /// <param name="Timestamp">Timestamp.</param>
        public LicenseStatsModel(RobotTypeEnum? RobotType = default(RobotTypeEnum?), long? Count = default(long?), DateTime? Timestamp = default(DateTime?))
        {
            this.RobotType = RobotType;
            this.Count = Count;
            this.Timestamp = Timestamp;
        }
        

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseStatsModel {\n");
            sb.Append("  RobotType: ").Append(RobotType).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseStatsModel);
        }

        /// <summary>
        /// Returns true if LicenseStatsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseStatsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseStatsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RobotType == input.RobotType ||
                    (this.RobotType != null &&
                    this.RobotType.Equals(input.RobotType))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RobotType != null)
                    hashCode = hashCode * 59 + this.RobotType.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
