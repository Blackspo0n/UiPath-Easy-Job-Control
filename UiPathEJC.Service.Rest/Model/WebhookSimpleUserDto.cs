/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// WebhookSimpleUserDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class WebhookSimpleUserDto :  IEquatable<WebhookSimpleUserDto>, IValidatableObject
    {
        /// <summary>
        /// The user type.
        /// </summary>
        /// <value>The user type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,
            
            /// <summary>
            /// Enum Robot for value: Robot
            /// </summary>
            [EnumMember(Value = "Robot")]
            Robot = 2
        }

        /// <summary>
        /// The user type.
        /// </summary>
        /// <value>The user type.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookSimpleUserDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public WebhookSimpleUserDto()
        {
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// The name used to login to Orchestrator.
        /// </summary>
        /// <value>The name used to login to Orchestrator.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; private set; }

        /// <summary>
        /// The domain from which the user is imported
        /// </summary>
        /// <value>The domain from which the user is imported</value>
        [DataMember(Name="Domain", EmitDefaultValue=false)]
        public string Domain { get; private set; }

        /// <summary>
        /// The full name of the person constructed with the format Name Surname.
        /// </summary>
        /// <value>The full name of the person constructed with the format Name Surname.</value>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; private set; }

        /// <summary>
        /// The e-mail address associated with the user.
        /// </summary>
        /// <value>The e-mail address associated with the user.</value>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; private set; }


        /// <summary>
        /// States if the user is active or not. An inactive user cannot login to Orchestrator.
        /// </summary>
        /// <value>States if the user is active or not. An inactive user cannot login to Orchestrator.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; private set; }

        /// <summary>
        /// The date and time when the user last logged in, or null if the user never logged in.
        /// </summary>
        /// <value>The date and time when the user last logged in, or null if the user never logged in.</value>
        [DataMember(Name="LastLoginTime", EmitDefaultValue=false)]
        public DateTime? LastLoginTime { get; private set; }

        /// <summary>
        /// The date and time when the user was created.
        /// </summary>
        /// <value>The date and time when the user was created.</value>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; private set; }

        /// <summary>
        /// The source which authenticated this user.
        /// </summary>
        /// <value>The source which authenticated this user.</value>
        [DataMember(Name="AuthenticationSource", EmitDefaultValue=false)]
        public string AuthenticationSource { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookSimpleUserDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastLoginTime: ").Append(LastLoginTime).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  AuthenticationSource: ").Append(AuthenticationSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookSimpleUserDto);
        }

        /// <summary>
        /// Returns true if WebhookSimpleUserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookSimpleUserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookSimpleUserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LastLoginTime == input.LastLoginTime ||
                    (this.LastLoginTime != null &&
                    this.LastLoginTime.Equals(input.LastLoginTime))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.AuthenticationSource == input.AuthenticationSource ||
                    (this.AuthenticationSource != null &&
                    this.AuthenticationSource.Equals(input.AuthenticationSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastLoginTime != null)
                    hashCode = hashCode * 59 + this.LastLoginTime.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.AuthenticationSource != null)
                    hashCode = hashCode * 59 + this.AuthenticationSource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
