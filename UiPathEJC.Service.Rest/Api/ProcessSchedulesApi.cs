/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessSchedulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void ProcessSchedulesDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProcessSchedulesDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a single process schedule based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ProcessScheduleDto</returns>
        ProcessScheduleDto ProcessSchedulesGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single process schedule based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of ProcessScheduleDto</returns>
        ApiResponse<ProcessScheduleDto> ProcessSchedulesGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets the process schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListProcessScheduleDto</returns>
        ODataResponseListProcessScheduleDto ProcessSchedulesGetProcessSchedules (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets the process schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListProcessScheduleDto</returns>
        ApiResponse<ODataResponseListProcessScheduleDto> ProcessSchedulesGetProcessSchedulesWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>ODataResponseListInt64</returns>
        ODataResponseListInt64 ProcessSchedulesGetRobotIdsForScheduleByKey (long? key);

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>ApiResponse of ODataResponseListInt64</returns>
        ApiResponse<ODataResponseListInt64> ProcessSchedulesGetRobotIdsForScheduleByKeyWithHttpInfo (long? key);
        /// <summary>
        /// Creates a new process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>ProcessScheduleDto</returns>
        ProcessScheduleDto ProcessSchedulesPost (ProcessScheduleDto processScheduleDto);

        /// <summary>
        /// Creates a new process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>ApiResponse of ProcessScheduleDto</returns>
        ApiResponse<ProcessScheduleDto> ProcessSchedulesPostWithHttpInfo (ProcessScheduleDto processScheduleDto);
        /// <summary>
        /// Edits a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>ProcessScheduleDto</returns>
        ProcessScheduleDto ProcessSchedulesPutById (long? id, ProcessScheduleDto processScheduleDto);

        /// <summary>
        /// Edits a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>ApiResponse of ProcessScheduleDto</returns>
        ApiResponse<ProcessScheduleDto> ProcessSchedulesPutByIdWithHttpInfo (long? id, ProcessScheduleDto processScheduleDto);
        /// <summary>
        /// Enables/disables a group of schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>ODataResponseBoolean</returns>
        ODataResponseBoolean ProcessSchedulesSetEnabled (SetEnabledParameters setEnabledParameters);

        /// <summary>
        /// Enables/disables a group of schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>ApiResponse of ODataResponseBoolean</returns>
        ApiResponse<ODataResponseBoolean> ProcessSchedulesSetEnabledWithHttpInfo (SetEnabledParameters setEnabledParameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProcessSchedulesDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessSchedulesDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a single process schedule based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ProcessScheduleDto</returns>
        System.Threading.Tasks.Task<ProcessScheduleDto> ProcessSchedulesGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single process schedule based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessScheduleDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessScheduleDto>> ProcessSchedulesGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets the process schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListProcessScheduleDto</returns>
        System.Threading.Tasks.Task<ODataResponseListProcessScheduleDto> ProcessSchedulesGetProcessSchedulesAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets the process schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListProcessScheduleDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListProcessScheduleDto>> ProcessSchedulesGetProcessSchedulesAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>Task of ODataResponseListInt64</returns>
        System.Threading.Tasks.Task<ODataResponseListInt64> ProcessSchedulesGetRobotIdsForScheduleByKeyAsync (long? key);

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>Task of ApiResponse (ODataResponseListInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListInt64>> ProcessSchedulesGetRobotIdsForScheduleByKeyAsyncWithHttpInfo (long? key);
        /// <summary>
        /// Creates a new process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>Task of ProcessScheduleDto</returns>
        System.Threading.Tasks.Task<ProcessScheduleDto> ProcessSchedulesPostAsync (ProcessScheduleDto processScheduleDto);

        /// <summary>
        /// Creates a new process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>Task of ApiResponse (ProcessScheduleDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessScheduleDto>> ProcessSchedulesPostAsyncWithHttpInfo (ProcessScheduleDto processScheduleDto);
        /// <summary>
        /// Edits a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>Task of ProcessScheduleDto</returns>
        System.Threading.Tasks.Task<ProcessScheduleDto> ProcessSchedulesPutByIdAsync (long? id, ProcessScheduleDto processScheduleDto);

        /// <summary>
        /// Edits a process schedule.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>Task of ApiResponse (ProcessScheduleDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessScheduleDto>> ProcessSchedulesPutByIdAsyncWithHttpInfo (long? id, ProcessScheduleDto processScheduleDto);
        /// <summary>
        /// Enables/disables a group of schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>Task of ODataResponseBoolean</returns>
        System.Threading.Tasks.Task<ODataResponseBoolean> ProcessSchedulesSetEnabledAsync (SetEnabledParameters setEnabledParameters);

        /// <summary>
        /// Enables/disables a group of schedules.
        /// </summary>
        /// <remarks>
        /// Required permissions: Schedules.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>Task of ApiResponse (ODataResponseBoolean)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseBoolean>> ProcessSchedulesSetEnabledAsyncWithHttpInfo (SetEnabledParameters setEnabledParameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessSchedulesApi : IProcessSchedulesApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessSchedulesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSchedulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessSchedulesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a process schedule. Required permissions: Schedules.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void ProcessSchedulesDeleteById (long? id, string ifMatch = null)
        {
             ProcessSchedulesDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes a process schedule. Required permissions: Schedules.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProcessSchedulesDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessSchedulesApi->ProcessSchedulesDeleteById");

            var localVarPath = "/odata/ProcessSchedules({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a process schedule. Required permissions: Schedules.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProcessSchedulesDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await ProcessSchedulesDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes a process schedule. Required permissions: Schedules.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProcessSchedulesDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessSchedulesApi->ProcessSchedulesDeleteById");

            var localVarPath = "/odata/ProcessSchedules({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a single process schedule based on its key. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ProcessScheduleDto</returns>
        public ProcessScheduleDto ProcessSchedulesGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<ProcessScheduleDto> localVarResponse = ProcessSchedulesGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single process schedule based on its key. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of ProcessScheduleDto</returns>
        public ApiResponse< ProcessScheduleDto > ProcessSchedulesGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessSchedulesApi->ProcessSchedulesGetById");

            var localVarPath = "/odata/ProcessSchedules({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScheduleDto)));
        }

        /// <summary>
        /// Gets a single process schedule based on its key. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ProcessScheduleDto</returns>
        public async System.Threading.Tasks.Task<ProcessScheduleDto> ProcessSchedulesGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<ProcessScheduleDto> localVarResponse = await ProcessSchedulesGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single process schedule based on its key. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessScheduleDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessScheduleDto>> ProcessSchedulesGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessSchedulesApi->ProcessSchedulesGetById");

            var localVarPath = "/odata/ProcessSchedules({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScheduleDto)));
        }

        /// <summary>
        /// Gets the process schedules. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListProcessScheduleDto</returns>
        public ODataResponseListProcessScheduleDto ProcessSchedulesGetProcessSchedules (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListProcessScheduleDto> localVarResponse = ProcessSchedulesGetProcessSchedulesWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the process schedules. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListProcessScheduleDto</returns>
        public ApiResponse< ODataResponseListProcessScheduleDto > ProcessSchedulesGetProcessSchedulesWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/ProcessSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesGetProcessSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListProcessScheduleDto)));
        }

        /// <summary>
        /// Gets the process schedules. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListProcessScheduleDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListProcessScheduleDto> ProcessSchedulesGetProcessSchedulesAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListProcessScheduleDto> localVarResponse = await ProcessSchedulesGetProcessSchedulesAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the process schedules. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListProcessScheduleDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListProcessScheduleDto>> ProcessSchedulesGetProcessSchedulesAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/ProcessSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesGetProcessSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListProcessScheduleDto)));
        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>ODataResponseListInt64</returns>
        public ODataResponseListInt64 ProcessSchedulesGetRobotIdsForScheduleByKey (long? key)
        {
             ApiResponse<ODataResponseListInt64> localVarResponse = ProcessSchedulesGetRobotIdsForScheduleByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>ApiResponse of ODataResponseListInt64</returns>
        public ApiResponse< ODataResponseListInt64 > ProcessSchedulesGetRobotIdsForScheduleByKeyWithHttpInfo (long? key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessSchedulesApi->ProcessSchedulesGetRobotIdsForScheduleByKey");

            var localVarPath = "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.GetRobotIdsForSchedule(key={key})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesGetRobotIdsForScheduleByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListInt64)));
        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>Task of ODataResponseListInt64</returns>
        public async System.Threading.Tasks.Task<ODataResponseListInt64> ProcessSchedulesGetRobotIdsForScheduleByKeyAsync (long? key)
        {
             ApiResponse<ODataResponseListInt64> localVarResponse = await ProcessSchedulesGetRobotIdsForScheduleByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an schedule based on schedule Id. Required permissions: Schedules.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the schedule for which the robot ids are fetched.</param>
        /// <returns>Task of ApiResponse (ODataResponseListInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListInt64>> ProcessSchedulesGetRobotIdsForScheduleByKeyAsyncWithHttpInfo (long? key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ProcessSchedulesApi->ProcessSchedulesGetRobotIdsForScheduleByKey");

            var localVarPath = "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.GetRobotIdsForSchedule(key={key})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesGetRobotIdsForScheduleByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListInt64)));
        }

        /// <summary>
        /// Creates a new process schedule. Required permissions: Schedules.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>ProcessScheduleDto</returns>
        public ProcessScheduleDto ProcessSchedulesPost (ProcessScheduleDto processScheduleDto)
        {
             ApiResponse<ProcessScheduleDto> localVarResponse = ProcessSchedulesPostWithHttpInfo(processScheduleDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new process schedule. Required permissions: Schedules.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>ApiResponse of ProcessScheduleDto</returns>
        public ApiResponse< ProcessScheduleDto > ProcessSchedulesPostWithHttpInfo (ProcessScheduleDto processScheduleDto)
        {
            // verify the required parameter 'processScheduleDto' is set
            if (processScheduleDto == null)
                throw new ApiException(400, "Missing required parameter 'processScheduleDto' when calling ProcessSchedulesApi->ProcessSchedulesPost");

            var localVarPath = "/odata/ProcessSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processScheduleDto != null && processScheduleDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processScheduleDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processScheduleDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScheduleDto)));
        }

        /// <summary>
        /// Creates a new process schedule. Required permissions: Schedules.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>Task of ProcessScheduleDto</returns>
        public async System.Threading.Tasks.Task<ProcessScheduleDto> ProcessSchedulesPostAsync (ProcessScheduleDto processScheduleDto)
        {
             ApiResponse<ProcessScheduleDto> localVarResponse = await ProcessSchedulesPostAsyncWithHttpInfo(processScheduleDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new process schedule. Required permissions: Schedules.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processScheduleDto">The entity to post</param>
        /// <returns>Task of ApiResponse (ProcessScheduleDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessScheduleDto>> ProcessSchedulesPostAsyncWithHttpInfo (ProcessScheduleDto processScheduleDto)
        {
            // verify the required parameter 'processScheduleDto' is set
            if (processScheduleDto == null)
                throw new ApiException(400, "Missing required parameter 'processScheduleDto' when calling ProcessSchedulesApi->ProcessSchedulesPost");

            var localVarPath = "/odata/ProcessSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processScheduleDto != null && processScheduleDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processScheduleDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processScheduleDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScheduleDto)));
        }

        /// <summary>
        /// Edits a process schedule. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>ProcessScheduleDto</returns>
        public ProcessScheduleDto ProcessSchedulesPutById (long? id, ProcessScheduleDto processScheduleDto)
        {
             ApiResponse<ProcessScheduleDto> localVarResponse = ProcessSchedulesPutByIdWithHttpInfo(id, processScheduleDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a process schedule. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>ApiResponse of ProcessScheduleDto</returns>
        public ApiResponse< ProcessScheduleDto > ProcessSchedulesPutByIdWithHttpInfo (long? id, ProcessScheduleDto processScheduleDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessSchedulesApi->ProcessSchedulesPutById");
            // verify the required parameter 'processScheduleDto' is set
            if (processScheduleDto == null)
                throw new ApiException(400, "Missing required parameter 'processScheduleDto' when calling ProcessSchedulesApi->ProcessSchedulesPutById");

            var localVarPath = "/odata/ProcessSchedules({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processScheduleDto != null && processScheduleDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processScheduleDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processScheduleDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScheduleDto)));
        }

        /// <summary>
        /// Edits a process schedule. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>Task of ProcessScheduleDto</returns>
        public async System.Threading.Tasks.Task<ProcessScheduleDto> ProcessSchedulesPutByIdAsync (long? id, ProcessScheduleDto processScheduleDto)
        {
             ApiResponse<ProcessScheduleDto> localVarResponse = await ProcessSchedulesPutByIdAsyncWithHttpInfo(id, processScheduleDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edits a process schedule. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="processScheduleDto">The entity to put</param>
        /// <returns>Task of ApiResponse (ProcessScheduleDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessScheduleDto>> ProcessSchedulesPutByIdAsyncWithHttpInfo (long? id, ProcessScheduleDto processScheduleDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessSchedulesApi->ProcessSchedulesPutById");
            // verify the required parameter 'processScheduleDto' is set
            if (processScheduleDto == null)
                throw new ApiException(400, "Missing required parameter 'processScheduleDto' when calling ProcessSchedulesApi->ProcessSchedulesPutById");

            var localVarPath = "/odata/ProcessSchedules({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processScheduleDto != null && processScheduleDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processScheduleDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processScheduleDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScheduleDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScheduleDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScheduleDto)));
        }

        /// <summary>
        /// Enables/disables a group of schedules. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>ODataResponseBoolean</returns>
        public ODataResponseBoolean ProcessSchedulesSetEnabled (SetEnabledParameters setEnabledParameters)
        {
             ApiResponse<ODataResponseBoolean> localVarResponse = ProcessSchedulesSetEnabledWithHttpInfo(setEnabledParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enables/disables a group of schedules. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>ApiResponse of ODataResponseBoolean</returns>
        public ApiResponse< ODataResponseBoolean > ProcessSchedulesSetEnabledWithHttpInfo (SetEnabledParameters setEnabledParameters)
        {
            // verify the required parameter 'setEnabledParameters' is set
            if (setEnabledParameters == null)
                throw new ApiException(400, "Missing required parameter 'setEnabledParameters' when calling ProcessSchedulesApi->ProcessSchedulesSetEnabled");

            var localVarPath = "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.SetEnabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setEnabledParameters != null && setEnabledParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setEnabledParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setEnabledParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesSetEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseBoolean)));
        }

        /// <summary>
        /// Enables/disables a group of schedules. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>Task of ODataResponseBoolean</returns>
        public async System.Threading.Tasks.Task<ODataResponseBoolean> ProcessSchedulesSetEnabledAsync (SetEnabledParameters setEnabledParameters)
        {
             ApiResponse<ODataResponseBoolean> localVarResponse = await ProcessSchedulesSetEnabledAsyncWithHttpInfo(setEnabledParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enables/disables a group of schedules. Required permissions: Schedules.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEnabledParameters">&lt;para /&gt;Enabled - If true the schedules will be enabled, if false the schedules will be disabled.              &lt;para /&gt;ScheduleIds - The collection of ids of the affected schedules.</param>
        /// <returns>Task of ApiResponse (ODataResponseBoolean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseBoolean>> ProcessSchedulesSetEnabledAsyncWithHttpInfo (SetEnabledParameters setEnabledParameters)
        {
            // verify the required parameter 'setEnabledParameters' is set
            if (setEnabledParameters == null)
                throw new ApiException(400, "Missing required parameter 'setEnabledParameters' when calling ProcessSchedulesApi->ProcessSchedulesSetEnabled");

            var localVarPath = "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.SetEnabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setEnabledParameters != null && setEnabledParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setEnabledParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setEnabledParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessSchedulesSetEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseBoolean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseBoolean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseBoolean)));
        }

    }
}
