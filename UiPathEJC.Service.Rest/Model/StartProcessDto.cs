/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// The Start Process transfers information from client to the server during JobsController.StartJobs custom action.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class StartProcessDto :  IEquatable<StartProcessDto>, IValidatableObject
    {
        /// <summary>
        /// States which robots from the environment are being run by the process.
        /// </summary>
        /// <value>States which robots from the environment are being run by the process.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrategyEnum
        {
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            
            /// <summary>
            /// Enum Specific for value: Specific
            /// </summary>
            [EnumMember(Value = "Specific")]
            Specific = 2,
            
            /// <summary>
            /// Enum RobotCount for value: RobotCount
            /// </summary>
            [EnumMember(Value = "RobotCount")]
            RobotCount = 3,
            
            /// <summary>
            /// Enum JobsCount for value: JobsCount
            /// </summary>
            [EnumMember(Value = "JobsCount")]
            JobsCount = 4
        }

        /// <summary>
        /// States which robots from the environment are being run by the process.
        /// </summary>
        /// <value>States which robots from the environment are being run by the process.</value>
        [DataMember(Name="Strategy", EmitDefaultValue=false)]
        public StrategyEnum? Strategy { get; set; }
        /// <summary>
        /// The Source of the job starting the current process.
        /// </summary>
        /// <value>The Source of the job starting the current process.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 1,
            
            /// <summary>
            /// Enum Schedule for value: Schedule
            /// </summary>
            [EnumMember(Value = "Schedule")]
            Schedule = 2
        }

        /// <summary>
        /// The Source of the job starting the current process.
        /// </summary>
        /// <value>The Source of the job starting the current process.</value>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartProcessDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StartProcessDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartProcessDto" /> class.
        /// </summary>
        /// <param name="ReleaseKey">The unique key of the release associated with the process. (required).</param>
        /// <param name="Strategy">States which robots from the environment are being run by the process..</param>
        /// <param name="RobotIds">The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific..</param>
        /// <param name="NoOfRobots">DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount..</param>
        /// <param name="JobsCount">Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount..</param>
        /// <param name="Source">The Source of the job starting the current process..</param>
        /// <param name="InputArguments">Input parameters in JSON format to be passed to job execution..</param>
        public StartProcessDto(string ReleaseKey = default(string), StrategyEnum? Strategy = default(StrategyEnum?), List<long?> RobotIds = default(List<long?>), int? NoOfRobots = default(int?), int? JobsCount = default(int?), SourceEnum? Source = default(SourceEnum?), string InputArguments = default(string))
        {
            // to ensure "ReleaseKey" is required (not null)
            if (ReleaseKey == null)
            {
                throw new InvalidDataException("ReleaseKey is a required property for StartProcessDto and cannot be null");
            }
            else
            {
                this.ReleaseKey = ReleaseKey;
            }
            this.Strategy = Strategy;
            this.RobotIds = RobotIds;
            this.NoOfRobots = NoOfRobots;
            this.JobsCount = JobsCount;
            this.Source = Source;
            this.InputArguments = InputArguments;
        }
        
        /// <summary>
        /// The unique key of the release associated with the process.
        /// </summary>
        /// <value>The unique key of the release associated with the process.</value>
        [DataMember(Name="ReleaseKey", EmitDefaultValue=false)]
        public string ReleaseKey { get; set; }


        /// <summary>
        /// The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.
        /// </summary>
        /// <value>The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.</value>
        [DataMember(Name="RobotIds", EmitDefaultValue=false)]
        public List<long?> RobotIds { get; set; }

        /// <summary>
        /// DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.
        /// </summary>
        /// <value>DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.</value>
        [DataMember(Name="NoOfRobots", EmitDefaultValue=false)]
        public int? NoOfRobots { get; set; }

        /// <summary>
        /// Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.
        /// </summary>
        /// <value>Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.</value>
        [DataMember(Name="JobsCount", EmitDefaultValue=false)]
        public int? JobsCount { get; set; }


        /// <summary>
        /// Input parameters in JSON format to be passed to job execution.
        /// </summary>
        /// <value>Input parameters in JSON format to be passed to job execution.</value>
        [DataMember(Name="InputArguments", EmitDefaultValue=false)]
        public string InputArguments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StartProcessDto {\n");
            sb.Append("  ReleaseKey: ").Append(ReleaseKey).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  RobotIds: ").Append(RobotIds).Append("\n");
            sb.Append("  NoOfRobots: ").Append(NoOfRobots).Append("\n");
            sb.Append("  JobsCount: ").Append(JobsCount).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  InputArguments: ").Append(InputArguments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StartProcessDto);
        }

        /// <summary>
        /// Returns true if StartProcessDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StartProcessDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StartProcessDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleaseKey == input.ReleaseKey ||
                    (this.ReleaseKey != null &&
                    this.ReleaseKey.Equals(input.ReleaseKey))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.RobotIds == input.RobotIds ||
                    this.RobotIds != null &&
                    this.RobotIds.SequenceEqual(input.RobotIds)
                ) && 
                (
                    this.NoOfRobots == input.NoOfRobots ||
                    (this.NoOfRobots != null &&
                    this.NoOfRobots.Equals(input.NoOfRobots))
                ) && 
                (
                    this.JobsCount == input.JobsCount ||
                    (this.JobsCount != null &&
                    this.JobsCount.Equals(input.JobsCount))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.InputArguments == input.InputArguments ||
                    (this.InputArguments != null &&
                    this.InputArguments.Equals(input.InputArguments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseKey != null)
                    hashCode = hashCode * 59 + this.ReleaseKey.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.RobotIds != null)
                    hashCode = hashCode * 59 + this.RobotIds.GetHashCode();
                if (this.NoOfRobots != null)
                    hashCode = hashCode * 59 + this.NoOfRobots.GetHashCode();
                if (this.JobsCount != null)
                    hashCode = hashCode * 59 + this.JobsCount.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.InputArguments != null)
                    hashCode = hashCode * 59 + this.InputArguments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
