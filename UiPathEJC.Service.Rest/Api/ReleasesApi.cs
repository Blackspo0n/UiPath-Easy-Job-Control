/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReleasesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void ReleasesDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleasesDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ReleaseDto</returns>
        ReleaseDto ReleasesGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of ReleaseDto</returns>
        ApiResponse<ReleaseDto> ReleasesGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets multiple releases.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListReleaseDto</returns>
        ODataResponseListReleaseDto ReleasesGetReleases (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets multiple releases.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListReleaseDto</returns>
        ApiResponse<ODataResponseListReleaseDto> ReleasesGetReleasesWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Partially updates a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns></returns>
        void ReleasesPatchById (long? id, ReleaseDto releaseDto);

        /// <summary>
        /// Partially updates a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleasesPatchByIdWithHttpInfo (long? id, ReleaseDto releaseDto);
        /// <summary>
        /// Creates a new release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>ReleaseDto</returns>
        ReleaseDto ReleasesPost (ReleaseDto releaseDto);

        /// <summary>
        /// Creates a new release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>ApiResponse of ReleaseDto</returns>
        ApiResponse<ReleaseDto> ReleasesPostWithHttpInfo (ReleaseDto releaseDto);
        /// <summary>
        /// Edits a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>ReleaseDto</returns>
        ReleaseDto ReleasesPutById (long? id, ReleaseDto releaseDto);

        /// <summary>
        /// Edits a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>ApiResponse of ReleaseDto</returns>
        ApiResponse<ReleaseDto> ReleasesPutByIdWithHttpInfo (long? id, ReleaseDto releaseDto);
        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ODataResponseInt64</returns>
        ODataResponseInt64 ReleasesRollbackToPreviousReleaseVersionById (long? id);

        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ApiResponse of ODataResponseInt64</returns>
        ApiResponse<ODataResponseInt64> ReleasesRollbackToPreviousReleaseVersionByIdWithHttpInfo (long? id);
        /// <summary>
        /// Updates the package version for the given release to the latest available.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ODataResponseInt64</returns>
        ODataResponseInt64 ReleasesUpdateToLatestPackageVersionById (long? id);

        /// <summary>
        /// Updates the package version for the given release to the latest available.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ApiResponse of ODataResponseInt64</returns>
        ApiResponse<ODataResponseInt64> ReleasesUpdateToLatestPackageVersionByIdWithHttpInfo (long? id);
        /// <summary>
        /// Updates the package version for the given release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>ODataResponseInt64</returns>
        ODataResponseInt64 ReleasesUpdateToSpecificPackageVersionById (long? id, SpecificPackageParameters specificPackageParameters = null);

        /// <summary>
        /// Updates the package version for the given release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>ApiResponse of ODataResponseInt64</returns>
        ApiResponse<ODataResponseInt64> ReleasesUpdateToSpecificPackageVersionByIdWithHttpInfo (long? id, SpecificPackageParameters specificPackageParameters = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleasesDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleasesDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ReleaseDto</returns>
        System.Threading.Tasks.Task<ReleaseDto> ReleasesGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReleaseDto>> ReleasesGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets multiple releases.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListReleaseDto</returns>
        System.Threading.Tasks.Task<ODataResponseListReleaseDto> ReleasesGetReleasesAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets multiple releases.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListReleaseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListReleaseDto>> ReleasesGetReleasesAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Partially updates a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleasesPatchByIdAsync (long? id, ReleaseDto releaseDto);

        /// <summary>
        /// Partially updates a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleasesPatchByIdAsyncWithHttpInfo (long? id, ReleaseDto releaseDto);
        /// <summary>
        /// Creates a new release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>Task of ReleaseDto</returns>
        System.Threading.Tasks.Task<ReleaseDto> ReleasesPostAsync (ReleaseDto releaseDto);

        /// <summary>
        /// Creates a new release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>Task of ApiResponse (ReleaseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReleaseDto>> ReleasesPostAsyncWithHttpInfo (ReleaseDto releaseDto);
        /// <summary>
        /// Edits a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>Task of ReleaseDto</returns>
        System.Threading.Tasks.Task<ReleaseDto> ReleasesPutByIdAsync (long? id, ReleaseDto releaseDto);

        /// <summary>
        /// Edits a release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>Task of ApiResponse (ReleaseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReleaseDto>> ReleasesPutByIdAsyncWithHttpInfo (long? id, ReleaseDto releaseDto);
        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ODataResponseInt64</returns>
        System.Threading.Tasks.Task<ODataResponseInt64> ReleasesRollbackToPreviousReleaseVersionByIdAsync (long? id);

        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ApiResponse (ODataResponseInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseInt64>> ReleasesRollbackToPreviousReleaseVersionByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Updates the package version for the given release to the latest available.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ODataResponseInt64</returns>
        System.Threading.Tasks.Task<ODataResponseInt64> ReleasesUpdateToLatestPackageVersionByIdAsync (long? id);

        /// <summary>
        /// Updates the package version for the given release to the latest available.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ApiResponse (ODataResponseInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseInt64>> ReleasesUpdateToLatestPackageVersionByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Updates the package version for the given release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>Task of ODataResponseInt64</returns>
        System.Threading.Tasks.Task<ODataResponseInt64> ReleasesUpdateToSpecificPackageVersionByIdAsync (long? id, SpecificPackageParameters specificPackageParameters = null);

        /// <summary>
        /// Updates the package version for the given release.
        /// </summary>
        /// <remarks>
        /// Required permissions: Processes.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseInt64>> ReleasesUpdateToSpecificPackageVersionByIdAsyncWithHttpInfo (long? id, SpecificPackageParameters specificPackageParameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReleasesApi : IReleasesApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReleasesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReleasesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a release. Required permissions: Processes.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void ReleasesDeleteById (long? id, string ifMatch = null)
        {
             ReleasesDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes a release. Required permissions: Processes.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReleasesDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesDeleteById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a release. Required permissions: Processes.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleasesDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await ReleasesDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes a release. Required permissions: Processes.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReleasesDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesDeleteById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a release. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ReleaseDto</returns>
        public ReleaseDto ReleasesGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<ReleaseDto> localVarResponse = ReleasesGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a release. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of ReleaseDto</returns>
        public ApiResponse< ReleaseDto > ReleasesGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesGetById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseDto)));
        }

        /// <summary>
        /// Gets a release. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ReleaseDto</returns>
        public async System.Threading.Tasks.Task<ReleaseDto> ReleasesGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<ReleaseDto> localVarResponse = await ReleasesGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a release. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReleaseDto>> ReleasesGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesGetById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseDto)));
        }

        /// <summary>
        /// Gets multiple releases. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListReleaseDto</returns>
        public ODataResponseListReleaseDto ReleasesGetReleases (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListReleaseDto> localVarResponse = ReleasesGetReleasesWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets multiple releases. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListReleaseDto</returns>
        public ApiResponse< ODataResponseListReleaseDto > ReleasesGetReleasesWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesGetReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListReleaseDto)));
        }

        /// <summary>
        /// Gets multiple releases. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListReleaseDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListReleaseDto> ReleasesGetReleasesAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListReleaseDto> localVarResponse = await ReleasesGetReleasesAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets multiple releases. Required permissions: Processes.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListReleaseDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListReleaseDto>> ReleasesGetReleasesAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            IRestResponse localVarResponse = null;
            try
            {
                // make the HTTP request
                 localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(
                    localVarPath,
                    Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                    localVarFileParams,
                    localVarPathParams, localVarHttpContentType);
            }
            catch (Exception err)
            {
                Debug.WriteLine(err.Message);
            }

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesGetReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListReleaseDto)));
        }

        /// <summary>
        /// Partially updates a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns></returns>
        public void ReleasesPatchById (long? id, ReleaseDto releaseDto)
        {
             ReleasesPatchByIdWithHttpInfo(id, releaseDto);
        }

        /// <summary>
        /// Partially updates a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReleasesPatchByIdWithHttpInfo (long? id, ReleaseDto releaseDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesPatchById");
            // verify the required parameter 'releaseDto' is set
            if (releaseDto == null)
                throw new ApiException(400, "Missing required parameter 'releaseDto' when calling ReleasesApi->ReleasesPatchById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseDto != null && releaseDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesPatchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Partially updates a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleasesPatchByIdAsync (long? id, ReleaseDto releaseDto)
        {
             await ReleasesPatchByIdAsyncWithHttpInfo(id, releaseDto);

        }

        /// <summary>
        /// Partially updates a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReleasesPatchByIdAsyncWithHttpInfo (long? id, ReleaseDto releaseDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesPatchById");
            // verify the required parameter 'releaseDto' is set
            if (releaseDto == null)
                throw new ApiException(400, "Missing required parameter 'releaseDto' when calling ReleasesApi->ReleasesPatchById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseDto != null && releaseDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesPatchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new release. Required permissions: Processes.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>ReleaseDto</returns>
        public ReleaseDto ReleasesPost (ReleaseDto releaseDto)
        {
             ApiResponse<ReleaseDto> localVarResponse = ReleasesPostWithHttpInfo(releaseDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new release. Required permissions: Processes.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>ApiResponse of ReleaseDto</returns>
        public ApiResponse< ReleaseDto > ReleasesPostWithHttpInfo (ReleaseDto releaseDto)
        {
            // verify the required parameter 'releaseDto' is set
            if (releaseDto == null)
                throw new ApiException(400, "Missing required parameter 'releaseDto' when calling ReleasesApi->ReleasesPost");

            var localVarPath = "/odata/Releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseDto != null && releaseDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseDto)));
        }

        /// <summary>
        /// Creates a new release. Required permissions: Processes.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>Task of ReleaseDto</returns>
        public async System.Threading.Tasks.Task<ReleaseDto> ReleasesPostAsync (ReleaseDto releaseDto)
        {
             ApiResponse<ReleaseDto> localVarResponse = await ReleasesPostAsyncWithHttpInfo(releaseDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new release. Required permissions: Processes.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseDto">The entity to post</param>
        /// <returns>Task of ApiResponse (ReleaseDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReleaseDto>> ReleasesPostAsyncWithHttpInfo (ReleaseDto releaseDto)
        {
            // verify the required parameter 'releaseDto' is set
            if (releaseDto == null)
                throw new ApiException(400, "Missing required parameter 'releaseDto' when calling ReleasesApi->ReleasesPost");

            var localVarPath = "/odata/Releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseDto != null && releaseDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseDto)));
        }

        /// <summary>
        /// Edits a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>ReleaseDto</returns>
        public ReleaseDto ReleasesPutById (long? id, ReleaseDto releaseDto)
        {
             ApiResponse<ReleaseDto> localVarResponse = ReleasesPutByIdWithHttpInfo(id, releaseDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>ApiResponse of ReleaseDto</returns>
        public ApiResponse< ReleaseDto > ReleasesPutByIdWithHttpInfo (long? id, ReleaseDto releaseDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesPutById");
            // verify the required parameter 'releaseDto' is set
            if (releaseDto == null)
                throw new ApiException(400, "Missing required parameter 'releaseDto' when calling ReleasesApi->ReleasesPutById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseDto != null && releaseDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseDto)));
        }

        /// <summary>
        /// Edits a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>Task of ReleaseDto</returns>
        public async System.Threading.Tasks.Task<ReleaseDto> ReleasesPutByIdAsync (long? id, ReleaseDto releaseDto)
        {
             ApiResponse<ReleaseDto> localVarResponse = await ReleasesPutByIdAsyncWithHttpInfo(id, releaseDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edits a release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="releaseDto">The entity to put</param>
        /// <returns>Task of ApiResponse (ReleaseDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReleaseDto>> ReleasesPutByIdAsyncWithHttpInfo (long? id, ReleaseDto releaseDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesPutById");
            // verify the required parameter 'releaseDto' is set
            if (releaseDto == null)
                throw new ApiException(400, "Missing required parameter 'releaseDto' when calling ReleasesApi->ReleasesPutById");

            var localVarPath = "/odata/Releases({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseDto != null && releaseDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseDto)));
        }

        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ODataResponseInt64</returns>
        public ODataResponseInt64 ReleasesRollbackToPreviousReleaseVersionById (long? id)
        {
             ApiResponse<ODataResponseInt64> localVarResponse = ReleasesRollbackToPreviousReleaseVersionByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ApiResponse of ODataResponseInt64</returns>
        public ApiResponse< ODataResponseInt64 > ReleasesRollbackToPreviousReleaseVersionByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesRollbackToPreviousReleaseVersionById");

            var localVarPath = "/odata/Releases({Id})/UiPath.Server.Configuration.OData.RollbackToPreviousReleaseVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesRollbackToPreviousReleaseVersionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseInt64)));
        }

        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ODataResponseInt64</returns>
        public async System.Threading.Tasks.Task<ODataResponseInt64> ReleasesRollbackToPreviousReleaseVersionByIdAsync (long? id)
        {
             ApiResponse<ODataResponseInt64> localVarResponse = await ReleasesRollbackToPreviousReleaseVersionByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reverts the package versions for the given release to the last version it had before the current one. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ApiResponse (ODataResponseInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseInt64>> ReleasesRollbackToPreviousReleaseVersionByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesRollbackToPreviousReleaseVersionById");

            var localVarPath = "/odata/Releases({Id})/UiPath.Server.Configuration.OData.RollbackToPreviousReleaseVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesRollbackToPreviousReleaseVersionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseInt64)));
        }

        /// <summary>
        /// Updates the package version for the given release to the latest available. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ODataResponseInt64</returns>
        public ODataResponseInt64 ReleasesUpdateToLatestPackageVersionById (long? id)
        {
             ApiResponse<ODataResponseInt64> localVarResponse = ReleasesUpdateToLatestPackageVersionByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the package version for the given release to the latest available. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ApiResponse of ODataResponseInt64</returns>
        public ApiResponse< ODataResponseInt64 > ReleasesUpdateToLatestPackageVersionByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesUpdateToLatestPackageVersionById");

            var localVarPath = "/odata/Releases({Id})/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesUpdateToLatestPackageVersionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseInt64)));
        }

        /// <summary>
        /// Updates the package version for the given release to the latest available. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ODataResponseInt64</returns>
        public async System.Threading.Tasks.Task<ODataResponseInt64> ReleasesUpdateToLatestPackageVersionByIdAsync (long? id)
        {
             ApiResponse<ODataResponseInt64> localVarResponse = await ReleasesUpdateToLatestPackageVersionByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the package version for the given release to the latest available. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ApiResponse (ODataResponseInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseInt64>> ReleasesUpdateToLatestPackageVersionByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesUpdateToLatestPackageVersionById");

            var localVarPath = "/odata/Releases({Id})/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesUpdateToLatestPackageVersionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseInt64)));
        }

        /// <summary>
        /// Updates the package version for the given release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>ODataResponseInt64</returns>
        public ODataResponseInt64 ReleasesUpdateToSpecificPackageVersionById (long? id, SpecificPackageParameters specificPackageParameters = null)
        {
             ApiResponse<ODataResponseInt64> localVarResponse = ReleasesUpdateToSpecificPackageVersionByIdWithHttpInfo(id, specificPackageParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the package version for the given release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>ApiResponse of ODataResponseInt64</returns>
        public ApiResponse< ODataResponseInt64 > ReleasesUpdateToSpecificPackageVersionByIdWithHttpInfo (long? id, SpecificPackageParameters specificPackageParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesUpdateToSpecificPackageVersionById");

            var localVarPath = "/odata/Releases({Id})/UiPath.Server.Configuration.OData.UpdateToSpecificPackageVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (specificPackageParameters != null && specificPackageParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(specificPackageParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = specificPackageParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesUpdateToSpecificPackageVersionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseInt64)));
        }

        /// <summary>
        /// Updates the package version for the given release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>Task of ODataResponseInt64</returns>
        public async System.Threading.Tasks.Task<ODataResponseInt64> ReleasesUpdateToSpecificPackageVersionByIdAsync (long? id, SpecificPackageParameters specificPackageParameters = null)
        {
             ApiResponse<ODataResponseInt64> localVarResponse = await ReleasesUpdateToSpecificPackageVersionByIdAsyncWithHttpInfo(id, specificPackageParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the package version for the given release. Required permissions: Processes.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="specificPackageParameters">PackageVersion - The new package version. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseInt64>> ReleasesUpdateToSpecificPackageVersionByIdAsyncWithHttpInfo (long? id, SpecificPackageParameters specificPackageParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReleasesApi->ReleasesUpdateToSpecificPackageVersionById");

            var localVarPath = "/odata/Releases({Id})/UiPath.Server.Configuration.OData.UpdateToSpecificPackageVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (specificPackageParameters != null && specificPackageParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(specificPackageParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = specificPackageParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesUpdateToSpecificPackageVersionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseInt64)));
        }

    }
}
