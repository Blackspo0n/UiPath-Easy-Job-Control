/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores information about a comment posted by an Orchestrator user on a queue item.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class QueueItemCommentDto :  IEquatable<QueueItemCommentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemCommentDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueueItemCommentDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemCommentDto" /> class.
        /// </summary>
        /// <param name="Text">The comment body. (required).</param>
        /// <param name="QueueItemId">The Id of a Queue Item that the current item is connected to..</param>
        /// <param name="CreationTime">The date and time when the comment was created..</param>
        /// <param name="UserId">The id of the User that authored the comment..</param>
        /// <param name="UserName">The name of the User that authored the comment..</param>
        /// <param name="Id">Id.</param>
        public QueueItemCommentDto(string Text = default(string), long? QueueItemId = default(long?), DateTime? CreationTime = default(DateTime?), long? UserId = default(long?), string UserName = default(string), long? Id = default(long?))
        {
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for QueueItemCommentDto and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            this.QueueItemId = QueueItemId;
            this.CreationTime = CreationTime;
            this.UserId = UserId;
            this.UserName = UserName;
            this.Id = Id;
        }
        
        /// <summary>
        /// The comment body.
        /// </summary>
        /// <value>The comment body.</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The Id of a Queue Item that the current item is connected to.
        /// </summary>
        /// <value>The Id of a Queue Item that the current item is connected to.</value>
        [DataMember(Name="QueueItemId", EmitDefaultValue=false)]
        public long? QueueItemId { get; set; }

        /// <summary>
        /// The date and time when the comment was created.
        /// </summary>
        /// <value>The date and time when the comment was created.</value>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// The id of the User that authored the comment.
        /// </summary>
        /// <value>The id of the User that authored the comment.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// The name of the User that authored the comment.
        /// </summary>
        /// <value>The name of the User that authored the comment.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueItemCommentDto {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  QueueItemId: ").Append(QueueItemId).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueItemCommentDto);
        }

        /// <summary>
        /// Returns true if QueueItemCommentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueItemCommentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueItemCommentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.QueueItemId == input.QueueItemId ||
                    (this.QueueItemId != null &&
                    this.QueueItemId.Equals(input.QueueItemId))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.QueueItemId != null)
                    hashCode = hashCode * 59 + this.QueueItemId.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if(this.Text != null && this.Text.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 512.", new [] { "Text" });
            }

            // Text (string) minLength
            if(this.Text != null && this.Text.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be greater than 0.", new [] { "Text" });
            }

            yield break;
        }
    }

}
