/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvironmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Associates a robot with the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns></returns>
        void EnvironmentsAddRobotById (long? id, AddRobotParameters addRobotParameters = null);

        /// <summary>
        /// Associates a robot with the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnvironmentsAddRobotByIdWithHttpInfo (long? id, AddRobotParameters addRobotParameters = null);
        /// <summary>
        /// Deletes an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void EnvironmentsDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnvironmentsDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a single environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>EnvironmentDto</returns>
        EnvironmentDto EnvironmentsGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of EnvironmentDto</returns>
        ApiResponse<EnvironmentDto> EnvironmentsGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets Environments.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListEnvironmentDto</returns>
        ODataResponseListEnvironmentDto EnvironmentsGetEnvironments (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets Environments.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListEnvironmentDto</returns>
        ApiResponse<ODataResponseListEnvironmentDto> EnvironmentsGetEnvironmentsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>ODataResponseListInt64</returns>
        ODataResponseListInt64 EnvironmentsGetRobotIdsForEnvironmentByKey (long? key);

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>ApiResponse of ODataResponseListInt64</returns>
        ApiResponse<ODataResponseListInt64> EnvironmentsGetRobotIdsForEnvironmentByKeyWithHttpInfo (long? key);
        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListRobotDto</returns>
        ODataResponseListRobotDto EnvironmentsGetRobotsForEnvironmentByKey (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListRobotDto</returns>
        ApiResponse<ODataResponseListRobotDto> EnvironmentsGetRobotsForEnvironmentByKeyWithHttpInfo (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Post new environment
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>EnvironmentDto</returns>
        EnvironmentDto EnvironmentsPost (EnvironmentDto environmentDto);

        /// <summary>
        /// Post new environment
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>ApiResponse of EnvironmentDto</returns>
        ApiResponse<EnvironmentDto> EnvironmentsPostWithHttpInfo (EnvironmentDto environmentDto);
        /// <summary>
        /// Updates an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns></returns>
        void EnvironmentsPutById (long? id, EnvironmentDto environmentDto);

        /// <summary>
        /// Updates an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnvironmentsPutByIdWithHttpInfo (long? id, EnvironmentDto environmentDto);
        /// <summary>
        /// Dissociates a robot from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns></returns>
        void EnvironmentsRemoveRobotById (long? id, RemoveRobotParameters removeRobotParameters = null);

        /// <summary>
        /// Dissociates a robot from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnvironmentsRemoveRobotByIdWithHttpInfo (long? id, RemoveRobotParameters removeRobotParameters = null);
        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns></returns>
        void EnvironmentsSetRobotsById (long? id, SetRobotsParameters setRobotsParameters);

        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnvironmentsSetRobotsByIdWithHttpInfo (long? id, SetRobotsParameters setRobotsParameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Associates a robot with the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnvironmentsAddRobotByIdAsync (long? id, AddRobotParameters addRobotParameters = null);

        /// <summary>
        /// Associates a robot with the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsAddRobotByIdAsyncWithHttpInfo (long? id, AddRobotParameters addRobotParameters = null);
        /// <summary>
        /// Deletes an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnvironmentsDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a single environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of EnvironmentDto</returns>
        System.Threading.Tasks.Task<EnvironmentDto> EnvironmentsGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (EnvironmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentDto>> EnvironmentsGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets Environments.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListEnvironmentDto</returns>
        System.Threading.Tasks.Task<ODataResponseListEnvironmentDto> EnvironmentsGetEnvironmentsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets Environments.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListEnvironmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListEnvironmentDto>> EnvironmentsGetEnvironmentsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>Task of ODataResponseListInt64</returns>
        System.Threading.Tasks.Task<ODataResponseListInt64> EnvironmentsGetRobotIdsForEnvironmentByKeyAsync (long? key);

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>Task of ApiResponse (ODataResponseListInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListInt64>> EnvironmentsGetRobotIdsForEnvironmentByKeyAsyncWithHttpInfo (long? key);
        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListRobotDto</returns>
        System.Threading.Tasks.Task<ODataResponseListRobotDto> EnvironmentsGetRobotsForEnvironmentByKeyAsync (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.View and Robots.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListRobotDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListRobotDto>> EnvironmentsGetRobotsForEnvironmentByKeyAsyncWithHttpInfo (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Post new environment
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>Task of EnvironmentDto</returns>
        System.Threading.Tasks.Task<EnvironmentDto> EnvironmentsPostAsync (EnvironmentDto environmentDto);

        /// <summary>
        /// Post new environment
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>Task of ApiResponse (EnvironmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentDto>> EnvironmentsPostAsyncWithHttpInfo (EnvironmentDto environmentDto);
        /// <summary>
        /// Updates an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnvironmentsPutByIdAsync (long? id, EnvironmentDto environmentDto);

        /// <summary>
        /// Updates an environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsPutByIdAsyncWithHttpInfo (long? id, EnvironmentDto environmentDto);
        /// <summary>
        /// Dissociates a robot from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnvironmentsRemoveRobotByIdAsync (long? id, RemoveRobotParameters removeRobotParameters = null);

        /// <summary>
        /// Dissociates a robot from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsRemoveRobotByIdAsyncWithHttpInfo (long? id, RemoveRobotParameters removeRobotParameters = null);
        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnvironmentsSetRobotsByIdAsync (long? id, SetRobotsParameters setRobotsParameters);

        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment.
        /// </summary>
        /// <remarks>
        /// Required permissions: Environments.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsSetRobotsByIdAsyncWithHttpInfo (long? id, SetRobotsParameters setRobotsParameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvironmentsApi : IEnvironmentsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvironmentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Associates a robot with the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns></returns>
        public void EnvironmentsAddRobotById (long? id, AddRobotParameters addRobotParameters = null)
        {
             EnvironmentsAddRobotByIdWithHttpInfo(id, addRobotParameters);
        }

        /// <summary>
        /// Associates a robot with the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnvironmentsAddRobotByIdWithHttpInfo (long? id, AddRobotParameters addRobotParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsAddRobotById");

            var localVarPath = "/odata/Environments({Id})/UiPath.Server.Configuration.OData.AddRobot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (addRobotParameters != null && addRobotParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addRobotParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRobotParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsAddRobotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associates a robot with the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnvironmentsAddRobotByIdAsync (long? id, AddRobotParameters addRobotParameters = null)
        {
             await EnvironmentsAddRobotByIdAsyncWithHttpInfo(id, addRobotParameters);

        }

        /// <summary>
        /// Associates a robot with the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="addRobotParameters">RobotId - The associated robot Id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsAddRobotByIdAsyncWithHttpInfo (long? id, AddRobotParameters addRobotParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsAddRobotById");

            var localVarPath = "/odata/Environments({Id})/UiPath.Server.Configuration.OData.AddRobot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (addRobotParameters != null && addRobotParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addRobotParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRobotParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsAddRobotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an environment. Required permissions: Environments.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void EnvironmentsDeleteById (long? id, string ifMatch = null)
        {
             EnvironmentsDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an environment. Required permissions: Environments.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnvironmentsDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsDeleteById");

            var localVarPath = "/odata/Environments({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an environment. Required permissions: Environments.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnvironmentsDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await EnvironmentsDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes an environment. Required permissions: Environments.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsDeleteById");

            var localVarPath = "/odata/Environments({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a single environment. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>EnvironmentDto</returns>
        public EnvironmentDto EnvironmentsGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<EnvironmentDto> localVarResponse = EnvironmentsGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single environment. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of EnvironmentDto</returns>
        public ApiResponse< EnvironmentDto > EnvironmentsGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsGetById");

            var localVarPath = "/odata/Environments({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvironmentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentDto)));
        }

        /// <summary>
        /// Gets a single environment. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of EnvironmentDto</returns>
        public async System.Threading.Tasks.Task<EnvironmentDto> EnvironmentsGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<EnvironmentDto> localVarResponse = await EnvironmentsGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single environment. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (EnvironmentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentDto>> EnvironmentsGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsGetById");

            var localVarPath = "/odata/Environments({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvironmentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentDto)));
        }

        /// <summary>
        /// Gets Environments. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListEnvironmentDto</returns>
        public ODataResponseListEnvironmentDto EnvironmentsGetEnvironments (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListEnvironmentDto> localVarResponse = EnvironmentsGetEnvironmentsWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Environments. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListEnvironmentDto</returns>
        public ApiResponse< ODataResponseListEnvironmentDto > EnvironmentsGetEnvironmentsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetEnvironments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListEnvironmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListEnvironmentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListEnvironmentDto)));
        }

        /// <summary>
        /// Gets Environments. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListEnvironmentDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListEnvironmentDto> EnvironmentsGetEnvironmentsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListEnvironmentDto> localVarResponse = await EnvironmentsGetEnvironmentsAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Environments. Required permissions: Environments.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListEnvironmentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListEnvironmentDto>> EnvironmentsGetEnvironmentsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetEnvironments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListEnvironmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListEnvironmentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListEnvironmentDto)));
        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>ODataResponseListInt64</returns>
        public ODataResponseListInt64 EnvironmentsGetRobotIdsForEnvironmentByKey (long? key)
        {
             ApiResponse<ODataResponseListInt64> localVarResponse = EnvironmentsGetRobotIdsForEnvironmentByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>ApiResponse of ODataResponseListInt64</returns>
        public ApiResponse< ODataResponseListInt64 > EnvironmentsGetRobotIdsForEnvironmentByKeyWithHttpInfo (long? key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling EnvironmentsApi->EnvironmentsGetRobotIdsForEnvironmentByKey");

            var localVarPath = "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotIdsForEnvironment(key={key})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetRobotIdsForEnvironmentByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListInt64)));
        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>Task of ODataResponseListInt64</returns>
        public async System.Threading.Tasks.Task<ODataResponseListInt64> EnvironmentsGetRobotIdsForEnvironmentByKeyAsync (long? key)
        {
             ApiResponse<ODataResponseListInt64> localVarResponse = await EnvironmentsGetRobotIdsForEnvironmentByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of all the ids of the robots associated to an environment based on environment Id. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the robot ids are fetched.</param>
        /// <returns>Task of ApiResponse (ODataResponseListInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListInt64>> EnvironmentsGetRobotIdsForEnvironmentByKeyAsyncWithHttpInfo (long? key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling EnvironmentsApi->EnvironmentsGetRobotIdsForEnvironmentByKey");

            var localVarPath = "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotIdsForEnvironment(key={key})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetRobotIdsForEnvironmentByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListInt64)));
        }

        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListRobotDto</returns>
        public ODataResponseListRobotDto EnvironmentsGetRobotsForEnvironmentByKey (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListRobotDto> localVarResponse = EnvironmentsGetRobotsForEnvironmentByKeyWithHttpInfo(key, expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListRobotDto</returns>
        public ApiResponse< ODataResponseListRobotDto > EnvironmentsGetRobotsForEnvironmentByKeyWithHttpInfo (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling EnvironmentsApi->EnvironmentsGetRobotsForEnvironmentByKey");

            var localVarPath = "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotsForEnvironment(key={key})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetRobotsForEnvironmentByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListRobotDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListRobotDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListRobotDto)));
        }

        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListRobotDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListRobotDto> EnvironmentsGetRobotsForEnvironmentByKeyAsync (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListRobotDto> localVarResponse = await EnvironmentsGetRobotsForEnvironmentByKeyAsyncWithHttpInfo(key, expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options. Required permissions: Environments.View and Robots.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The Id of the environment for which the associated robots are placed first.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListRobotDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListRobotDto>> EnvironmentsGetRobotsForEnvironmentByKeyAsyncWithHttpInfo (long? key, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling EnvironmentsApi->EnvironmentsGetRobotsForEnvironmentByKey");

            var localVarPath = "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotsForEnvironment(key={key})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsGetRobotsForEnvironmentByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListRobotDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListRobotDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListRobotDto)));
        }

        /// <summary>
        /// Post new environment Required permissions: Environments.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>EnvironmentDto</returns>
        public EnvironmentDto EnvironmentsPost (EnvironmentDto environmentDto)
        {
             ApiResponse<EnvironmentDto> localVarResponse = EnvironmentsPostWithHttpInfo(environmentDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post new environment Required permissions: Environments.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>ApiResponse of EnvironmentDto</returns>
        public ApiResponse< EnvironmentDto > EnvironmentsPostWithHttpInfo (EnvironmentDto environmentDto)
        {
            // verify the required parameter 'environmentDto' is set
            if (environmentDto == null)
                throw new ApiException(400, "Missing required parameter 'environmentDto' when calling EnvironmentsApi->EnvironmentsPost");

            var localVarPath = "/odata/Environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environmentDto != null && environmentDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(environmentDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = environmentDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvironmentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentDto)));
        }

        /// <summary>
        /// Post new environment Required permissions: Environments.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>Task of EnvironmentDto</returns>
        public async System.Threading.Tasks.Task<EnvironmentDto> EnvironmentsPostAsync (EnvironmentDto environmentDto)
        {
             ApiResponse<EnvironmentDto> localVarResponse = await EnvironmentsPostAsyncWithHttpInfo(environmentDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post new environment Required permissions: Environments.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentDto">The entity to post</param>
        /// <returns>Task of ApiResponse (EnvironmentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentDto>> EnvironmentsPostAsyncWithHttpInfo (EnvironmentDto environmentDto)
        {
            // verify the required parameter 'environmentDto' is set
            if (environmentDto == null)
                throw new ApiException(400, "Missing required parameter 'environmentDto' when calling EnvironmentsApi->EnvironmentsPost");

            var localVarPath = "/odata/Environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environmentDto != null && environmentDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(environmentDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = environmentDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvironmentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentDto)));
        }

        /// <summary>
        /// Updates an environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns></returns>
        public void EnvironmentsPutById (long? id, EnvironmentDto environmentDto)
        {
             EnvironmentsPutByIdWithHttpInfo(id, environmentDto);
        }

        /// <summary>
        /// Updates an environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnvironmentsPutByIdWithHttpInfo (long? id, EnvironmentDto environmentDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsPutById");
            // verify the required parameter 'environmentDto' is set
            if (environmentDto == null)
                throw new ApiException(400, "Missing required parameter 'environmentDto' when calling EnvironmentsApi->EnvironmentsPutById");

            var localVarPath = "/odata/Environments({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (environmentDto != null && environmentDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(environmentDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = environmentDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnvironmentsPutByIdAsync (long? id, EnvironmentDto environmentDto)
        {
             await EnvironmentsPutByIdAsyncWithHttpInfo(id, environmentDto);

        }

        /// <summary>
        /// Updates an environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="environmentDto">The entity to put</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsPutByIdAsyncWithHttpInfo (long? id, EnvironmentDto environmentDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsPutById");
            // verify the required parameter 'environmentDto' is set
            if (environmentDto == null)
                throw new ApiException(400, "Missing required parameter 'environmentDto' when calling EnvironmentsApi->EnvironmentsPutById");

            var localVarPath = "/odata/Environments({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (environmentDto != null && environmentDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(environmentDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = environmentDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Dissociates a robot from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns></returns>
        public void EnvironmentsRemoveRobotById (long? id, RemoveRobotParameters removeRobotParameters = null)
        {
             EnvironmentsRemoveRobotByIdWithHttpInfo(id, removeRobotParameters);
        }

        /// <summary>
        /// Dissociates a robot from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnvironmentsRemoveRobotByIdWithHttpInfo (long? id, RemoveRobotParameters removeRobotParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsRemoveRobotById");

            var localVarPath = "/odata/Environments({Id})/UiPath.Server.Configuration.OData.RemoveRobot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (removeRobotParameters != null && removeRobotParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(removeRobotParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeRobotParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsRemoveRobotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Dissociates a robot from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnvironmentsRemoveRobotByIdAsync (long? id, RemoveRobotParameters removeRobotParameters = null)
        {
             await EnvironmentsRemoveRobotByIdAsyncWithHttpInfo(id, removeRobotParameters);

        }

        /// <summary>
        /// Dissociates a robot from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="removeRobotParameters">RobotId - The dissociated robot Id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsRemoveRobotByIdAsyncWithHttpInfo (long? id, RemoveRobotParameters removeRobotParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsRemoveRobotById");

            var localVarPath = "/odata/Environments({Id})/UiPath.Server.Configuration.OData.RemoveRobot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (removeRobotParameters != null && removeRobotParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(removeRobotParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeRobotParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsRemoveRobotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns></returns>
        public void EnvironmentsSetRobotsById (long? id, SetRobotsParameters setRobotsParameters)
        {
             EnvironmentsSetRobotsByIdWithHttpInfo(id, setRobotsParameters);
        }

        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnvironmentsSetRobotsByIdWithHttpInfo (long? id, SetRobotsParameters setRobotsParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsSetRobotsById");
            // verify the required parameter 'setRobotsParameters' is set
            if (setRobotsParameters == null)
                throw new ApiException(400, "Missing required parameter 'setRobotsParameters' when calling EnvironmentsApi->EnvironmentsSetRobotsById");

            var localVarPath = "/odata/Environments({Id})/UiPath.Server.Configuration.OData.SetRobots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setRobotsParameters != null && setRobotsParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setRobotsParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRobotsParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsSetRobotsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnvironmentsSetRobotsByIdAsync (long? id, SetRobotsParameters setRobotsParameters)
        {
             await EnvironmentsSetRobotsByIdAsyncWithHttpInfo(id, setRobotsParameters);

        }

        /// <summary>
        /// Associates a group of robots with and dissociates another group of robots from the given environment. Required permissions: Environments.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setRobotsParameters">&lt;para /&gt;addedRobotIds - The id of the robots to be associated with the environment.              &lt;para /&gt;removedRobotIds - The id of the robots to be dissociated from the environment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnvironmentsSetRobotsByIdAsyncWithHttpInfo (long? id, SetRobotsParameters setRobotsParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EnvironmentsApi->EnvironmentsSetRobotsById");
            // verify the required parameter 'setRobotsParameters' is set
            if (setRobotsParameters == null)
                throw new ApiException(400, "Missing required parameter 'setRobotsParameters' when calling EnvironmentsApi->EnvironmentsSetRobotsById");

            var localVarPath = "/odata/Environments({Id})/UiPath.Server.Configuration.OData.SetRobots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setRobotsParameters != null && setRobotsParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setRobotsParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setRobotsParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvironmentsSetRobotsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
