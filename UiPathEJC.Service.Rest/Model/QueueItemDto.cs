/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Defines a piece of data that can be processed by a robot and the information associated with its processing status.  &lt;para /&gt;Queue items are grouped in queues.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class QueueItemDto :  IEquatable<QueueItemDto>, IValidatableObject
    {
        /// <summary>
        /// The processing state of the item.
        /// </summary>
        /// <value>The processing state of the item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 1,
            
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 2,
            
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 3,
            
            /// <summary>
            /// Enum Successful for value: Successful
            /// </summary>
            [EnumMember(Value = "Successful")]
            Successful = 4,
            
            /// <summary>
            /// Enum Abandoned for value: Abandoned
            /// </summary>
            [EnumMember(Value = "Abandoned")]
            Abandoned = 5,
            
            /// <summary>
            /// Enum Retried for value: Retried
            /// </summary>
            [EnumMember(Value = "Retried")]
            Retried = 6,
            
            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 7
        }

        /// <summary>
        /// The processing state of the item.
        /// </summary>
        /// <value>The processing state of the item.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The review state of the item - applicable only for failed items.
        /// </summary>
        /// <value>The review state of the item - applicable only for failed items.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReviewStatusEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum InReview for value: InReview
            /// </summary>
            [EnumMember(Value = "InReview")]
            InReview = 2,
            
            /// <summary>
            /// Enum Verified for value: Verified
            /// </summary>
            [EnumMember(Value = "Verified")]
            Verified = 3,
            
            /// <summary>
            /// Enum Retried for value: Retried
            /// </summary>
            [EnumMember(Value = "Retried")]
            Retried = 4
        }

        /// <summary>
        /// The review state of the item - applicable only for failed items.
        /// </summary>
        /// <value>The review state of the item - applicable only for failed items.</value>
        [DataMember(Name="ReviewStatus", EmitDefaultValue=false)]
        public ReviewStatusEnum? ReviewStatus { get; set; }
        /// <summary>
        /// The processing exception. If the item has not been processed or has been processed successfully it will be null.
        /// </summary>
        /// <value>The processing exception. If the item has not been processed or has been processed successfully it will be null.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingExceptionTypeEnum
        {
            
            /// <summary>
            /// Enum ApplicationException for value: ApplicationException
            /// </summary>
            [EnumMember(Value = "ApplicationException")]
            ApplicationException = 1,
            
            /// <summary>
            /// Enum BusinessException for value: BusinessException
            /// </summary>
            [EnumMember(Value = "BusinessException")]
            BusinessException = 2
        }

        /// <summary>
        /// The processing exception. If the item has not been processed or has been processed successfully it will be null.
        /// </summary>
        /// <value>The processing exception. If the item has not been processed or has been processed successfully it will be null.</value>
        [DataMember(Name="ProcessingExceptionType", EmitDefaultValue=false)]
        public ProcessingExceptionTypeEnum? ProcessingExceptionType { get; set; }
        /// <summary>
        /// Sets the processing importance for a given item.
        /// </summary>
        /// <value>Sets the processing importance for a given item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 1,
            
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 2,
            
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 3
        }

        /// <summary>
        /// Sets the processing importance for a given item.
        /// </summary>
        /// <value>Sets the processing importance for a given item.</value>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemDto" /> class.
        /// </summary>
        /// <param name="QueueDefinitionId">The Id of the parent queue..</param>
        /// <param name="QueueDefinition">The parent queue.</param>
        /// <param name="ProcessingException">Stores the actual processing exception, if any..</param>
        /// <param name="SpecificContent">A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio..</param>
        /// <param name="Output">A collection of key value pairs containing custom data resulted after successful processing..</param>
        /// <param name="OutputData">A JSON representation of the output data generated by the item&#39;s processing..</param>
        /// <param name="Status">The processing state of the item..</param>
        /// <param name="ReviewStatus">The review state of the item - applicable only for failed items..</param>
        /// <param name="ReviewerUserId">The UserId of the Reviewer, if any..</param>
        /// <param name="ReviewerUser">Stores the actual reviewer user, if any..</param>
        /// <param name="Key">The unique identifier of a queue item..</param>
        /// <param name="Reference">An optional, user-specified value for queue item identification..</param>
        /// <param name="ProcessingExceptionType">The processing exception. If the item has not been processed or has been processed successfully it will be null..</param>
        /// <param name="DueDate">The latest date and time at which the item should be processed. If empty the item can be processed at any given time..</param>
        /// <param name="Priority">Sets the processing importance for a given item..</param>
        /// <param name="Robot">The robot that has processed the item, if any..</param>
        /// <param name="DeferDate">The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible..</param>
        /// <param name="StartProcessing">The date and time at which the item processing started. This is null if the item was not processed..</param>
        /// <param name="EndProcessing">The date and time at which the item processing ended. This is null if the item was not processed..</param>
        /// <param name="SecondsInPreviousAttempts">The number of seconds that the last failed processing lasted..</param>
        /// <param name="AncestorId">The Id of an ancestor item connected to the current item..</param>
        /// <param name="RetryNumber">The number of times this work item has been processed.  &lt;para /&gt;This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException..</param>
        /// <param name="SpecificData">A JSON representation of the specific content..</param>
        /// <param name="CreationTime">The date and time when the item was created..</param>
        /// <param name="Progress">String field which is used to keep track of the business flow progress..</param>
        /// <param name="RowVersion">Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not..</param>
        /// <param name="Id">Id.</param>
        public QueueItemDto(long? QueueDefinitionId = default(long?), QueueDefinitionDto QueueDefinition = default(QueueDefinitionDto), ProcessingExceptionDto ProcessingException = default(ProcessingExceptionDto), Dictionary<string, Object> SpecificContent = default(Dictionary<string, Object>), QueueItemOutput Output = default(QueueItemOutput), string OutputData = default(string), StatusEnum? Status = default(StatusEnum?), ReviewStatusEnum? ReviewStatus = default(ReviewStatusEnum?), long? ReviewerUserId = default(long?), SimpleUserDto ReviewerUser = default(SimpleUserDto), Guid? Key = default(Guid?), string Reference = default(string), ProcessingExceptionTypeEnum? ProcessingExceptionType = default(ProcessingExceptionTypeEnum?), DateTime? DueDate = default(DateTime?), PriorityEnum? Priority = default(PriorityEnum?), SimpleRobotDto Robot = default(SimpleRobotDto), DateTime? DeferDate = default(DateTime?), DateTime? StartProcessing = default(DateTime?), DateTime? EndProcessing = default(DateTime?), int? SecondsInPreviousAttempts = default(int?), long? AncestorId = default(long?), int? RetryNumber = default(int?), string SpecificData = default(string), DateTime? CreationTime = default(DateTime?), string Progress = default(string), byte[] RowVersion = default(byte[]), long? Id = default(long?))
        {
            this.QueueDefinitionId = QueueDefinitionId;
            this.QueueDefinition = QueueDefinition;
            this.ProcessingException = ProcessingException;
            this.SpecificContent = SpecificContent;
            this.Output = Output;
            this.OutputData = OutputData;
            this.Status = Status;
            this.ReviewStatus = ReviewStatus;
            this.ReviewerUserId = ReviewerUserId;
            this.ReviewerUser = ReviewerUser;
            this.Key = Key;
            this.Reference = Reference;
            this.ProcessingExceptionType = ProcessingExceptionType;
            this.DueDate = DueDate;
            this.Priority = Priority;
            this.Robot = Robot;
            this.DeferDate = DeferDate;
            this.StartProcessing = StartProcessing;
            this.EndProcessing = EndProcessing;
            this.SecondsInPreviousAttempts = SecondsInPreviousAttempts;
            this.AncestorId = AncestorId;
            this.RetryNumber = RetryNumber;
            this.SpecificData = SpecificData;
            this.CreationTime = CreationTime;
            this.Progress = Progress;
            this.RowVersion = RowVersion;
            this.Id = Id;
        }
        
        /// <summary>
        /// The Id of the parent queue.
        /// </summary>
        /// <value>The Id of the parent queue.</value>
        [DataMember(Name="QueueDefinitionId", EmitDefaultValue=false)]
        public long? QueueDefinitionId { get; set; }

        /// <summary>
        /// The parent queue
        /// </summary>
        /// <value>The parent queue</value>
        [DataMember(Name="QueueDefinition", EmitDefaultValue=false)]
        public QueueDefinitionDto QueueDefinition { get; set; }

        /// <summary>
        /// Stores the actual processing exception, if any.
        /// </summary>
        /// <value>Stores the actual processing exception, if any.</value>
        [DataMember(Name="ProcessingException", EmitDefaultValue=false)]
        public ProcessingExceptionDto ProcessingException { get; set; }

        /// <summary>
        /// A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.
        /// </summary>
        /// <value>A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.</value>
        [DataMember(Name="SpecificContent", EmitDefaultValue=false)]
        public Dictionary<string, Object> SpecificContent { get; set; }

        /// <summary>
        /// A collection of key value pairs containing custom data resulted after successful processing.
        /// </summary>
        /// <value>A collection of key value pairs containing custom data resulted after successful processing.</value>
        [DataMember(Name="Output", EmitDefaultValue=false)]
        public QueueItemOutput Output { get; set; }

        /// <summary>
        /// A JSON representation of the output data generated by the item&#39;s processing.
        /// </summary>
        /// <value>A JSON representation of the output data generated by the item&#39;s processing.</value>
        [DataMember(Name="OutputData", EmitDefaultValue=false)]
        public string OutputData { get; set; }



        /// <summary>
        /// The UserId of the Reviewer, if any.
        /// </summary>
        /// <value>The UserId of the Reviewer, if any.</value>
        [DataMember(Name="ReviewerUserId", EmitDefaultValue=false)]
        public long? ReviewerUserId { get; set; }

        /// <summary>
        /// Stores the actual reviewer user, if any.
        /// </summary>
        /// <value>Stores the actual reviewer user, if any.</value>
        [DataMember(Name="ReviewerUser", EmitDefaultValue=false)]
        public SimpleUserDto ReviewerUser { get; set; }

        /// <summary>
        /// The unique identifier of a queue item.
        /// </summary>
        /// <value>The unique identifier of a queue item.</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public Guid? Key { get; set; }

        /// <summary>
        /// An optional, user-specified value for queue item identification.
        /// </summary>
        /// <value>An optional, user-specified value for queue item identification.</value>
        [DataMember(Name="Reference", EmitDefaultValue=false)]
        public string Reference { get; set; }


        /// <summary>
        /// The latest date and time at which the item should be processed. If empty the item can be processed at any given time.
        /// </summary>
        /// <value>The latest date and time at which the item should be processed. If empty the item can be processed at any given time.</value>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }


        /// <summary>
        /// The robot that has processed the item, if any.
        /// </summary>
        /// <value>The robot that has processed the item, if any.</value>
        [DataMember(Name="Robot", EmitDefaultValue=false)]
        public SimpleRobotDto Robot { get; set; }

        /// <summary>
        /// The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.
        /// </summary>
        /// <value>The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.</value>
        [DataMember(Name="DeferDate", EmitDefaultValue=false)]
        public DateTime? DeferDate { get; set; }

        /// <summary>
        /// The date and time at which the item processing started. This is null if the item was not processed.
        /// </summary>
        /// <value>The date and time at which the item processing started. This is null if the item was not processed.</value>
        [DataMember(Name="StartProcessing", EmitDefaultValue=false)]
        public DateTime? StartProcessing { get; set; }

        /// <summary>
        /// The date and time at which the item processing ended. This is null if the item was not processed.
        /// </summary>
        /// <value>The date and time at which the item processing ended. This is null if the item was not processed.</value>
        [DataMember(Name="EndProcessing", EmitDefaultValue=false)]
        public DateTime? EndProcessing { get; set; }

        /// <summary>
        /// The number of seconds that the last failed processing lasted.
        /// </summary>
        /// <value>The number of seconds that the last failed processing lasted.</value>
        [DataMember(Name="SecondsInPreviousAttempts", EmitDefaultValue=false)]
        public int? SecondsInPreviousAttempts { get; set; }

        /// <summary>
        /// The Id of an ancestor item connected to the current item.
        /// </summary>
        /// <value>The Id of an ancestor item connected to the current item.</value>
        [DataMember(Name="AncestorId", EmitDefaultValue=false)]
        public long? AncestorId { get; set; }

        /// <summary>
        /// The number of times this work item has been processed.  &lt;para /&gt;This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.
        /// </summary>
        /// <value>The number of times this work item has been processed.  &lt;para /&gt;This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.</value>
        [DataMember(Name="RetryNumber", EmitDefaultValue=false)]
        public int? RetryNumber { get; set; }

        /// <summary>
        /// A JSON representation of the specific content.
        /// </summary>
        /// <value>A JSON representation of the specific content.</value>
        [DataMember(Name="SpecificData", EmitDefaultValue=false)]
        public string SpecificData { get; set; }

        /// <summary>
        /// The date and time when the item was created.
        /// </summary>
        /// <value>The date and time when the item was created.</value>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// String field which is used to keep track of the business flow progress.
        /// </summary>
        /// <value>String field which is used to keep track of the business flow progress.</value>
        [DataMember(Name="Progress", EmitDefaultValue=false)]
        public string Progress { get; set; }

        /// <summary>
        /// Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.
        /// </summary>
        /// <value>Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.</value>
        [DataMember(Name="RowVersion", EmitDefaultValue=false)]
        public byte[] RowVersion { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueItemDto {\n");
            sb.Append("  QueueDefinitionId: ").Append(QueueDefinitionId).Append("\n");
            sb.Append("  QueueDefinition: ").Append(QueueDefinition).Append("\n");
            sb.Append("  ProcessingException: ").Append(ProcessingException).Append("\n");
            sb.Append("  SpecificContent: ").Append(SpecificContent).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  OutputData: ").Append(OutputData).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReviewStatus: ").Append(ReviewStatus).Append("\n");
            sb.Append("  ReviewerUserId: ").Append(ReviewerUserId).Append("\n");
            sb.Append("  ReviewerUser: ").Append(ReviewerUser).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ProcessingExceptionType: ").Append(ProcessingExceptionType).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Robot: ").Append(Robot).Append("\n");
            sb.Append("  DeferDate: ").Append(DeferDate).Append("\n");
            sb.Append("  StartProcessing: ").Append(StartProcessing).Append("\n");
            sb.Append("  EndProcessing: ").Append(EndProcessing).Append("\n");
            sb.Append("  SecondsInPreviousAttempts: ").Append(SecondsInPreviousAttempts).Append("\n");
            sb.Append("  AncestorId: ").Append(AncestorId).Append("\n");
            sb.Append("  RetryNumber: ").Append(RetryNumber).Append("\n");
            sb.Append("  SpecificData: ").Append(SpecificData).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  RowVersion: ").Append(RowVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueItemDto);
        }

        /// <summary>
        /// Returns true if QueueItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueItemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueDefinitionId == input.QueueDefinitionId ||
                    (this.QueueDefinitionId != null &&
                    this.QueueDefinitionId.Equals(input.QueueDefinitionId))
                ) && 
                (
                    this.QueueDefinition == input.QueueDefinition ||
                    (this.QueueDefinition != null &&
                    this.QueueDefinition.Equals(input.QueueDefinition))
                ) && 
                (
                    this.ProcessingException == input.ProcessingException ||
                    (this.ProcessingException != null &&
                    this.ProcessingException.Equals(input.ProcessingException))
                ) && 
                (
                    this.SpecificContent == input.SpecificContent ||
                    this.SpecificContent != null &&
                    this.SpecificContent.SequenceEqual(input.SpecificContent)
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.OutputData == input.OutputData ||
                    (this.OutputData != null &&
                    this.OutputData.Equals(input.OutputData))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ReviewStatus == input.ReviewStatus ||
                    (this.ReviewStatus != null &&
                    this.ReviewStatus.Equals(input.ReviewStatus))
                ) && 
                (
                    this.ReviewerUserId == input.ReviewerUserId ||
                    (this.ReviewerUserId != null &&
                    this.ReviewerUserId.Equals(input.ReviewerUserId))
                ) && 
                (
                    this.ReviewerUser == input.ReviewerUser ||
                    (this.ReviewerUser != null &&
                    this.ReviewerUser.Equals(input.ReviewerUser))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ProcessingExceptionType == input.ProcessingExceptionType ||
                    (this.ProcessingExceptionType != null &&
                    this.ProcessingExceptionType.Equals(input.ProcessingExceptionType))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Robot == input.Robot ||
                    (this.Robot != null &&
                    this.Robot.Equals(input.Robot))
                ) && 
                (
                    this.DeferDate == input.DeferDate ||
                    (this.DeferDate != null &&
                    this.DeferDate.Equals(input.DeferDate))
                ) && 
                (
                    this.StartProcessing == input.StartProcessing ||
                    (this.StartProcessing != null &&
                    this.StartProcessing.Equals(input.StartProcessing))
                ) && 
                (
                    this.EndProcessing == input.EndProcessing ||
                    (this.EndProcessing != null &&
                    this.EndProcessing.Equals(input.EndProcessing))
                ) && 
                (
                    this.SecondsInPreviousAttempts == input.SecondsInPreviousAttempts ||
                    (this.SecondsInPreviousAttempts != null &&
                    this.SecondsInPreviousAttempts.Equals(input.SecondsInPreviousAttempts))
                ) && 
                (
                    this.AncestorId == input.AncestorId ||
                    (this.AncestorId != null &&
                    this.AncestorId.Equals(input.AncestorId))
                ) && 
                (
                    this.RetryNumber == input.RetryNumber ||
                    (this.RetryNumber != null &&
                    this.RetryNumber.Equals(input.RetryNumber))
                ) && 
                (
                    this.SpecificData == input.SpecificData ||
                    (this.SpecificData != null &&
                    this.SpecificData.Equals(input.SpecificData))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.RowVersion == input.RowVersion ||
                    (this.RowVersion != null &&
                    this.RowVersion.Equals(input.RowVersion))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueDefinitionId != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionId.GetHashCode();
                if (this.QueueDefinition != null)
                    hashCode = hashCode * 59 + this.QueueDefinition.GetHashCode();
                if (this.ProcessingException != null)
                    hashCode = hashCode * 59 + this.ProcessingException.GetHashCode();
                if (this.SpecificContent != null)
                    hashCode = hashCode * 59 + this.SpecificContent.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.OutputData != null)
                    hashCode = hashCode * 59 + this.OutputData.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ReviewStatus != null)
                    hashCode = hashCode * 59 + this.ReviewStatus.GetHashCode();
                if (this.ReviewerUserId != null)
                    hashCode = hashCode * 59 + this.ReviewerUserId.GetHashCode();
                if (this.ReviewerUser != null)
                    hashCode = hashCode * 59 + this.ReviewerUser.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.ProcessingExceptionType != null)
                    hashCode = hashCode * 59 + this.ProcessingExceptionType.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Robot != null)
                    hashCode = hashCode * 59 + this.Robot.GetHashCode();
                if (this.DeferDate != null)
                    hashCode = hashCode * 59 + this.DeferDate.GetHashCode();
                if (this.StartProcessing != null)
                    hashCode = hashCode * 59 + this.StartProcessing.GetHashCode();
                if (this.EndProcessing != null)
                    hashCode = hashCode * 59 + this.EndProcessing.GetHashCode();
                if (this.SecondsInPreviousAttempts != null)
                    hashCode = hashCode * 59 + this.SecondsInPreviousAttempts.GetHashCode();
                if (this.AncestorId != null)
                    hashCode = hashCode * 59 + this.AncestorId.GetHashCode();
                if (this.RetryNumber != null)
                    hashCode = hashCode * 59 + this.RetryNumber.GetHashCode();
                if (this.SpecificData != null)
                    hashCode = hashCode * 59 + this.SpecificData.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.RowVersion != null)
                    hashCode = hashCode * 59 + this.RowVersion.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if(this.Reference != null && this.Reference.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 128.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if(this.Reference != null && this.Reference.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be greater than 0.", new [] { "Reference" });
            }

            yield break;
        }
    }

}
