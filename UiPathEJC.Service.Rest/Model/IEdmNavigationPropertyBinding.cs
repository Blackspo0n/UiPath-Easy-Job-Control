/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// IEdmNavigationPropertyBinding
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class IEdmNavigationPropertyBinding :  IEquatable<IEdmNavigationPropertyBinding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IEdmNavigationPropertyBinding" /> class.
        /// </summary>
        /// <param name="NavigationProperty">NavigationProperty.</param>
        /// <param name="Target">Target.</param>
        /// <param name="Path">Path.</param>
        public IEdmNavigationPropertyBinding(IEdmNavigationProperty NavigationProperty = default(IEdmNavigationProperty), IEdmNavigationSource Target = default(IEdmNavigationSource), IEdmPathExpression Path = default(IEdmPathExpression))
        {
            this.NavigationProperty = NavigationProperty;
            this.Target = Target;
            this.Path = Path;
        }
        
        /// <summary>
        /// Gets or Sets NavigationProperty
        /// </summary>
        [DataMember(Name="NavigationProperty", EmitDefaultValue=false)]
        public IEdmNavigationProperty NavigationProperty { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="Target", EmitDefaultValue=false)]
        public IEdmNavigationSource Target { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public IEdmPathExpression Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IEdmNavigationPropertyBinding {\n");
            sb.Append("  NavigationProperty: ").Append(NavigationProperty).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IEdmNavigationPropertyBinding);
        }

        /// <summary>
        /// Returns true if IEdmNavigationPropertyBinding instances are equal
        /// </summary>
        /// <param name="input">Instance of IEdmNavigationPropertyBinding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IEdmNavigationPropertyBinding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NavigationProperty == input.NavigationProperty ||
                    (this.NavigationProperty != null &&
                    this.NavigationProperty.Equals(input.NavigationProperty))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NavigationProperty != null)
                    hashCode = hashCode * 59 + this.NavigationProperty.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
