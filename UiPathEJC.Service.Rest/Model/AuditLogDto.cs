/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores audit information about any action performed in Orchestrator.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class AuditLogDto :  IEquatable<AuditLogDto>, IValidatableObject
    {
        /// <summary>
        /// The action performed (create, update, delete etc)
        /// </summary>
        /// <value>The action performed (create, update, delete etc)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum Create for value: Create
            /// </summary>
            [EnumMember(Value = "Create")]
            Create = 2,
            
            /// <summary>
            /// Enum Update for value: Update
            /// </summary>
            [EnumMember(Value = "Update")]
            Update = 3,
            
            /// <summary>
            /// Enum Delete for value: Delete
            /// </summary>
            [EnumMember(Value = "Delete")]
            Delete = 4,
            
            /// <summary>
            /// Enum StartJob for value: StartJob
            /// </summary>
            [EnumMember(Value = "StartJob")]
            StartJob = 5,
            
            /// <summary>
            /// Enum StopJob for value: StopJob
            /// </summary>
            [EnumMember(Value = "StopJob")]
            StopJob = 6,
            
            /// <summary>
            /// Enum Associate for value: Associate
            /// </summary>
            [EnumMember(Value = "Associate")]
            Associate = 7,
            
            /// <summary>
            /// Enum Upload for value: Upload
            /// </summary>
            [EnumMember(Value = "Upload")]
            Upload = 8,
            
            /// <summary>
            /// Enum ChangeStatus for value: ChangeStatus
            /// </summary>
            [EnumMember(Value = "ChangeStatus")]
            ChangeStatus = 9,
            
            /// <summary>
            /// Enum Import for value: Import
            /// </summary>
            [EnumMember(Value = "Import")]
            Import = 10,
            
            /// <summary>
            /// Enum ChangePassword for value: ChangePassword
            /// </summary>
            [EnumMember(Value = "ChangePassword")]
            ChangePassword = 11,
            
            /// <summary>
            /// Enum Register for value: Register
            /// </summary>
            [EnumMember(Value = "Register")]
            Register = 12,
            
            /// <summary>
            /// Enum Toggle for value: Toggle
            /// </summary>
            [EnumMember(Value = "Toggle")]
            Toggle = 13,
            
            /// <summary>
            /// Enum ResetPassword for value: ResetPassword
            /// </summary>
            [EnumMember(Value = "ResetPassword")]
            ResetPassword = 14,
            
            /// <summary>
            /// Enum PasswordResetAttempt for value: PasswordResetAttempt
            /// </summary>
            [EnumMember(Value = "PasswordResetAttempt")]
            PasswordResetAttempt = 15,
            
            /// <summary>
            /// Enum Download for value: Download
            /// </summary>
            [EnumMember(Value = "Download")]
            Download = 16
        }

        /// <summary>
        /// The action performed (create, update, delete etc)
        /// </summary>
        /// <value>The action performed (create, update, delete etc)</value>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// The component for which the action was performed
        /// </summary>
        /// <value>The component for which the action was performed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum Assets for value: Assets
            /// </summary>
            [EnumMember(Value = "Assets")]
            Assets = 2,
            
            /// <summary>
            /// Enum Environments for value: Environments
            /// </summary>
            [EnumMember(Value = "Environments")]
            Environments = 3,
            
            /// <summary>
            /// Enum Processes for value: Processes
            /// </summary>
            [EnumMember(Value = "Processes")]
            Processes = 4,
            
            /// <summary>
            /// Enum Queues for value: Queues
            /// </summary>
            [EnumMember(Value = "Queues")]
            Queues = 5,
            
            /// <summary>
            /// Enum Robots for value: Robots
            /// </summary>
            [EnumMember(Value = "Robots")]
            Robots = 6,
            
            /// <summary>
            /// Enum Roles for value: Roles
            /// </summary>
            [EnumMember(Value = "Roles")]
            Roles = 7,
            
            /// <summary>
            /// Enum Schedules for value: Schedules
            /// </summary>
            [EnumMember(Value = "Schedules")]
            Schedules = 8,
            
            /// <summary>
            /// Enum Users for value: Users
            /// </summary>
            [EnumMember(Value = "Users")]
            Users = 9,
            
            /// <summary>
            /// Enum Comments for value: Comments
            /// </summary>
            [EnumMember(Value = "Comments")]
            Comments = 10,
            
            /// <summary>
            /// Enum Units for value: Units
            /// </summary>
            [EnumMember(Value = "Units")]
            Units = 11,
            
            /// <summary>
            /// Enum Jobs for value: Jobs
            /// </summary>
            [EnumMember(Value = "Jobs")]
            Jobs = 12,
            
            /// <summary>
            /// Enum Settings for value: Settings
            /// </summary>
            [EnumMember(Value = "Settings")]
            Settings = 13,
            
            /// <summary>
            /// Enum Packages for value: Packages
            /// </summary>
            [EnumMember(Value = "Packages")]
            Packages = 14,
            
            /// <summary>
            /// Enum License for value: License
            /// </summary>
            [EnumMember(Value = "License")]
            License = 15,
            
            /// <summary>
            /// Enum Tenant for value: Tenant
            /// </summary>
            [EnumMember(Value = "Tenant")]
            Tenant = 16,
            
            /// <summary>
            /// Enum Machines for value: Machines
            /// </summary>
            [EnumMember(Value = "Machines")]
            Machines = 17,
            
            /// <summary>
            /// Enum Libraries for value: Libraries
            /// </summary>
            [EnumMember(Value = "Libraries")]
            Libraries = 18,
            
            /// <summary>
            /// Enum Webhooks for value: Webhooks
            /// </summary>
            [EnumMember(Value = "Webhooks")]
            Webhooks = 19,
            
            /// <summary>
            /// Enum ExecutionMedia for value: ExecutionMedia
            /// </summary>
            [EnumMember(Value = "ExecutionMedia")]
            ExecutionMedia = 20
        }

        /// <summary>
        /// The component for which the action was performed
        /// </summary>
        /// <value>The component for which the action was performed</value>
        [DataMember(Name="Component", EmitDefaultValue=false)]
        public ComponentEnum? Component { get; set; }
        /// <summary>
        /// The type of user that sent the request
        /// </summary>
        /// <value>The type of user that sent the request</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserTypeEnum
        {
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,
            
            /// <summary>
            /// Enum Robot for value: Robot
            /// </summary>
            [EnumMember(Value = "Robot")]
            Robot = 2
        }

        /// <summary>
        /// The type of user that sent the request
        /// </summary>
        /// <value>The type of user that sent the request</value>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public UserTypeEnum? UserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogDto" /> class.
        /// </summary>
        /// <param name="ServiceName">The name of the Orchestrator service that performed a given action in the system..</param>
        /// <param name="MethodName">The name of the service method that performed a given action in the system..</param>
        /// <param name="Parameters">JSON representation of the method parameters and their values for the given action..</param>
        /// <param name="ExecutionTime">The date and time when the action was performed..</param>
        /// <param name="Action">The action performed (create, update, delete etc).</param>
        /// <param name="Component">The component for which the action was performed.</param>
        /// <param name="DisplayName">The display name of the resource acted on, usually Name.</param>
        /// <param name="EntityId">The Id of the resource acted on.</param>
        /// <param name="OperationText">User friendly description of the change, e.g. \&quot;User X created robot Y\&quot;.</param>
        /// <param name="UserName">UserName that sent the request.</param>
        /// <param name="UserType">The type of user that sent the request.</param>
        /// <param name="Entities">Audit entity details collection.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="UserIsDeleted">Marks whether the users that did the action was deleted in the meantime.</param>
        /// <param name="Id">Id.</param>
        public AuditLogDto(string ServiceName = default(string), string MethodName = default(string), string Parameters = default(string), DateTime? ExecutionTime = default(DateTime?), ActionEnum? Action = default(ActionEnum?), ComponentEnum? Component = default(ComponentEnum?), string DisplayName = default(string), long? EntityId = default(long?), string OperationText = default(string), string UserName = default(string), UserTypeEnum? UserType = default(UserTypeEnum?), List<AuditLogEntityDto> Entities = default(List<AuditLogEntityDto>), long? UserId = default(long?), bool? UserIsDeleted = default(bool?), long? Id = default(long?))
        {
            this.ServiceName = ServiceName;
            this.MethodName = MethodName;
            this.Parameters = Parameters;
            this.ExecutionTime = ExecutionTime;
            this.Action = Action;
            this.Component = Component;
            this.DisplayName = DisplayName;
            this.EntityId = EntityId;
            this.OperationText = OperationText;
            this.UserName = UserName;
            this.UserType = UserType;
            this.Entities = Entities;
            this.UserId = UserId;
            this.UserIsDeleted = UserIsDeleted;
            this.Id = Id;
        }
        
        /// <summary>
        /// The name of the Orchestrator service that performed a given action in the system.
        /// </summary>
        /// <value>The name of the Orchestrator service that performed a given action in the system.</value>
        [DataMember(Name="ServiceName", EmitDefaultValue=false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// The name of the service method that performed a given action in the system.
        /// </summary>
        /// <value>The name of the service method that performed a given action in the system.</value>
        [DataMember(Name="MethodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// JSON representation of the method parameters and their values for the given action.
        /// </summary>
        /// <value>JSON representation of the method parameters and their values for the given action.</value>
        [DataMember(Name="Parameters", EmitDefaultValue=false)]
        public string Parameters { get; set; }

        /// <summary>
        /// The date and time when the action was performed.
        /// </summary>
        /// <value>The date and time when the action was performed.</value>
        [DataMember(Name="ExecutionTime", EmitDefaultValue=false)]
        public DateTime? ExecutionTime { get; set; }



        /// <summary>
        /// The display name of the resource acted on, usually Name
        /// </summary>
        /// <value>The display name of the resource acted on, usually Name</value>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The Id of the resource acted on
        /// </summary>
        /// <value>The Id of the resource acted on</value>
        [DataMember(Name="EntityId", EmitDefaultValue=false)]
        public long? EntityId { get; set; }

        /// <summary>
        /// User friendly description of the change, e.g. \&quot;User X created robot Y\&quot;
        /// </summary>
        /// <value>User friendly description of the change, e.g. \&quot;User X created robot Y\&quot;</value>
        [DataMember(Name="OperationText", EmitDefaultValue=false)]
        public string OperationText { get; set; }

        /// <summary>
        /// UserName that sent the request
        /// </summary>
        /// <value>UserName that sent the request</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }


        /// <summary>
        /// Audit entity details collection
        /// </summary>
        /// <value>Audit entity details collection</value>
        [DataMember(Name="Entities", EmitDefaultValue=false)]
        public List<AuditLogEntityDto> Entities { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Marks whether the users that did the action was deleted in the meantime
        /// </summary>
        /// <value>Marks whether the users that did the action was deleted in the meantime</value>
        [DataMember(Name="UserIsDeleted", EmitDefaultValue=false)]
        public bool? UserIsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogDto {\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ExecutionTime: ").Append(ExecutionTime).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  OperationText: ").Append(OperationText).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserIsDeleted: ").Append(UserIsDeleted).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditLogDto);
        }

        /// <summary>
        /// Returns true if AuditLogDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditLogDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.MethodName == input.MethodName ||
                    (this.MethodName != null &&
                    this.MethodName.Equals(input.MethodName))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.ExecutionTime == input.ExecutionTime ||
                    (this.ExecutionTime != null &&
                    this.ExecutionTime.Equals(input.ExecutionTime))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.OperationText == input.OperationText ||
                    (this.OperationText != null &&
                    this.OperationText.Equals(input.OperationText))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserIsDeleted == input.UserIsDeleted ||
                    (this.UserIsDeleted != null &&
                    this.UserIsDeleted.Equals(input.UserIsDeleted))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.MethodName != null)
                    hashCode = hashCode * 59 + this.MethodName.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.ExecutionTime != null)
                    hashCode = hashCode * 59 + this.ExecutionTime.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Component != null)
                    hashCode = hashCode * 59 + this.Component.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.OperationText != null)
                    hashCode = hashCode * 59 + this.OperationText.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserIsDeleted != null)
                    hashCode = hashCode * 59 + this.UserIsDeleted.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
