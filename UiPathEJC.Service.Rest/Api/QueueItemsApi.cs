/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sets the given queue items&#39; status to Deleted.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        BulkOperationResponseDtoInt64 QueueItemsDeleteBulk (DeleteBulkParameters deleteBulkParameters = null);

        /// <summary>
        /// Sets the given queue items&#39; status to Deleted.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        ApiResponse<BulkOperationResponseDtoInt64> QueueItemsDeleteBulkWithHttpInfo (DeleteBulkParameters deleteBulkParameters = null);
        /// <summary>
        /// Deletes a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void QueueItemsDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QueueItemsDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>QueueItemDto</returns>
        QueueItemDto QueueItemsGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of QueueItemDto</returns>
        ApiResponse<QueueItemDto> QueueItemsGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListQueueItemDto</returns>
        ODataResponseListQueueItemDto QueueItemsGetItemProcessingHistoryById (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListQueueItemDto</returns>
        ApiResponse<ODataResponseListQueueItemDto> QueueItemsGetItemProcessingHistoryByIdWithHttpInfo (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Gets a collection of queue items.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListQueueItemDto</returns>
        ODataResponseListQueueItemDto QueueItemsGetQueueItems (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets a collection of queue items.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListQueueItemDto</returns>
        ApiResponse<ODataResponseListQueueItemDto> QueueItemsGetQueueItemsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListUserDto</returns>
        ODataResponseListUserDto QueueItemsGetReviewers (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListUserDto</returns>
        ApiResponse<ODataResponseListUserDto> QueueItemsGetReviewersWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        BulkOperationResponseDtoInt64 QueueItemsSetItemReviewStatus (ItemReviewStatusParameters itemReviewStatusParameters = null);

        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        ApiResponse<BulkOperationResponseDtoInt64> QueueItemsSetItemReviewStatusWithHttpInfo (ItemReviewStatusParameters itemReviewStatusParameters = null);
        /// <summary>
        /// Sets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        BulkOperationResponseDtoInt64 QueueItemsSetItemReviewer (SetReviewerBulkParameters setReviewerBulkParameters);

        /// <summary>
        /// Sets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        ApiResponse<BulkOperationResponseDtoInt64> QueueItemsSetItemReviewerWithHttpInfo (SetReviewerBulkParameters setReviewerBulkParameters);
        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns></returns>
        void QueueItemsSetTransactionProgressById (long? id, TransactionProgressParameters transactionProgressParameters = null);

        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QueueItemsSetTransactionProgressByIdWithHttpInfo (long? id, TransactionProgressParameters transactionProgressParameters = null);
        /// <summary>
        /// Unsets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        BulkOperationResponseDtoInt64 QueueItemsUnsetItemReviewer (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null);

        /// <summary>
        /// Unsets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        ApiResponse<BulkOperationResponseDtoInt64> QueueItemsUnsetItemReviewerWithHttpInfo (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Sets the given queue items&#39; status to Deleted.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsDeleteBulkAsync (DeleteBulkParameters deleteBulkParameters = null);

        /// <summary>
        /// Sets the given queue items&#39; status to Deleted.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsDeleteBulkAsyncWithHttpInfo (DeleteBulkParameters deleteBulkParameters = null);
        /// <summary>
        /// Deletes a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QueueItemsDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QueueItemsDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of QueueItemDto</returns>
        System.Threading.Tasks.Task<QueueItemDto> QueueItemsGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a queue item by Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemDto>> QueueItemsGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListQueueItemDto</returns>
        System.Threading.Tasks.Task<ODataResponseListQueueItemDto> QueueItemsGetItemProcessingHistoryByIdAsync (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListQueueItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListQueueItemDto>> QueueItemsGetItemProcessingHistoryByIdAsyncWithHttpInfo (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Gets a collection of queue items.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListQueueItemDto</returns>
        System.Threading.Tasks.Task<ODataResponseListQueueItemDto> QueueItemsGetQueueItemsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets a collection of queue items.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListQueueItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListQueueItemDto>> QueueItemsGetQueueItemsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListUserDto</returns>
        System.Threading.Tasks.Task<ODataResponseListUserDto> QueueItemsGetReviewersAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListUserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListUserDto>> QueueItemsGetReviewersAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsSetItemReviewStatusAsync (ItemReviewStatusParameters itemReviewStatusParameters = null);

        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsSetItemReviewStatusAsyncWithHttpInfo (ItemReviewStatusParameters itemReviewStatusParameters = null);
        /// <summary>
        /// Sets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsSetItemReviewerAsync (SetReviewerBulkParameters setReviewerBulkParameters);

        /// <summary>
        /// Sets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsSetItemReviewerAsyncWithHttpInfo (SetReviewerBulkParameters setReviewerBulkParameters);
        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QueueItemsSetTransactionProgressByIdAsync (long? id, TransactionProgressParameters transactionProgressParameters = null);

        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QueueItemsSetTransactionProgressByIdAsyncWithHttpInfo (long? id, TransactionProgressParameters transactionProgressParameters = null);
        /// <summary>
        /// Unsets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsUnsetItemReviewerAsync (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null);

        /// <summary>
        /// Unsets the reviewer for multiple queue items
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsUnsetItemReviewerAsyncWithHttpInfo (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueueItemsApi : IQueueItemsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueItemsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueueItemsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Sets the given queue items&#39; status to Deleted. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        public BulkOperationResponseDtoInt64 QueueItemsDeleteBulk (DeleteBulkParameters deleteBulkParameters = null)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = QueueItemsDeleteBulkWithHttpInfo(deleteBulkParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the given queue items&#39; status to Deleted. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        public ApiResponse< BulkOperationResponseDtoInt64 > QueueItemsDeleteBulkWithHttpInfo (DeleteBulkParameters deleteBulkParameters = null)
        {

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.DeleteBulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteBulkParameters != null && deleteBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsDeleteBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Sets the given queue items&#39; status to Deleted. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        public async System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsDeleteBulkAsync (DeleteBulkParameters deleteBulkParameters = null)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = await QueueItemsDeleteBulkAsyncWithHttpInfo(deleteBulkParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the given queue items&#39; status to Deleted. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBulkParameters">QueueItems - The collection of ids of queue items to delete. (optional)</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsDeleteBulkAsyncWithHttpInfo (DeleteBulkParameters deleteBulkParameters = null)
        {

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.DeleteBulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteBulkParameters != null && deleteBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsDeleteBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Deletes a queue item by Id. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void QueueItemsDeleteById (long? id, string ifMatch = null)
        {
             QueueItemsDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes a queue item by Id. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QueueItemsDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsDeleteById");

            var localVarPath = "/odata/QueueItems({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a queue item by Id. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QueueItemsDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await QueueItemsDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes a queue item by Id. Required permissions: Queues.View and Transactions.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QueueItemsDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsDeleteById");

            var localVarPath = "/odata/QueueItems({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a queue item by Id. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>QueueItemDto</returns>
        public QueueItemDto QueueItemsGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<QueueItemDto> localVarResponse = QueueItemsGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a queue item by Id. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of QueueItemDto</returns>
        public ApiResponse< QueueItemDto > QueueItemsGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsGetById");

            var localVarPath = "/odata/QueueItems({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemDto)));
        }

        /// <summary>
        /// Gets a queue item by Id. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of QueueItemDto</returns>
        public async System.Threading.Tasks.Task<QueueItemDto> QueueItemsGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<QueueItemDto> localVarResponse = await QueueItemsGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a queue item by Id. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemDto>> QueueItemsGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsGetById");

            var localVarPath = "/odata/QueueItems({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemDto)));
        }

        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListQueueItemDto</returns>
        public ODataResponseListQueueItemDto QueueItemsGetItemProcessingHistoryById (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListQueueItemDto> localVarResponse = QueueItemsGetItemProcessingHistoryByIdWithHttpInfo(id, expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListQueueItemDto</returns>
        public ApiResponse< ODataResponseListQueueItemDto > QueueItemsGetItemProcessingHistoryByIdWithHttpInfo (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsGetItemProcessingHistoryById");

            var localVarPath = "/odata/QueueItems({Id})/UiPathODataSvc.GetItemProcessingHistory()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetItemProcessingHistoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListQueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListQueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListQueueItemDto)));
        }

        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListQueueItemDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListQueueItemDto> QueueItemsGetItemProcessingHistoryByIdAsync (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListQueueItemDto> localVarResponse = await QueueItemsGetItemProcessingHistoryByIdAsyncWithHttpInfo(id, expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns data about the processing history of the given queue item. Allows odata query options. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListQueueItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListQueueItemDto>> QueueItemsGetItemProcessingHistoryByIdAsyncWithHttpInfo (long? id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsGetItemProcessingHistoryById");

            var localVarPath = "/odata/QueueItems({Id})/UiPathODataSvc.GetItemProcessingHistory()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetItemProcessingHistoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListQueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListQueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListQueueItemDto)));
        }

        /// <summary>
        /// Gets a collection of queue items. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListQueueItemDto</returns>
        public ODataResponseListQueueItemDto QueueItemsGetQueueItems (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListQueueItemDto> localVarResponse = QueueItemsGetQueueItemsWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of queue items. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListQueueItemDto</returns>
        public ApiResponse< ODataResponseListQueueItemDto > QueueItemsGetQueueItemsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/QueueItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetQueueItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListQueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListQueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListQueueItemDto)));
        }

        /// <summary>
        /// Gets a collection of queue items. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListQueueItemDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListQueueItemDto> QueueItemsGetQueueItemsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListQueueItemDto> localVarResponse = await QueueItemsGetQueueItemsAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of queue items. Required permissions: Queues.View and Transactions.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListQueueItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListQueueItemDto>> QueueItemsGetQueueItemsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/QueueItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetQueueItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListQueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListQueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListQueueItemDto)));
        }

        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListUserDto</returns>
        public ODataResponseListUserDto QueueItemsGetReviewers (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListUserDto> localVarResponse = QueueItemsGetReviewersWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListUserDto</returns>
        public ApiResponse< ODataResponseListUserDto > QueueItemsGetReviewersWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/QueueItems/UiPath.Server.Configuration.OData.GetReviewers()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetReviewers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListUserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListUserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListUserDto)));
        }

        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListUserDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListUserDto> QueueItemsGetReviewersAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListUserDto> localVarResponse = await QueueItemsGetReviewersAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of users having the permission for Queue Items review. Allows odata query options. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListUserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListUserDto>> QueueItemsGetReviewersAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/QueueItems/UiPath.Server.Configuration.OData.GetReviewers()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsGetReviewers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListUserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListUserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListUserDto)));
        }

        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        public BulkOperationResponseDtoInt64 QueueItemsSetItemReviewStatus (ItemReviewStatusParameters itemReviewStatusParameters = null)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = QueueItemsSetItemReviewStatusWithHttpInfo(itemReviewStatusParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        public ApiResponse< BulkOperationResponseDtoInt64 > QueueItemsSetItemReviewStatusWithHttpInfo (ItemReviewStatusParameters itemReviewStatusParameters = null)
        {

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.SetItemReviewStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemReviewStatusParameters != null && itemReviewStatusParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(itemReviewStatusParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemReviewStatusParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsSetItemReviewStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        public async System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsSetItemReviewStatusAsync (ItemReviewStatusParameters itemReviewStatusParameters = null)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = await QueueItemsSetItemReviewStatusAsyncWithHttpInfo(itemReviewStatusParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the review status of the specified queue items to an indicated state. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemReviewStatusParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the state is set.              &lt;para /&gt;Status - The new value for the review status. (optional)</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsSetItemReviewStatusAsyncWithHttpInfo (ItemReviewStatusParameters itemReviewStatusParameters = null)
        {

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.SetItemReviewStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemReviewStatusParameters != null && itemReviewStatusParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(itemReviewStatusParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemReviewStatusParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsSetItemReviewStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Sets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        public BulkOperationResponseDtoInt64 QueueItemsSetItemReviewer (SetReviewerBulkParameters setReviewerBulkParameters)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = QueueItemsSetItemReviewerWithHttpInfo(setReviewerBulkParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        public ApiResponse< BulkOperationResponseDtoInt64 > QueueItemsSetItemReviewerWithHttpInfo (SetReviewerBulkParameters setReviewerBulkParameters)
        {
            // verify the required parameter 'setReviewerBulkParameters' is set
            if (setReviewerBulkParameters == null)
                throw new ApiException(400, "Missing required parameter 'setReviewerBulkParameters' when calling QueueItemsApi->QueueItemsSetItemReviewer");

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.SetItemReviewer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setReviewerBulkParameters != null && setReviewerBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setReviewerBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setReviewerBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsSetItemReviewer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Sets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        public async System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsSetItemReviewerAsync (SetReviewerBulkParameters setReviewerBulkParameters)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = await QueueItemsSetItemReviewerAsyncWithHttpInfo(setReviewerBulkParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setReviewerBulkParameters">&lt;para /&gt;UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.              &lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is set.</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsSetItemReviewerAsyncWithHttpInfo (SetReviewerBulkParameters setReviewerBulkParameters)
        {
            // verify the required parameter 'setReviewerBulkParameters' is set
            if (setReviewerBulkParameters == null)
                throw new ApiException(400, "Missing required parameter 'setReviewerBulkParameters' when calling QueueItemsApi->QueueItemsSetItemReviewer");

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.SetItemReviewer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setReviewerBulkParameters != null && setReviewerBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setReviewerBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setReviewerBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsSetItemReviewer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns></returns>
        public void QueueItemsSetTransactionProgressById (long? id, TransactionProgressParameters transactionProgressParameters = null)
        {
             QueueItemsSetTransactionProgressByIdWithHttpInfo(id, transactionProgressParameters);
        }

        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QueueItemsSetTransactionProgressByIdWithHttpInfo (long? id, TransactionProgressParameters transactionProgressParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsSetTransactionProgressById");

            var localVarPath = "/odata/QueueItems({Id})/UiPathODataSvc.SetTransactionProgress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (transactionProgressParameters != null && transactionProgressParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transactionProgressParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionProgressParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsSetTransactionProgressById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QueueItemsSetTransactionProgressByIdAsync (long? id, TransactionProgressParameters transactionProgressParameters = null)
        {
             await QueueItemsSetTransactionProgressByIdAsyncWithHttpInfo(id, transactionProgressParameters);

        }

        /// <summary>
        /// Updates the progress field of a queue item with the status &#39;In Progress&#39;. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="transactionProgressParameters">&lt;para /&gt;QueueItemId - The item&#39;s id.              &lt;para /&gt;Progress - The value for the Progress field. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QueueItemsSetTransactionProgressByIdAsyncWithHttpInfo (long? id, TransactionProgressParameters transactionProgressParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueueItemsApi->QueueItemsSetTransactionProgressById");

            var localVarPath = "/odata/QueueItems({Id})/UiPathODataSvc.SetTransactionProgress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (transactionProgressParameters != null && transactionProgressParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transactionProgressParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionProgressParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsSetTransactionProgressById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>BulkOperationResponseDtoInt64</returns>
        public BulkOperationResponseDtoInt64 QueueItemsUnsetItemReviewer (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = QueueItemsUnsetItemReviewerWithHttpInfo(unsetReviewerBulkParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>ApiResponse of BulkOperationResponseDtoInt64</returns>
        public ApiResponse< BulkOperationResponseDtoInt64 > QueueItemsUnsetItemReviewerWithHttpInfo (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null)
        {

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.UnsetItemReviewer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsetReviewerBulkParameters != null && unsetReviewerBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(unsetReviewerBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsetReviewerBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsUnsetItemReviewer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

        /// <summary>
        /// Unsets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>Task of BulkOperationResponseDtoInt64</returns>
        public async System.Threading.Tasks.Task<BulkOperationResponseDtoInt64> QueueItemsUnsetItemReviewerAsync (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null)
        {
             ApiResponse<BulkOperationResponseDtoInt64> localVarResponse = await QueueItemsUnsetItemReviewerAsyncWithHttpInfo(unsetReviewerBulkParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsets the reviewer for multiple queue items Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsetReviewerBulkParameters">&lt;para /&gt;QueueItems - The collection of ids of queue items for which the reviewer is unset. (optional)</param>
        /// <returns>Task of ApiResponse (BulkOperationResponseDtoInt64)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkOperationResponseDtoInt64>> QueueItemsUnsetItemReviewerAsyncWithHttpInfo (UnsetReviewerBulkParameters unsetReviewerBulkParameters = null)
        {

            var localVarPath = "/odata/QueueItems/UiPathODataSvc.UnsetItemReviewer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsetReviewerBulkParameters != null && unsetReviewerBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(unsetReviewerBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsetReviewerBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueueItemsUnsetItemReviewer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkOperationResponseDtoInt64>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkOperationResponseDtoInt64) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkOperationResponseDtoInt64)));
        }

    }
}
