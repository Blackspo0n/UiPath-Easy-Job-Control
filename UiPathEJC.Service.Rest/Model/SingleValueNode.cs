/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// SingleValueNode
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class SingleValueNode :  IEquatable<SingleValueNode>, IValidatableObject
    {
        /// <summary>
        /// Defines Kind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Constant for value: Constant
            /// </summary>
            [EnumMember(Value = "Constant")]
            Constant = 2,
            
            /// <summary>
            /// Enum Convert for value: Convert
            /// </summary>
            [EnumMember(Value = "Convert")]
            Convert = 3,
            
            /// <summary>
            /// Enum NonResourceRangeVariableReference for value: NonResourceRangeVariableReference
            /// </summary>
            [EnumMember(Value = "NonResourceRangeVariableReference")]
            NonResourceRangeVariableReference = 4,
            
            /// <summary>
            /// Enum BinaryOperator for value: BinaryOperator
            /// </summary>
            [EnumMember(Value = "BinaryOperator")]
            BinaryOperator = 5,
            
            /// <summary>
            /// Enum UnaryOperator for value: UnaryOperator
            /// </summary>
            [EnumMember(Value = "UnaryOperator")]
            UnaryOperator = 6,
            
            /// <summary>
            /// Enum SingleValuePropertyAccess for value: SingleValuePropertyAccess
            /// </summary>
            [EnumMember(Value = "SingleValuePropertyAccess")]
            SingleValuePropertyAccess = 7,
            
            /// <summary>
            /// Enum CollectionPropertyAccess for value: CollectionPropertyAccess
            /// </summary>
            [EnumMember(Value = "CollectionPropertyAccess")]
            CollectionPropertyAccess = 8,
            
            /// <summary>
            /// Enum SingleValueFunctionCall for value: SingleValueFunctionCall
            /// </summary>
            [EnumMember(Value = "SingleValueFunctionCall")]
            SingleValueFunctionCall = 9,
            
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 10,
            
            /// <summary>
            /// Enum CollectionNavigationNode for value: CollectionNavigationNode
            /// </summary>
            [EnumMember(Value = "CollectionNavigationNode")]
            CollectionNavigationNode = 11,
            
            /// <summary>
            /// Enum SingleNavigationNode for value: SingleNavigationNode
            /// </summary>
            [EnumMember(Value = "SingleNavigationNode")]
            SingleNavigationNode = 12,
            
            /// <summary>
            /// Enum SingleValueOpenPropertyAccess for value: SingleValueOpenPropertyAccess
            /// </summary>
            [EnumMember(Value = "SingleValueOpenPropertyAccess")]
            SingleValueOpenPropertyAccess = 13,
            
            /// <summary>
            /// Enum SingleResourceCast for value: SingleResourceCast
            /// </summary>
            [EnumMember(Value = "SingleResourceCast")]
            SingleResourceCast = 14,
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 15,
            
            /// <summary>
            /// Enum CollectionResourceCast for value: CollectionResourceCast
            /// </summary>
            [EnumMember(Value = "CollectionResourceCast")]
            CollectionResourceCast = 16,
            
            /// <summary>
            /// Enum ResourceRangeVariableReference for value: ResourceRangeVariableReference
            /// </summary>
            [EnumMember(Value = "ResourceRangeVariableReference")]
            ResourceRangeVariableReference = 17,
            
            /// <summary>
            /// Enum SingleResourceFunctionCall for value: SingleResourceFunctionCall
            /// </summary>
            [EnumMember(Value = "SingleResourceFunctionCall")]
            SingleResourceFunctionCall = 18,
            
            /// <summary>
            /// Enum CollectionFunctionCall for value: CollectionFunctionCall
            /// </summary>
            [EnumMember(Value = "CollectionFunctionCall")]
            CollectionFunctionCall = 19,
            
            /// <summary>
            /// Enum CollectionResourceFunctionCall for value: CollectionResourceFunctionCall
            /// </summary>
            [EnumMember(Value = "CollectionResourceFunctionCall")]
            CollectionResourceFunctionCall = 20,
            
            /// <summary>
            /// Enum NamedFunctionParameter for value: NamedFunctionParameter
            /// </summary>
            [EnumMember(Value = "NamedFunctionParameter")]
            NamedFunctionParameter = 21,
            
            /// <summary>
            /// Enum ParameterAlias for value: ParameterAlias
            /// </summary>
            [EnumMember(Value = "ParameterAlias")]
            ParameterAlias = 22,
            
            /// <summary>
            /// Enum EntitySet for value: EntitySet
            /// </summary>
            [EnumMember(Value = "EntitySet")]
            EntitySet = 23,
            
            /// <summary>
            /// Enum KeyLookup for value: KeyLookup
            /// </summary>
            [EnumMember(Value = "KeyLookup")]
            KeyLookup = 24,
            
            /// <summary>
            /// Enum SearchTerm for value: SearchTerm
            /// </summary>
            [EnumMember(Value = "SearchTerm")]
            SearchTerm = 25,
            
            /// <summary>
            /// Enum CollectionOpenPropertyAccess for value: CollectionOpenPropertyAccess
            /// </summary>
            [EnumMember(Value = "CollectionOpenPropertyAccess")]
            CollectionOpenPropertyAccess = 26,
            
            /// <summary>
            /// Enum CollectionComplexNode for value: CollectionComplexNode
            /// </summary>
            [EnumMember(Value = "CollectionComplexNode")]
            CollectionComplexNode = 27,
            
            /// <summary>
            /// Enum SingleComplexNode for value: SingleComplexNode
            /// </summary>
            [EnumMember(Value = "SingleComplexNode")]
            SingleComplexNode = 28,
            
            /// <summary>
            /// Enum Count for value: Count
            /// </summary>
            [EnumMember(Value = "Count")]
            Count = 29,
            
            /// <summary>
            /// Enum SingleValueCast for value: SingleValueCast
            /// </summary>
            [EnumMember(Value = "SingleValueCast")]
            SingleValueCast = 30
        }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="Kind", EmitDefaultValue=false)]
        public KindEnum? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleValueNode" /> class.
        /// </summary>
        /// <param name="TypeReference">TypeReference.</param>
        public SingleValueNode(IEdmTypeReference TypeReference = default(IEdmTypeReference))
        {
            this.TypeReference = TypeReference;
        }
        
        /// <summary>
        /// Gets or Sets TypeReference
        /// </summary>
        [DataMember(Name="TypeReference", EmitDefaultValue=false)]
        public IEdmTypeReference TypeReference { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleValueNode {\n");
            sb.Append("  TypeReference: ").Append(TypeReference).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleValueNode);
        }

        /// <summary>
        /// Returns true if SingleValueNode instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleValueNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleValueNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeReference == input.TypeReference ||
                    (this.TypeReference != null &&
                    this.TypeReference.Equals(input.TypeReference))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeReference != null)
                    hashCode = hashCode * 59 + this.TypeReference.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
