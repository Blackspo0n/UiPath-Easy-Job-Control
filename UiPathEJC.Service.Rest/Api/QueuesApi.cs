/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueuesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new queue item.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>QueueItemDto</returns>
        QueueItemDto QueuesAddQueueItem (QueueItemParameters queueItemParameters = null);

        /// <summary>
        /// Adds a new queue item.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>ApiResponse of QueueItemDto</returns>
        ApiResponse<QueueItemDto> QueuesAddQueueItemWithHttpInfo (QueueItemParameters queueItemParameters = null);
        /// <summary>
        /// Sets the result of a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns></returns>
        void QueuesSetTransactionResultById (long? id, SetTransactionParameters setTransactionParameters = null);

        /// <summary>
        /// Sets the result of a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QueuesSetTransactionResultByIdWithHttpInfo (long? id, SetTransactionParameters setTransactionParameters = null);
        /// <summary>
        /// Starts a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>QueueItemDto</returns>
        QueueItemDto QueuesStartTransaction (StartTransactionParameters startTransactionParameters = null);

        /// <summary>
        /// Starts a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>ApiResponse of QueueItemDto</returns>
        ApiResponse<QueueItemDto> QueuesStartTransactionWithHttpInfo (StartTransactionParameters startTransactionParameters = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new queue item.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>Task of QueueItemDto</returns>
        System.Threading.Tasks.Task<QueueItemDto> QueuesAddQueueItemAsync (QueueItemParameters queueItemParameters = null);

        /// <summary>
        /// Adds a new queue item.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemDto>> QueuesAddQueueItemAsyncWithHttpInfo (QueueItemParameters queueItemParameters = null);
        /// <summary>
        /// Sets the result of a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QueuesSetTransactionResultByIdAsync (long? id, SetTransactionParameters setTransactionParameters = null);

        /// <summary>
        /// Sets the result of a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QueuesSetTransactionResultByIdAsyncWithHttpInfo (long? id, SetTransactionParameters setTransactionParameters = null);
        /// <summary>
        /// Starts a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>Task of QueueItemDto</returns>
        System.Threading.Tasks.Task<QueueItemDto> QueuesStartTransactionAsync (StartTransactionParameters startTransactionParameters = null);

        /// <summary>
        /// Starts a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemDto>> QueuesStartTransactionAsyncWithHttpInfo (StartTransactionParameters startTransactionParameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueuesApi : IQueuesApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueuesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueuesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a new queue item. Required permissions: Queues.View and Transactions.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>QueueItemDto</returns>
        public QueueItemDto QueuesAddQueueItem (QueueItemParameters queueItemParameters = null)
        {
             ApiResponse<QueueItemDto> localVarResponse = QueuesAddQueueItemWithHttpInfo(queueItemParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new queue item. Required permissions: Queues.View and Transactions.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>ApiResponse of QueueItemDto</returns>
        public ApiResponse< QueueItemDto > QueuesAddQueueItemWithHttpInfo (QueueItemParameters queueItemParameters = null)
        {

            var localVarPath = "/odata/Queues/UiPathODataSvc.AddQueueItem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemParameters != null && queueItemParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(queueItemParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queueItemParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuesAddQueueItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemDto)));
        }

        /// <summary>
        /// Adds a new queue item. Required permissions: Queues.View and Transactions.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>Task of QueueItemDto</returns>
        public async System.Threading.Tasks.Task<QueueItemDto> QueuesAddQueueItemAsync (QueueItemParameters queueItemParameters = null)
        {
             ApiResponse<QueueItemDto> localVarResponse = await QueuesAddQueueItemAsyncWithHttpInfo(queueItemParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new queue item. Required permissions: Queues.View and Transactions.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueItemParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemDto>> QueuesAddQueueItemAsyncWithHttpInfo (QueueItemParameters queueItemParameters = null)
        {

            var localVarPath = "/odata/Queues/UiPathODataSvc.AddQueueItem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queueItemParameters != null && queueItemParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(queueItemParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queueItemParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuesAddQueueItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemDto)));
        }

        /// <summary>
        /// Sets the result of a transaction. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns></returns>
        public void QueuesSetTransactionResultById (long? id, SetTransactionParameters setTransactionParameters = null)
        {
             QueuesSetTransactionResultByIdWithHttpInfo(id, setTransactionParameters);
        }

        /// <summary>
        /// Sets the result of a transaction. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QueuesSetTransactionResultByIdWithHttpInfo (long? id, SetTransactionParameters setTransactionParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueuesApi->QueuesSetTransactionResultById");

            var localVarPath = "/odata/Queues({Id})/UiPathODataSvc.SetTransactionResult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setTransactionParameters != null && setTransactionParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setTransactionParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setTransactionParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuesSetTransactionResultById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the result of a transaction. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QueuesSetTransactionResultByIdAsync (long? id, SetTransactionParameters setTransactionParameters = null)
        {
             await QueuesSetTransactionResultByIdAsyncWithHttpInfo(id, setTransactionParameters);

        }

        /// <summary>
        /// Sets the result of a transaction. Required permissions: Queues.View and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setTransactionParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QueuesSetTransactionResultByIdAsyncWithHttpInfo (long? id, SetTransactionParameters setTransactionParameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QueuesApi->QueuesSetTransactionResultById");

            var localVarPath = "/odata/Queues({Id})/UiPathODataSvc.SetTransactionResult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setTransactionParameters != null && setTransactionParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setTransactionParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setTransactionParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuesSetTransactionResultById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts a transaction. Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>QueueItemDto</returns>
        public QueueItemDto QueuesStartTransaction (StartTransactionParameters startTransactionParameters = null)
        {
             ApiResponse<QueueItemDto> localVarResponse = QueuesStartTransactionWithHttpInfo(startTransactionParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a transaction. Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>ApiResponse of QueueItemDto</returns>
        public ApiResponse< QueueItemDto > QueuesStartTransactionWithHttpInfo (StartTransactionParameters startTransactionParameters = null)
        {

            var localVarPath = "/odata/Queues/UiPathODataSvc.StartTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTransactionParameters != null && startTransactionParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startTransactionParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startTransactionParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuesStartTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemDto)));
        }

        /// <summary>
        /// Starts a transaction. Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>Task of QueueItemDto</returns>
        public async System.Threading.Tasks.Task<QueueItemDto> QueuesStartTransactionAsync (StartTransactionParameters startTransactionParameters = null)
        {
             ApiResponse<QueueItemDto> localVarResponse = await QueuesStartTransactionAsyncWithHttpInfo(startTransactionParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts a transaction. Required permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTransactionParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QueueItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemDto>> QueuesStartTransactionAsyncWithHttpInfo (StartTransactionParameters startTransactionParameters = null)
        {

            var localVarPath = "/odata/Queues/UiPathODataSvc.StartTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTransactionParameters != null && startTransactionParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startTransactionParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startTransactionParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueuesStartTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemDto)));
        }

    }
}
