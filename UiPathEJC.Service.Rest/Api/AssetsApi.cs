/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void AssetsDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListAssetDto</returns>
        ODataResponseListAssetDto AssetsGetAssets (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListAssetDto</returns>
        ApiResponse<ODataResponseListAssetDto> AssetsGetAssetsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>RobotAssetDto</returns>
        RobotAssetDto AssetsGetRobotAssetByNameForRobotKey (RobotAssetParameters robotAssetParameters = null);

        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>ApiResponse of RobotAssetDto</returns>
        ApiResponse<RobotAssetDto> AssetsGetRobotAssetByNameForRobotKeyWithHttpInfo (RobotAssetParameters robotAssetParameters = null);
        /// <summary>
        /// Returns the named asset associated to the given robot Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>RobotAssetDto</returns>
        RobotAssetDto AssetsGetRobotAssetByRobotId (long? robotId, string assetName);

        /// <summary>
        /// Returns the named asset associated to the given robot Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>ApiResponse of RobotAssetDto</returns>
        ApiResponse<RobotAssetDto> AssetsGetRobotAssetByRobotIdWithHttpInfo (long? robotId, string assetName);
        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.    DEPRECATED
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>RobotAssetDto</returns>
        RobotAssetDto AssetsGetRobotAssetByRobotidAndAssetname (string robotId, string assetName);

        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.    DEPRECATED
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>ApiResponse of RobotAssetDto</returns>
        ApiResponse<RobotAssetDto> AssetsGetRobotAssetByRobotidAndAssetnameWithHttpInfo (string robotId, string assetName);
        /// <summary>
        /// Creates an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>AssetDto</returns>
        AssetDto AssetsPost (AssetDto assetDto);

        /// <summary>
        /// Creates an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>ApiResponse of AssetDto</returns>
        ApiResponse<AssetDto> AssetsPostWithHttpInfo (AssetDto assetDto);
        /// <summary>
        /// Edit an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns></returns>
        void AssetsPutById (long? id, AssetDto assetDto);

        /// <summary>
        /// Edit an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssetsPutByIdWithHttpInfo (long? id, AssetDto assetDto);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListAssetDto</returns>
        System.Threading.Tasks.Task<ODataResponseListAssetDto> AssetsGetAssetsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListAssetDto>> AssetsGetAssetsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>Task of RobotAssetDto</returns>
        System.Threading.Tasks.Task<RobotAssetDto> AssetsGetRobotAssetByNameForRobotKeyAsync (RobotAssetParameters robotAssetParameters = null);

        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (RobotAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotAssetDto>> AssetsGetRobotAssetByNameForRobotKeyAsyncWithHttpInfo (RobotAssetParameters robotAssetParameters = null);
        /// <summary>
        /// Returns the named asset associated to the given robot Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of RobotAssetDto</returns>
        System.Threading.Tasks.Task<RobotAssetDto> AssetsGetRobotAssetByRobotIdAsync (long? robotId, string assetName);

        /// <summary>
        /// Returns the named asset associated to the given robot Id.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of ApiResponse (RobotAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotAssetDto>> AssetsGetRobotAssetByRobotIdAsyncWithHttpInfo (long? robotId, string assetName);
        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.    DEPRECATED
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of RobotAssetDto</returns>
        System.Threading.Tasks.Task<RobotAssetDto> AssetsGetRobotAssetByRobotidAndAssetnameAsync (string robotId, string assetName);

        /// <summary>
        /// Returns the named asset associated to the given robot key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.View.    DEPRECATED
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of ApiResponse (RobotAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotAssetDto>> AssetsGetRobotAssetByRobotidAndAssetnameAsyncWithHttpInfo (string robotId, string assetName);
        /// <summary>
        /// Creates an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>Task of AssetDto</returns>
        System.Threading.Tasks.Task<AssetDto> AssetsPostAsync (AssetDto assetDto);

        /// <summary>
        /// Creates an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>Task of ApiResponse (AssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetDto>> AssetsPostAsyncWithHttpInfo (AssetDto assetDto);
        /// <summary>
        /// Edit an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssetsPutByIdAsync (long? id, AssetDto assetDto);

        /// <summary>
        /// Edit an asset
        /// </summary>
        /// <remarks>
        /// Required permissions: Assets.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssetsPutByIdAsyncWithHttpInfo (long? id, AssetDto assetDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete an asset Required permissions: Assets.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void AssetsDeleteById (long? id, string ifMatch = null)
        {
             AssetsDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Delete an asset Required permissions: Assets.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssetsDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->AssetsDeleteById");

            var localVarPath = "/odata/Assets({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an asset Required permissions: Assets.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await AssetsDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Delete an asset Required permissions: Assets.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssetsDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->AssetsDeleteById");

            var localVarPath = "/odata/Assets({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Assets Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListAssetDto</returns>
        public ODataResponseListAssetDto AssetsGetAssets (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListAssetDto> localVarResponse = AssetsGetAssetsWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListAssetDto</returns>
        public ApiResponse< ODataResponseListAssetDto > AssetsGetAssetsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListAssetDto)));
        }

        /// <summary>
        /// Get Assets Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListAssetDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListAssetDto> AssetsGetAssetsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListAssetDto> localVarResponse = await AssetsGetAssetsAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Assets Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListAssetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListAssetDto>> AssetsGetAssetsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListAssetDto)));
        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>RobotAssetDto</returns>
        public RobotAssetDto AssetsGetRobotAssetByNameForRobotKey (RobotAssetParameters robotAssetParameters = null)
        {
             ApiResponse<RobotAssetDto> localVarResponse = AssetsGetRobotAssetByNameForRobotKeyWithHttpInfo(robotAssetParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>ApiResponse of RobotAssetDto</returns>
        public ApiResponse< RobotAssetDto > AssetsGetRobotAssetByNameForRobotKeyWithHttpInfo (RobotAssetParameters robotAssetParameters = null)
        {

            var localVarPath = "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByNameForRobotKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotAssetParameters != null && robotAssetParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(robotAssetParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = robotAssetParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetRobotAssetByNameForRobotKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotAssetDto)));
        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>Task of RobotAssetDto</returns>
        public async System.Threading.Tasks.Task<RobotAssetDto> AssetsGetRobotAssetByNameForRobotKeyAsync (RobotAssetParameters robotAssetParameters = null)
        {
             ApiResponse<RobotAssetDto> localVarResponse = await AssetsGetRobotAssetByNameForRobotKeyAsyncWithHttpInfo(robotAssetParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotAssetParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (RobotAssetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RobotAssetDto>> AssetsGetRobotAssetByNameForRobotKeyAsyncWithHttpInfo (RobotAssetParameters robotAssetParameters = null)
        {

            var localVarPath = "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByNameForRobotKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotAssetParameters != null && robotAssetParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(robotAssetParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = robotAssetParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetRobotAssetByNameForRobotKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotAssetDto)));
        }

        /// <summary>
        /// Returns the named asset associated to the given robot Id. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>RobotAssetDto</returns>
        public RobotAssetDto AssetsGetRobotAssetByRobotId (long? robotId, string assetName)
        {
             ApiResponse<RobotAssetDto> localVarResponse = AssetsGetRobotAssetByRobotIdWithHttpInfo(robotId, assetName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the named asset associated to the given robot Id. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>ApiResponse of RobotAssetDto</returns>
        public ApiResponse< RobotAssetDto > AssetsGetRobotAssetByRobotIdWithHttpInfo (long? robotId, string assetName)
        {
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling AssetsApi->AssetsGetRobotAssetByRobotId");
            // verify the required parameter 'assetName' is set
            if (assetName == null)
                throw new ApiException(400, "Missing required parameter 'assetName' when calling AssetsApi->AssetsGetRobotAssetByRobotId");

            var localVarPath = "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByRobotId(robotId={robotId},assetName='{assetName}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotId != null) localVarPathParams.Add("robotId", Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (assetName != null) localVarPathParams.Add("assetName", Configuration.ApiClient.ParameterToString(assetName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetRobotAssetByRobotId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotAssetDto)));
        }

        /// <summary>
        /// Returns the named asset associated to the given robot Id. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of RobotAssetDto</returns>
        public async System.Threading.Tasks.Task<RobotAssetDto> AssetsGetRobotAssetByRobotIdAsync (long? robotId, string assetName)
        {
             ApiResponse<RobotAssetDto> localVarResponse = await AssetsGetRobotAssetByRobotIdAsyncWithHttpInfo(robotId, assetName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the named asset associated to the given robot Id. Required permissions: Assets.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The Id of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of ApiResponse (RobotAssetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RobotAssetDto>> AssetsGetRobotAssetByRobotIdAsyncWithHttpInfo (long? robotId, string assetName)
        {
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling AssetsApi->AssetsGetRobotAssetByRobotId");
            // verify the required parameter 'assetName' is set
            if (assetName == null)
                throw new ApiException(400, "Missing required parameter 'assetName' when calling AssetsApi->AssetsGetRobotAssetByRobotId");

            var localVarPath = "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByRobotId(robotId={robotId},assetName='{assetName}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotId != null) localVarPathParams.Add("robotId", Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (assetName != null) localVarPathParams.Add("assetName", Configuration.ApiClient.ParameterToString(assetName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetRobotAssetByRobotId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotAssetDto)));
        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.    DEPRECATED
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>RobotAssetDto</returns>
        public RobotAssetDto AssetsGetRobotAssetByRobotidAndAssetname (string robotId, string assetName)
        {
             ApiResponse<RobotAssetDto> localVarResponse = AssetsGetRobotAssetByRobotidAndAssetnameWithHttpInfo(robotId, assetName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.    DEPRECATED
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>ApiResponse of RobotAssetDto</returns>
        public ApiResponse< RobotAssetDto > AssetsGetRobotAssetByRobotidAndAssetnameWithHttpInfo (string robotId, string assetName)
        {
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling AssetsApi->AssetsGetRobotAssetByRobotidAndAssetname");
            // verify the required parameter 'assetName' is set
            if (assetName == null)
                throw new ApiException(400, "Missing required parameter 'assetName' when calling AssetsApi->AssetsGetRobotAssetByRobotidAndAssetname");

            var localVarPath = "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAsset(robotId='{robotId}',assetName='{assetName}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotId != null) localVarPathParams.Add("robotId", Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (assetName != null) localVarPathParams.Add("assetName", Configuration.ApiClient.ParameterToString(assetName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetRobotAssetByRobotidAndAssetname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotAssetDto)));
        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.    DEPRECATED
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of RobotAssetDto</returns>
        public async System.Threading.Tasks.Task<RobotAssetDto> AssetsGetRobotAssetByRobotidAndAssetnameAsync (string robotId, string assetName)
        {
             ApiResponse<RobotAssetDto> localVarResponse = await AssetsGetRobotAssetByRobotidAndAssetnameAsyncWithHttpInfo(robotId, assetName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the named asset associated to the given robot key. Required permissions: Assets.View.    DEPRECATED
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotId">The key of the robot for which the asset is being fetched.</param>
        /// <param name="assetName">The name of the asset being fetched.</param>
        /// <returns>Task of ApiResponse (RobotAssetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RobotAssetDto>> AssetsGetRobotAssetByRobotidAndAssetnameAsyncWithHttpInfo (string robotId, string assetName)
        {
            // verify the required parameter 'robotId' is set
            if (robotId == null)
                throw new ApiException(400, "Missing required parameter 'robotId' when calling AssetsApi->AssetsGetRobotAssetByRobotidAndAssetname");
            // verify the required parameter 'assetName' is set
            if (assetName == null)
                throw new ApiException(400, "Missing required parameter 'assetName' when calling AssetsApi->AssetsGetRobotAssetByRobotidAndAssetname");

            var localVarPath = "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAsset(robotId='{robotId}',assetName='{assetName}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotId != null) localVarPathParams.Add("robotId", Configuration.ApiClient.ParameterToString(robotId)); // path parameter
            if (assetName != null) localVarPathParams.Add("assetName", Configuration.ApiClient.ParameterToString(assetName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsGetRobotAssetByRobotidAndAssetname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotAssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotAssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotAssetDto)));
        }

        /// <summary>
        /// Creates an asset Required permissions: Assets.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>AssetDto</returns>
        public AssetDto AssetsPost (AssetDto assetDto)
        {
             ApiResponse<AssetDto> localVarResponse = AssetsPostWithHttpInfo(assetDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an asset Required permissions: Assets.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>ApiResponse of AssetDto</returns>
        public ApiResponse< AssetDto > AssetsPostWithHttpInfo (AssetDto assetDto)
        {
            // verify the required parameter 'assetDto' is set
            if (assetDto == null)
                throw new ApiException(400, "Missing required parameter 'assetDto' when calling AssetsApi->AssetsPost");

            var localVarPath = "/odata/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetDto != null && assetDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assetDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetDto)));
        }

        /// <summary>
        /// Creates an asset Required permissions: Assets.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>Task of AssetDto</returns>
        public async System.Threading.Tasks.Task<AssetDto> AssetsPostAsync (AssetDto assetDto)
        {
             ApiResponse<AssetDto> localVarResponse = await AssetsPostAsyncWithHttpInfo(assetDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an asset Required permissions: Assets.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetDto"></param>
        /// <returns>Task of ApiResponse (AssetDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetDto>> AssetsPostAsyncWithHttpInfo (AssetDto assetDto)
        {
            // verify the required parameter 'assetDto' is set
            if (assetDto == null)
                throw new ApiException(400, "Missing required parameter 'assetDto' when calling AssetsApi->AssetsPost");

            var localVarPath = "/odata/Assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetDto != null && assetDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assetDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetDto)));
        }

        /// <summary>
        /// Edit an asset Required permissions: Assets.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns></returns>
        public void AssetsPutById (long? id, AssetDto assetDto)
        {
             AssetsPutByIdWithHttpInfo(id, assetDto);
        }

        /// <summary>
        /// Edit an asset Required permissions: Assets.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssetsPutByIdWithHttpInfo (long? id, AssetDto assetDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->AssetsPutById");
            // verify the required parameter 'assetDto' is set
            if (assetDto == null)
                throw new ApiException(400, "Missing required parameter 'assetDto' when calling AssetsApi->AssetsPutById");

            var localVarPath = "/odata/Assets({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assetDto != null && assetDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assetDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit an asset Required permissions: Assets.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssetsPutByIdAsync (long? id, AssetDto assetDto)
        {
             await AssetsPutByIdAsyncWithHttpInfo(id, assetDto);

        }

        /// <summary>
        /// Edit an asset Required permissions: Assets.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="assetDto"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssetsPutByIdAsyncWithHttpInfo (long? id, AssetDto assetDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetsApi->AssetsPutById");
            // verify the required parameter 'assetDto' is set
            if (assetDto == null)
                throw new ApiException(400, "Missing required parameter 'assetDto' when calling AssetsApi->AssetsPutById");

            var localVarPath = "/odata/Assets({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assetDto != null && assetDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(assetDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetsPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
