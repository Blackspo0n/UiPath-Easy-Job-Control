/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// WebhookProcessingExceptionDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class WebhookProcessingExceptionDto :  IEquatable<WebhookProcessingExceptionDto>, IValidatableObject
    {
        /// <summary>
        /// The processing exception type, if any.
        /// </summary>
        /// <value>The processing exception type, if any.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ApplicationException for value: ApplicationException
            /// </summary>
            [EnumMember(Value = "ApplicationException")]
            ApplicationException = 1,
            
            /// <summary>
            /// Enum BusinessException for value: BusinessException
            /// </summary>
            [EnumMember(Value = "BusinessException")]
            BusinessException = 2
        }

        /// <summary>
        /// The processing exception type, if any.
        /// </summary>
        /// <value>The processing exception type, if any.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookProcessingExceptionDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public WebhookProcessingExceptionDto()
        {
        }
        
        /// <summary>
        /// The reason the processing failed.
        /// </summary>
        /// <value>The reason the processing failed.</value>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; private set; }

        /// <summary>
        /// Stores additional details about the exception.
        /// </summary>
        /// <value>Stores additional details about the exception.</value>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public string Details { get; private set; }


        /// <summary>
        /// A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.
        /// </summary>
        /// <value>A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.</value>
        [DataMember(Name="AssociatedImageFilePath", EmitDefaultValue=false)]
        public string AssociatedImageFilePath { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookProcessingExceptionDto {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssociatedImageFilePath: ").Append(AssociatedImageFilePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookProcessingExceptionDto);
        }

        /// <summary>
        /// Returns true if WebhookProcessingExceptionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookProcessingExceptionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookProcessingExceptionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AssociatedImageFilePath == input.AssociatedImageFilePath ||
                    (this.AssociatedImageFilePath != null &&
                    this.AssociatedImageFilePath.Equals(input.AssociatedImageFilePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AssociatedImageFilePath != null)
                    hashCode = hashCode * 59 + this.AssociatedImageFilePath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
