/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a single job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>JobDto</returns>
        JobDto JobsGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of JobDto</returns>
        ApiResponse<JobDto> JobsGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets Jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListJobDto</returns>
        ODataResponseListJobDto JobsGetJobs (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets Jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListJobDto</returns>
        ApiResponse<ODataResponseListJobDto> JobsGetJobsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>ODataResponseListJobDto</returns>
        ODataResponseListJobDto JobsStartJobs (StartJobParameters startJobParameters = null);

        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListJobDto</returns>
        ApiResponse<ODataResponseListJobDto> JobsStartJobsWithHttpInfo (StartJobParameters startJobParameters = null);
        /// <summary>
        /// Cancels or terminates the specified job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns></returns>
        void JobsStopJobById (long? id, StopJobParameters stopJobParameters);

        /// <summary>
        /// Cancels or terminates the specified job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> JobsStopJobByIdWithHttpInfo (long? id, StopJobParameters stopJobParameters);
        /// <summary>
        /// Cancels or terminates the specified jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns></returns>
        void JobsStopJobs (StopJobsParameters stopJobsParameters);

        /// <summary>
        /// Cancels or terminates the specified jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> JobsStopJobsWithHttpInfo (StopJobsParameters stopJobsParameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a single job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of JobDto</returns>
        System.Threading.Tasks.Task<JobDto> JobsGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (JobDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDto>> JobsGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets Jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListJobDto</returns>
        System.Threading.Tasks.Task<ODataResponseListJobDto> JobsGetJobsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets Jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListJobDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListJobDto>> JobsGetJobsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>Task of ODataResponseListJobDto</returns>
        System.Threading.Tasks.Task<ODataResponseListJobDto> JobsStartJobsAsync (StartJobParameters startJobParameters = null);

        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListJobDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListJobDto>> JobsStartJobsAsyncWithHttpInfo (StartJobParameters startJobParameters = null);
        /// <summary>
        /// Cancels or terminates the specified job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task JobsStopJobByIdAsync (long? id, StopJobParameters stopJobParameters);

        /// <summary>
        /// Cancels or terminates the specified job.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> JobsStopJobByIdAsyncWithHttpInfo (long? id, StopJobParameters stopJobParameters);
        /// <summary>
        /// Cancels or terminates the specified jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task JobsStopJobsAsync (StopJobsParameters stopJobsParameters);

        /// <summary>
        /// Cancels or terminates the specified jobs.
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> JobsStopJobsAsyncWithHttpInfo (StopJobsParameters stopJobsParameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a single job. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>JobDto</returns>
        public JobDto JobsGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<JobDto> localVarResponse = JobsGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single job. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of JobDto</returns>
        public ApiResponse< JobDto > JobsGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobsGetById");

            var localVarPath = "/odata/Jobs({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobDto)));
        }

        /// <summary>
        /// Gets a single job. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of JobDto</returns>
        public async System.Threading.Tasks.Task<JobDto> JobsGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<JobDto> localVarResponse = await JobsGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single job. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (JobDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobDto>> JobsGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobsGetById");

            var localVarPath = "/odata/Jobs({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobDto)));
        }

        /// <summary>
        /// Gets Jobs. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListJobDto</returns>
        public ODataResponseListJobDto JobsGetJobs (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListJobDto> localVarResponse = JobsGetJobsWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Jobs. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListJobDto</returns>
        public ApiResponse< ODataResponseListJobDto > JobsGetJobsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsGetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListJobDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListJobDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListJobDto)));
        }

        /// <summary>
        /// Gets Jobs. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListJobDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListJobDto> JobsGetJobsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListJobDto> localVarResponse = await JobsGetJobsAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Jobs. Required permissions: Jobs.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListJobDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListJobDto>> JobsGetJobsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsGetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListJobDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListJobDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListJobDto)));
        }

        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job. Required permissions: Jobs.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>ODataResponseListJobDto</returns>
        public ODataResponseListJobDto JobsStartJobs (StartJobParameters startJobParameters = null)
        {
             ApiResponse<ODataResponseListJobDto> localVarResponse = JobsStartJobsWithHttpInfo(startJobParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job. Required permissions: Jobs.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListJobDto</returns>
        public ApiResponse< ODataResponseListJobDto > JobsStartJobsWithHttpInfo (StartJobParameters startJobParameters = null)
        {

            var localVarPath = "/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startJobParameters != null && startJobParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startJobParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startJobParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsStartJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListJobDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListJobDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListJobDto)));
        }

        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job. Required permissions: Jobs.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>Task of ODataResponseListJobDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListJobDto> JobsStartJobsAsync (StartJobParameters startJobParameters = null)
        {
             ApiResponse<ODataResponseListJobDto> localVarResponse = await JobsStartJobsAsyncWithHttpInfo(startJobParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job. Required permissions: Jobs.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startJobParameters">StartInfo - The information required to register the new jobs. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListJobDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListJobDto>> JobsStartJobsAsyncWithHttpInfo (StartJobParameters startJobParameters = null)
        {

            var localVarPath = "/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startJobParameters != null && startJobParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startJobParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startJobParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsStartJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListJobDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListJobDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListJobDto)));
        }

        /// <summary>
        /// Cancels or terminates the specified job. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns></returns>
        public void JobsStopJobById (long? id, StopJobParameters stopJobParameters)
        {
             JobsStopJobByIdWithHttpInfo(id, stopJobParameters);
        }

        /// <summary>
        /// Cancels or terminates the specified job. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> JobsStopJobByIdWithHttpInfo (long? id, StopJobParameters stopJobParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobsStopJobById");
            // verify the required parameter 'stopJobParameters' is set
            if (stopJobParameters == null)
                throw new ApiException(400, "Missing required parameter 'stopJobParameters' when calling JobsApi->JobsStopJobById");

            var localVarPath = "/odata/Jobs({Id})/UiPath.Server.Configuration.OData.StopJob";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (stopJobParameters != null && stopJobParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopJobParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopJobParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsStopJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancels or terminates the specified job. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task JobsStopJobByIdAsync (long? id, StopJobParameters stopJobParameters)
        {
             await JobsStopJobByIdAsyncWithHttpInfo(id, stopJobParameters);

        }

        /// <summary>
        /// Cancels or terminates the specified job. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="stopJobParameters">Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> JobsStopJobByIdAsyncWithHttpInfo (long? id, StopJobParameters stopJobParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling JobsApi->JobsStopJobById");
            // verify the required parameter 'stopJobParameters' is set
            if (stopJobParameters == null)
                throw new ApiException(400, "Missing required parameter 'stopJobParameters' when calling JobsApi->JobsStopJobById");

            var localVarPath = "/odata/Jobs({Id})/UiPath.Server.Configuration.OData.StopJob";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (stopJobParameters != null && stopJobParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopJobParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopJobParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsStopJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancels or terminates the specified jobs. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns></returns>
        public void JobsStopJobs (StopJobsParameters stopJobsParameters)
        {
             JobsStopJobsWithHttpInfo(stopJobsParameters);
        }

        /// <summary>
        /// Cancels or terminates the specified jobs. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> JobsStopJobsWithHttpInfo (StopJobsParameters stopJobsParameters)
        {
            // verify the required parameter 'stopJobsParameters' is set
            if (stopJobsParameters == null)
                throw new ApiException(400, "Missing required parameter 'stopJobsParameters' when calling JobsApi->JobsStopJobs");

            var localVarPath = "/odata/Jobs/UiPath.Server.Configuration.OData.StopJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopJobsParameters != null && stopJobsParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopJobsParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopJobsParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsStopJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancels or terminates the specified jobs. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task JobsStopJobsAsync (StopJobsParameters stopJobsParameters)
        {
             await JobsStopJobsAsyncWithHttpInfo(stopJobsParameters);

        }

        /// <summary>
        /// Cancels or terminates the specified jobs. Required permissions: Jobs.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopJobsParameters">JobIds - The ids for the jobs to be canceled or terminated;              Strategy - States whether a job should be soft stopped or killed immediately.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> JobsStopJobsAsyncWithHttpInfo (StopJobsParameters stopJobsParameters)
        {
            // verify the required parameter 'stopJobsParameters' is set
            if (stopJobsParameters == null)
                throw new ApiException(400, "Missing required parameter 'stopJobsParameters' when calling JobsApi->JobsStopJobs");

            var localVarPath = "/odata/Jobs/UiPath.Server.Configuration.OData.StopJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopJobsParameters != null && stopJobsParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopJobsParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopJobsParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JobsStopJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
