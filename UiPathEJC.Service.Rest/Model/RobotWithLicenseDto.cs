/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Entity derived from RobotDto. Is shares all the properties of the base entity and includes the license field.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class RobotWithLicenseDto :  IEquatable<RobotWithLicenseDto>, IValidatableObject
    {
        /// <summary>
        /// The Robot type.
        /// </summary>
        /// <value>The Robot type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NonProduction for value: NonProduction
            /// </summary>
            [EnumMember(Value = "NonProduction")]
            NonProduction = 1,
            
            /// <summary>
            /// Enum Attended for value: Attended
            /// </summary>
            [EnumMember(Value = "Attended")]
            Attended = 2,
            
            /// <summary>
            /// Enum Unattended for value: Unattended
            /// </summary>
            [EnumMember(Value = "Unattended")]
            Unattended = 3,
            
            /// <summary>
            /// Enum Development for value: Development
            /// </summary>
            [EnumMember(Value = "Development")]
            Development = 4
        }

        /// <summary>
        /// The Robot type.
        /// </summary>
        /// <value>The Robot type.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The Robot hosting type (Standard / Floating).
        /// </summary>
        /// <value>The Robot hosting type (Standard / Floating).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HostingTypeEnum
        {
            
            /// <summary>
            /// Enum Standard for value: Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard = 1,
            
            /// <summary>
            /// Enum Floating for value: Floating
            /// </summary>
            [EnumMember(Value = "Floating")]
            Floating = 2
        }

        /// <summary>
        /// The Robot hosting type (Standard / Floating).
        /// </summary>
        /// <value>The Robot hosting type (Standard / Floating).</value>
        [DataMember(Name="HostingType", EmitDefaultValue=false)]
        public HostingTypeEnum HostingType { get; set; }
        /// <summary>
        /// The robot credentials type (Default/ SmartCard)
        /// </summary>
        /// <value>The robot credentials type (Default/ SmartCard)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CredentialTypeEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum SmartCard for value: SmartCard
            /// </summary>
            [EnumMember(Value = "SmartCard")]
            SmartCard = 2
        }

        /// <summary>
        /// The robot credentials type (Default/ SmartCard)
        /// </summary>
        /// <value>The robot credentials type (Default/ SmartCard)</value>
        [DataMember(Name="CredentialType", EmitDefaultValue=false)]
        public CredentialTypeEnum? CredentialType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotWithLicenseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RobotWithLicenseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotWithLicenseDto" /> class.
        /// </summary>
        /// <param name="License">The attached license.</param>
        /// <param name="LicenseKey">The key is automatically generated from the server for the Robot machine.  &lt;para /&gt;For the robot to work, the same key must exist on both the robot and Orchestrator.  &lt;para /&gt;All robots on a machine must have the same license key in order to register correctly..</param>
        /// <param name="MachineName">The name of the machine a Robot is hosted on..</param>
        /// <param name="MachineId">The Id of the machine a Robot is hosted on.</param>
        /// <param name="Name">A custom name for the robot. (required).</param>
        /// <param name="Username">The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.  &lt;para /&gt;Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator. (required).</param>
        /// <param name="Description">Used to add additional information about a robot in order to better identify it..</param>
        /// <param name="Version">The Robot&#39;s Version..</param>
        /// <param name="Type">The Robot type. (required).</param>
        /// <param name="HostingType">The Robot hosting type (Standard / Floating). (required).</param>
        /// <param name="Password">The Windows password associated with the machine username..</param>
        /// <param name="CredentialType">The robot credentials type (Default/ SmartCard).</param>
        /// <param name="Environments">The collection of environments the robot is part of..</param>
        /// <param name="RobotEnvironments">The comma separated textual representation of environment names the robot is part of..</param>
        /// <param name="ExecutionSettings">A collection of key value pairs containing execution settings for this robot..</param>
        /// <param name="Id">Id.</param>
        public RobotWithLicenseDto(RobotLicenseDto License = default(RobotLicenseDto), string LicenseKey = default(string), string MachineName = default(string), long? MachineId = default(long?), string Name = default(string), string Username = default(string), string Description = default(string), string Version = default(string), TypeEnum Type = default(TypeEnum), HostingTypeEnum HostingType = default(HostingTypeEnum), string Password = default(string), CredentialTypeEnum? CredentialType = default(CredentialTypeEnum?), List<EnvironmentDto> Environments = default(List<EnvironmentDto>), string RobotEnvironments = default(string), Dictionary<string, Object> ExecutionSettings = default(Dictionary<string, Object>), long? Id = default(long?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for RobotWithLicenseDto and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for RobotWithLicenseDto and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for RobotWithLicenseDto and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "HostingType" is required (not null)
            if (HostingType == null)
            {
                throw new InvalidDataException("HostingType is a required property for RobotWithLicenseDto and cannot be null");
            }
            else
            {
                this.HostingType = HostingType;
            }
            this.License = License;
            this.LicenseKey = LicenseKey;
            this.MachineName = MachineName;
            this.MachineId = MachineId;
            this.Description = Description;
            this.Version = Version;
            this.Password = Password;
            this.CredentialType = CredentialType;
            this.Environments = Environments;
            this.RobotEnvironments = RobotEnvironments;
            this.ExecutionSettings = ExecutionSettings;
            this.Id = Id;
        }
        
        /// <summary>
        /// The attached license
        /// </summary>
        /// <value>The attached license</value>
        [DataMember(Name="License", EmitDefaultValue=false)]
        public RobotLicenseDto License { get; set; }

        /// <summary>
        /// The key is automatically generated from the server for the Robot machine.  &lt;para /&gt;For the robot to work, the same key must exist on both the robot and Orchestrator.  &lt;para /&gt;All robots on a machine must have the same license key in order to register correctly.
        /// </summary>
        /// <value>The key is automatically generated from the server for the Robot machine.  &lt;para /&gt;For the robot to work, the same key must exist on both the robot and Orchestrator.  &lt;para /&gt;All robots on a machine must have the same license key in order to register correctly.</value>
        [DataMember(Name="LicenseKey", EmitDefaultValue=false)]
        public string LicenseKey { get; set; }

        /// <summary>
        /// The name of the machine a Robot is hosted on.
        /// </summary>
        /// <value>The name of the machine a Robot is hosted on.</value>
        [DataMember(Name="MachineName", EmitDefaultValue=false)]
        public string MachineName { get; set; }

        /// <summary>
        /// The Id of the machine a Robot is hosted on
        /// </summary>
        /// <value>The Id of the machine a Robot is hosted on</value>
        [DataMember(Name="MachineId", EmitDefaultValue=false)]
        public long? MachineId { get; set; }

        /// <summary>
        /// A custom name for the robot.
        /// </summary>
        /// <value>A custom name for the robot.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.  &lt;para /&gt;Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.
        /// </summary>
        /// <value>The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.  &lt;para /&gt;Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.</value>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Used to add additional information about a robot in order to better identify it.
        /// </summary>
        /// <value>Used to add additional information about a robot in order to better identify it.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The Robot&#39;s Version.
        /// </summary>
        /// <value>The Robot&#39;s Version.</value>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }



        /// <summary>
        /// The Windows password associated with the machine username.
        /// </summary>
        /// <value>The Windows password associated with the machine username.</value>
        [DataMember(Name="Password", EmitDefaultValue=false)]
        public string Password { get; set; }


        /// <summary>
        /// The collection of environments the robot is part of.
        /// </summary>
        /// <value>The collection of environments the robot is part of.</value>
        [DataMember(Name="Environments", EmitDefaultValue=false)]
        public List<EnvironmentDto> Environments { get; set; }

        /// <summary>
        /// The comma separated textual representation of environment names the robot is part of.
        /// </summary>
        /// <value>The comma separated textual representation of environment names the robot is part of.</value>
        [DataMember(Name="RobotEnvironments", EmitDefaultValue=false)]
        public string RobotEnvironments { get; set; }

        /// <summary>
        /// A collection of key value pairs containing execution settings for this robot.
        /// </summary>
        /// <value>A collection of key value pairs containing execution settings for this robot.</value>
        [DataMember(Name="ExecutionSettings", EmitDefaultValue=false)]
        public Dictionary<string, Object> ExecutionSettings { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RobotWithLicenseDto {\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HostingType: ").Append(HostingType).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            sb.Append("  Environments: ").Append(Environments).Append("\n");
            sb.Append("  RobotEnvironments: ").Append(RobotEnvironments).Append("\n");
            sb.Append("  ExecutionSettings: ").Append(ExecutionSettings).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RobotWithLicenseDto);
        }

        /// <summary>
        /// Returns true if RobotWithLicenseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RobotWithLicenseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RobotWithLicenseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.LicenseKey == input.LicenseKey ||
                    (this.LicenseKey != null &&
                    this.LicenseKey.Equals(input.LicenseKey))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.HostingType == input.HostingType ||
                    (this.HostingType != null &&
                    this.HostingType.Equals(input.HostingType))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.CredentialType == input.CredentialType ||
                    (this.CredentialType != null &&
                    this.CredentialType.Equals(input.CredentialType))
                ) && 
                (
                    this.Environments == input.Environments ||
                    this.Environments != null &&
                    this.Environments.SequenceEqual(input.Environments)
                ) && 
                (
                    this.RobotEnvironments == input.RobotEnvironments ||
                    (this.RobotEnvironments != null &&
                    this.RobotEnvironments.Equals(input.RobotEnvironments))
                ) && 
                (
                    this.ExecutionSettings == input.ExecutionSettings ||
                    this.ExecutionSettings != null &&
                    this.ExecutionSettings.SequenceEqual(input.ExecutionSettings)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.LicenseKey != null)
                    hashCode = hashCode * 59 + this.LicenseKey.GetHashCode();
                if (this.MachineName != null)
                    hashCode = hashCode * 59 + this.MachineName.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.HostingType != null)
                    hashCode = hashCode * 59 + this.HostingType.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.CredentialType != null)
                    hashCode = hashCode * 59 + this.CredentialType.GetHashCode();
                if (this.Environments != null)
                    hashCode = hashCode * 59 + this.Environments.GetHashCode();
                if (this.RobotEnvironments != null)
                    hashCode = hashCode * 59 + this.RobotEnvironments.GetHashCode();
                if (this.ExecutionSettings != null)
                    hashCode = hashCode * 59 + this.ExecutionSettings.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LicenseKey (string) maxLength
            if(this.LicenseKey != null && this.LicenseKey.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseKey, length must be less than 255.", new [] { "LicenseKey" });
            }

            // LicenseKey (string) minLength
            if(this.LicenseKey != null && this.LicenseKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseKey, length must be greater than 0.", new [] { "LicenseKey" });
            }

            // MachineName (string) maxLength
            if(this.MachineName != null && this.MachineName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MachineName, length must be less than 50.", new [] { "MachineName" });
            }

            // MachineName (string) minLength
            if(this.MachineName != null && this.MachineName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MachineName, length must be greater than 0.", new [] { "MachineName" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 19)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 19.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            // Username (string) maxLength
            if(this.Username != null && this.Username.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 100.", new [] { "Username" });
            }

            // Username (string) minLength
            if(this.Username != null && this.Username.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be greater than 0.", new [] { "Username" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 500.", new [] { "Description" });
            }

            // Description (string) minLength
            if(this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Password (string) maxLength
            if(this.Password != null && this.Password.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 100.", new [] { "Password" });
            }

            // Password (string) minLength
            if(this.Password != null && this.Password.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 0.", new [] { "Password" });
            }

            yield break;
        }
    }

}
