/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// ODataPath
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class ODataPath :  IEquatable<ODataPath>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ODataPath" /> class.
        /// </summary>
        /// <param name="EdmType">EdmType.</param>
        /// <param name="NavigationSource">NavigationSource.</param>
        /// <param name="Segments">Segments.</param>
        public ODataPath(IEdmType EdmType = default(IEdmType), IEdmNavigationSource NavigationSource = default(IEdmNavigationSource), List<ODataPathSegment> Segments = default(List<ODataPathSegment>))
        {
            this.EdmType = EdmType;
            this.NavigationSource = NavigationSource;
            this.Segments = Segments;
        }
        
        /// <summary>
        /// Gets or Sets EdmType
        /// </summary>
        [DataMember(Name="EdmType", EmitDefaultValue=false)]
        public IEdmType EdmType { get; set; }

        /// <summary>
        /// Gets or Sets NavigationSource
        /// </summary>
        [DataMember(Name="NavigationSource", EmitDefaultValue=false)]
        public IEdmNavigationSource NavigationSource { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name="Segments", EmitDefaultValue=false)]
        public List<ODataPathSegment> Segments { get; set; }

        /// <summary>
        /// Gets or Sets PathTemplate
        /// </summary>
        [DataMember(Name="PathTemplate", EmitDefaultValue=false)]
        public string PathTemplate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ODataPath {\n");
            sb.Append("  EdmType: ").Append(EdmType).Append("\n");
            sb.Append("  NavigationSource: ").Append(NavigationSource).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  PathTemplate: ").Append(PathTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ODataPath);
        }

        /// <summary>
        /// Returns true if ODataPath instances are equal
        /// </summary>
        /// <param name="input">Instance of ODataPath to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ODataPath input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EdmType == input.EdmType ||
                    (this.EdmType != null &&
                    this.EdmType.Equals(input.EdmType))
                ) && 
                (
                    this.NavigationSource == input.NavigationSource ||
                    (this.NavigationSource != null &&
                    this.NavigationSource.Equals(input.NavigationSource))
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                ) && 
                (
                    this.PathTemplate == input.PathTemplate ||
                    (this.PathTemplate != null &&
                    this.PathTemplate.Equals(input.PathTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EdmType != null)
                    hashCode = hashCode * 59 + this.EdmType.GetHashCode();
                if (this.NavigationSource != null)
                    hashCode = hashCode * 59 + this.NavigationSource.GetHashCode();
                if (this.Segments != null)
                    hashCode = hashCode * 59 + this.Segments.GetHashCode();
                if (this.PathTemplate != null)
                    hashCode = hashCode * 59 + this.PathTemplate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
