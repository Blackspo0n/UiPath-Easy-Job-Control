/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores aggregated report information about the processing status of all the items from a given queue in a specific time period.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class QueueProcessingRecordDto :  IEquatable<QueueProcessingRecordDto>, IValidatableObject
    {
        /// <summary>
        /// The aggregation period used in the report.
        /// </summary>
        /// <value>The aggregation period used in the report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportTypeEnum
        {
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            
            /// <summary>
            /// Enum Minute for value: Minute
            /// </summary>
            [EnumMember(Value = "Minute")]
            Minute = 2,
            
            /// <summary>
            /// Enum Hour for value: Hour
            /// </summary>
            [EnumMember(Value = "Hour")]
            Hour = 3,
            
            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 4
        }

        /// <summary>
        /// The aggregation period used in the report.
        /// </summary>
        /// <value>The aggregation period used in the report.</value>
        [DataMember(Name="ReportType", EmitDefaultValue=false)]
        public ReportTypeEnum? ReportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueProcessingRecordDto" /> class.
        /// </summary>
        /// <param name="QueueDefinitionId">The Id of the queue for which the report is done..</param>
        /// <param name="UiQueueMetadata">The queue for which the report is done..</param>
        /// <param name="ProcessingTime">The date and time when the report is computed..</param>
        /// <param name="ReportType">The aggregation period used in the report..</param>
        /// <param name="NumberOfRemainingTransactions">The number of unprocessed (new) items..</param>
        /// <param name="NumberOfInProgressTransactions">The number of items in progress..</param>
        /// <param name="NumberOfApplicationExceptions">The total number of application exceptions thrown while processing queue items in the given time period..</param>
        /// <param name="NumberOfBusinessExceptions">The total number of business exceptions thrown while processing queue items in the given time period..</param>
        /// <param name="NumberOfSuccessfulTransactions">The total number of successfully processed queue items in the given time period..</param>
        /// <param name="NumberOfRetriedItems">The total number of processing retries occurred in the given time period..</param>
        /// <param name="ApplicationExceptionsProcessingTime">The total number of seconds spent processing queue items that failed with application exception in the given time period..</param>
        /// <param name="BusinessExceptionsProcessingTime">The total number of seconds spent processing queue items that failed with business exception in the given time period..</param>
        /// <param name="SuccessfulTransactionsProcessingTime">The total number of seconds spent processing successful queue items in the given time period..</param>
        /// <param name="TotalNumberOfTransactions">The total number of item processing transactions, both failed and successful..</param>
        /// <param name="TenantId">The Id of the queue tenant..</param>
        /// <param name="Id">Id.</param>
        public QueueProcessingRecordDto(long? QueueDefinitionId = default(long?), QueueDefinitionDto UiQueueMetadata = default(QueueDefinitionDto), DateTime? ProcessingTime = default(DateTime?), ReportTypeEnum? ReportType = default(ReportTypeEnum?), int? NumberOfRemainingTransactions = default(int?), int? NumberOfInProgressTransactions = default(int?), int? NumberOfApplicationExceptions = default(int?), int? NumberOfBusinessExceptions = default(int?), int? NumberOfSuccessfulTransactions = default(int?), int? NumberOfRetriedItems = default(int?), decimal? ApplicationExceptionsProcessingTime = default(decimal?), decimal? BusinessExceptionsProcessingTime = default(decimal?), decimal? SuccessfulTransactionsProcessingTime = default(decimal?), int? TotalNumberOfTransactions = default(int?), int? TenantId = default(int?), long? Id = default(long?))
        {
            this.QueueDefinitionId = QueueDefinitionId;
            this.UiQueueMetadata = UiQueueMetadata;
            this.ProcessingTime = ProcessingTime;
            this.ReportType = ReportType;
            this.NumberOfRemainingTransactions = NumberOfRemainingTransactions;
            this.NumberOfInProgressTransactions = NumberOfInProgressTransactions;
            this.NumberOfApplicationExceptions = NumberOfApplicationExceptions;
            this.NumberOfBusinessExceptions = NumberOfBusinessExceptions;
            this.NumberOfSuccessfulTransactions = NumberOfSuccessfulTransactions;
            this.NumberOfRetriedItems = NumberOfRetriedItems;
            this.ApplicationExceptionsProcessingTime = ApplicationExceptionsProcessingTime;
            this.BusinessExceptionsProcessingTime = BusinessExceptionsProcessingTime;
            this.SuccessfulTransactionsProcessingTime = SuccessfulTransactionsProcessingTime;
            this.TotalNumberOfTransactions = TotalNumberOfTransactions;
            this.TenantId = TenantId;
            this.Id = Id;
        }
        
        /// <summary>
        /// The Id of the queue for which the report is done.
        /// </summary>
        /// <value>The Id of the queue for which the report is done.</value>
        [DataMember(Name="QueueDefinitionId", EmitDefaultValue=false)]
        public long? QueueDefinitionId { get; set; }

        /// <summary>
        /// The queue for which the report is done.
        /// </summary>
        /// <value>The queue for which the report is done.</value>
        [DataMember(Name="UiQueueMetadata", EmitDefaultValue=false)]
        public QueueDefinitionDto UiQueueMetadata { get; set; }

        /// <summary>
        /// The date and time when the report is computed.
        /// </summary>
        /// <value>The date and time when the report is computed.</value>
        [DataMember(Name="ProcessingTime", EmitDefaultValue=false)]
        public DateTime? ProcessingTime { get; set; }


        /// <summary>
        /// The number of unprocessed (new) items.
        /// </summary>
        /// <value>The number of unprocessed (new) items.</value>
        [DataMember(Name="NumberOfRemainingTransactions", EmitDefaultValue=false)]
        public int? NumberOfRemainingTransactions { get; set; }

        /// <summary>
        /// The number of items in progress.
        /// </summary>
        /// <value>The number of items in progress.</value>
        [DataMember(Name="NumberOfInProgressTransactions", EmitDefaultValue=false)]
        public int? NumberOfInProgressTransactions { get; set; }

        /// <summary>
        /// The total number of application exceptions thrown while processing queue items in the given time period.
        /// </summary>
        /// <value>The total number of application exceptions thrown while processing queue items in the given time period.</value>
        [DataMember(Name="NumberOfApplicationExceptions", EmitDefaultValue=false)]
        public int? NumberOfApplicationExceptions { get; set; }

        /// <summary>
        /// The total number of business exceptions thrown while processing queue items in the given time period.
        /// </summary>
        /// <value>The total number of business exceptions thrown while processing queue items in the given time period.</value>
        [DataMember(Name="NumberOfBusinessExceptions", EmitDefaultValue=false)]
        public int? NumberOfBusinessExceptions { get; set; }

        /// <summary>
        /// The total number of successfully processed queue items in the given time period.
        /// </summary>
        /// <value>The total number of successfully processed queue items in the given time period.</value>
        [DataMember(Name="NumberOfSuccessfulTransactions", EmitDefaultValue=false)]
        public int? NumberOfSuccessfulTransactions { get; set; }

        /// <summary>
        /// The total number of processing retries occurred in the given time period.
        /// </summary>
        /// <value>The total number of processing retries occurred in the given time period.</value>
        [DataMember(Name="NumberOfRetriedItems", EmitDefaultValue=false)]
        public int? NumberOfRetriedItems { get; set; }

        /// <summary>
        /// The total number of seconds spent processing queue items that failed with application exception in the given time period.
        /// </summary>
        /// <value>The total number of seconds spent processing queue items that failed with application exception in the given time period.</value>
        [DataMember(Name="ApplicationExceptionsProcessingTime", EmitDefaultValue=false)]
        public decimal? ApplicationExceptionsProcessingTime { get; set; }

        /// <summary>
        /// The total number of seconds spent processing queue items that failed with business exception in the given time period.
        /// </summary>
        /// <value>The total number of seconds spent processing queue items that failed with business exception in the given time period.</value>
        [DataMember(Name="BusinessExceptionsProcessingTime", EmitDefaultValue=false)]
        public decimal? BusinessExceptionsProcessingTime { get; set; }

        /// <summary>
        /// The total number of seconds spent processing successful queue items in the given time period.
        /// </summary>
        /// <value>The total number of seconds spent processing successful queue items in the given time period.</value>
        [DataMember(Name="SuccessfulTransactionsProcessingTime", EmitDefaultValue=false)]
        public decimal? SuccessfulTransactionsProcessingTime { get; set; }

        /// <summary>
        /// The total number of item processing transactions, both failed and successful.
        /// </summary>
        /// <value>The total number of item processing transactions, both failed and successful.</value>
        [DataMember(Name="TotalNumberOfTransactions", EmitDefaultValue=false)]
        public int? TotalNumberOfTransactions { get; set; }

        /// <summary>
        /// The Id of the queue tenant.
        /// </summary>
        /// <value>The Id of the queue tenant.</value>
        [DataMember(Name="TenantId", EmitDefaultValue=false)]
        public int? TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueProcessingRecordDto {\n");
            sb.Append("  QueueDefinitionId: ").Append(QueueDefinitionId).Append("\n");
            sb.Append("  UiQueueMetadata: ").Append(UiQueueMetadata).Append("\n");
            sb.Append("  ProcessingTime: ").Append(ProcessingTime).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  NumberOfRemainingTransactions: ").Append(NumberOfRemainingTransactions).Append("\n");
            sb.Append("  NumberOfInProgressTransactions: ").Append(NumberOfInProgressTransactions).Append("\n");
            sb.Append("  NumberOfApplicationExceptions: ").Append(NumberOfApplicationExceptions).Append("\n");
            sb.Append("  NumberOfBusinessExceptions: ").Append(NumberOfBusinessExceptions).Append("\n");
            sb.Append("  NumberOfSuccessfulTransactions: ").Append(NumberOfSuccessfulTransactions).Append("\n");
            sb.Append("  NumberOfRetriedItems: ").Append(NumberOfRetriedItems).Append("\n");
            sb.Append("  ApplicationExceptionsProcessingTime: ").Append(ApplicationExceptionsProcessingTime).Append("\n");
            sb.Append("  BusinessExceptionsProcessingTime: ").Append(BusinessExceptionsProcessingTime).Append("\n");
            sb.Append("  SuccessfulTransactionsProcessingTime: ").Append(SuccessfulTransactionsProcessingTime).Append("\n");
            sb.Append("  TotalNumberOfTransactions: ").Append(TotalNumberOfTransactions).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueProcessingRecordDto);
        }

        /// <summary>
        /// Returns true if QueueProcessingRecordDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueProcessingRecordDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueProcessingRecordDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueDefinitionId == input.QueueDefinitionId ||
                    (this.QueueDefinitionId != null &&
                    this.QueueDefinitionId.Equals(input.QueueDefinitionId))
                ) && 
                (
                    this.UiQueueMetadata == input.UiQueueMetadata ||
                    (this.UiQueueMetadata != null &&
                    this.UiQueueMetadata.Equals(input.UiQueueMetadata))
                ) && 
                (
                    this.ProcessingTime == input.ProcessingTime ||
                    (this.ProcessingTime != null &&
                    this.ProcessingTime.Equals(input.ProcessingTime))
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) && 
                (
                    this.NumberOfRemainingTransactions == input.NumberOfRemainingTransactions ||
                    (this.NumberOfRemainingTransactions != null &&
                    this.NumberOfRemainingTransactions.Equals(input.NumberOfRemainingTransactions))
                ) && 
                (
                    this.NumberOfInProgressTransactions == input.NumberOfInProgressTransactions ||
                    (this.NumberOfInProgressTransactions != null &&
                    this.NumberOfInProgressTransactions.Equals(input.NumberOfInProgressTransactions))
                ) && 
                (
                    this.NumberOfApplicationExceptions == input.NumberOfApplicationExceptions ||
                    (this.NumberOfApplicationExceptions != null &&
                    this.NumberOfApplicationExceptions.Equals(input.NumberOfApplicationExceptions))
                ) && 
                (
                    this.NumberOfBusinessExceptions == input.NumberOfBusinessExceptions ||
                    (this.NumberOfBusinessExceptions != null &&
                    this.NumberOfBusinessExceptions.Equals(input.NumberOfBusinessExceptions))
                ) && 
                (
                    this.NumberOfSuccessfulTransactions == input.NumberOfSuccessfulTransactions ||
                    (this.NumberOfSuccessfulTransactions != null &&
                    this.NumberOfSuccessfulTransactions.Equals(input.NumberOfSuccessfulTransactions))
                ) && 
                (
                    this.NumberOfRetriedItems == input.NumberOfRetriedItems ||
                    (this.NumberOfRetriedItems != null &&
                    this.NumberOfRetriedItems.Equals(input.NumberOfRetriedItems))
                ) && 
                (
                    this.ApplicationExceptionsProcessingTime == input.ApplicationExceptionsProcessingTime ||
                    (this.ApplicationExceptionsProcessingTime != null &&
                    this.ApplicationExceptionsProcessingTime.Equals(input.ApplicationExceptionsProcessingTime))
                ) && 
                (
                    this.BusinessExceptionsProcessingTime == input.BusinessExceptionsProcessingTime ||
                    (this.BusinessExceptionsProcessingTime != null &&
                    this.BusinessExceptionsProcessingTime.Equals(input.BusinessExceptionsProcessingTime))
                ) && 
                (
                    this.SuccessfulTransactionsProcessingTime == input.SuccessfulTransactionsProcessingTime ||
                    (this.SuccessfulTransactionsProcessingTime != null &&
                    this.SuccessfulTransactionsProcessingTime.Equals(input.SuccessfulTransactionsProcessingTime))
                ) && 
                (
                    this.TotalNumberOfTransactions == input.TotalNumberOfTransactions ||
                    (this.TotalNumberOfTransactions != null &&
                    this.TotalNumberOfTransactions.Equals(input.TotalNumberOfTransactions))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueDefinitionId != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionId.GetHashCode();
                if (this.UiQueueMetadata != null)
                    hashCode = hashCode * 59 + this.UiQueueMetadata.GetHashCode();
                if (this.ProcessingTime != null)
                    hashCode = hashCode * 59 + this.ProcessingTime.GetHashCode();
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.NumberOfRemainingTransactions != null)
                    hashCode = hashCode * 59 + this.NumberOfRemainingTransactions.GetHashCode();
                if (this.NumberOfInProgressTransactions != null)
                    hashCode = hashCode * 59 + this.NumberOfInProgressTransactions.GetHashCode();
                if (this.NumberOfApplicationExceptions != null)
                    hashCode = hashCode * 59 + this.NumberOfApplicationExceptions.GetHashCode();
                if (this.NumberOfBusinessExceptions != null)
                    hashCode = hashCode * 59 + this.NumberOfBusinessExceptions.GetHashCode();
                if (this.NumberOfSuccessfulTransactions != null)
                    hashCode = hashCode * 59 + this.NumberOfSuccessfulTransactions.GetHashCode();
                if (this.NumberOfRetriedItems != null)
                    hashCode = hashCode * 59 + this.NumberOfRetriedItems.GetHashCode();
                if (this.ApplicationExceptionsProcessingTime != null)
                    hashCode = hashCode * 59 + this.ApplicationExceptionsProcessingTime.GetHashCode();
                if (this.BusinessExceptionsProcessingTime != null)
                    hashCode = hashCode * 59 + this.BusinessExceptionsProcessingTime.GetHashCode();
                if (this.SuccessfulTransactionsProcessingTime != null)
                    hashCode = hashCode * 59 + this.SuccessfulTransactionsProcessingTime.GetHashCode();
                if (this.TotalNumberOfTransactions != null)
                    hashCode = hashCode * 59 + this.TotalNumberOfTransactions.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
