/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores information about an event on a queue item.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class QueueItemEventDto :  IEquatable<QueueItemEventDto>, IValidatableObject
    {
        /// <summary>
        /// The Action that caused the event.
        /// </summary>
        /// <value>The Action that caused the event.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Create for value: Create
            /// </summary>
            [EnumMember(Value = "Create")]
            Create = 1,
            
            /// <summary>
            /// Enum Edit for value: Edit
            /// </summary>
            [EnumMember(Value = "Edit")]
            Edit = 2,
            
            /// <summary>
            /// Enum Delete for value: Delete
            /// </summary>
            [EnumMember(Value = "Delete")]
            Delete = 3,
            
            /// <summary>
            /// Enum Status for value: Status
            /// </summary>
            [EnumMember(Value = "Status")]
            Status = 4,
            
            /// <summary>
            /// Enum Retry for value: Retry
            /// </summary>
            [EnumMember(Value = "Retry")]
            Retry = 5
        }

        /// <summary>
        /// The Action that caused the event.
        /// </summary>
        /// <value>The Action that caused the event.</value>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Processing Status when event snapshot was taken.
        /// </summary>
        /// <value>Processing Status when event snapshot was taken.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 1,
            
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 2,
            
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 3,
            
            /// <summary>
            /// Enum Successful for value: Successful
            /// </summary>
            [EnumMember(Value = "Successful")]
            Successful = 4,
            
            /// <summary>
            /// Enum Abandoned for value: Abandoned
            /// </summary>
            [EnumMember(Value = "Abandoned")]
            Abandoned = 5,
            
            /// <summary>
            /// Enum Retried for value: Retried
            /// </summary>
            [EnumMember(Value = "Retried")]
            Retried = 6,
            
            /// <summary>
            /// Enum Deleted for value: Deleted
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted = 7
        }

        /// <summary>
        /// Processing Status when event snapshot was taken.
        /// </summary>
        /// <value>Processing Status when event snapshot was taken.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Review Status when event snapshot was taken.
        /// </summary>
        /// <value>Review Status when event snapshot was taken.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReviewStatusEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum InReview for value: InReview
            /// </summary>
            [EnumMember(Value = "InReview")]
            InReview = 2,
            
            /// <summary>
            /// Enum Verified for value: Verified
            /// </summary>
            [EnumMember(Value = "Verified")]
            Verified = 3,
            
            /// <summary>
            /// Enum Retried for value: Retried
            /// </summary>
            [EnumMember(Value = "Retried")]
            Retried = 4
        }

        /// <summary>
        /// Review Status when event snapshot was taken.
        /// </summary>
        /// <value>Review Status when event snapshot was taken.</value>
        [DataMember(Name="ReviewStatus", EmitDefaultValue=false)]
        public ReviewStatusEnum? ReviewStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemEventDto" /> class.
        /// </summary>
        /// <param name="QueueItemId">The Id of a Queue Item that the current item is connected to..</param>
        /// <param name="Timestamp">The Date and Time when the event occured..</param>
        /// <param name="Action">The Action that caused the event..</param>
        /// <param name="Data">The Data associated to the event..</param>
        /// <param name="UserId">The Id of the User that caused the event..</param>
        /// <param name="UserName">The Name of the User that caused the event..</param>
        /// <param name="Status">Processing Status when event snapshot was taken..</param>
        /// <param name="ReviewStatus">Review Status when event snapshot was taken..</param>
        /// <param name="ReviewerUserId">Reviewer User Id when event snapshot was taken..</param>
        /// <param name="ReviewerUserName">Reviewer User Name when event snapshot was taken..</param>
        /// <param name="Id">Id.</param>
        public QueueItemEventDto(long? QueueItemId = default(long?), DateTime? Timestamp = default(DateTime?), ActionEnum? Action = default(ActionEnum?), string Data = default(string), long? UserId = default(long?), string UserName = default(string), StatusEnum? Status = default(StatusEnum?), ReviewStatusEnum? ReviewStatus = default(ReviewStatusEnum?), long? ReviewerUserId = default(long?), string ReviewerUserName = default(string), long? Id = default(long?))
        {
            this.QueueItemId = QueueItemId;
            this.Timestamp = Timestamp;
            this.Action = Action;
            this.Data = Data;
            this.UserId = UserId;
            this.UserName = UserName;
            this.Status = Status;
            this.ReviewStatus = ReviewStatus;
            this.ReviewerUserId = ReviewerUserId;
            this.ReviewerUserName = ReviewerUserName;
            this.Id = Id;
        }
        
        /// <summary>
        /// The Id of a Queue Item that the current item is connected to.
        /// </summary>
        /// <value>The Id of a Queue Item that the current item is connected to.</value>
        [DataMember(Name="QueueItemId", EmitDefaultValue=false)]
        public long? QueueItemId { get; set; }

        /// <summary>
        /// The Date and Time when the event occured.
        /// </summary>
        /// <value>The Date and Time when the event occured.</value>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }


        /// <summary>
        /// The Data associated to the event.
        /// </summary>
        /// <value>The Data associated to the event.</value>
        [DataMember(Name="Data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// The Id of the User that caused the event.
        /// </summary>
        /// <value>The Id of the User that caused the event.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// The Name of the User that caused the event.
        /// </summary>
        /// <value>The Name of the User that caused the event.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }



        /// <summary>
        /// Reviewer User Id when event snapshot was taken.
        /// </summary>
        /// <value>Reviewer User Id when event snapshot was taken.</value>
        [DataMember(Name="ReviewerUserId", EmitDefaultValue=false)]
        public long? ReviewerUserId { get; set; }

        /// <summary>
        /// Reviewer User Name when event snapshot was taken.
        /// </summary>
        /// <value>Reviewer User Name when event snapshot was taken.</value>
        [DataMember(Name="ReviewerUserName", EmitDefaultValue=false)]
        public string ReviewerUserName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueItemEventDto {\n");
            sb.Append("  QueueItemId: ").Append(QueueItemId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReviewStatus: ").Append(ReviewStatus).Append("\n");
            sb.Append("  ReviewerUserId: ").Append(ReviewerUserId).Append("\n");
            sb.Append("  ReviewerUserName: ").Append(ReviewerUserName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueItemEventDto);
        }

        /// <summary>
        /// Returns true if QueueItemEventDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueItemEventDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueItemEventDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueItemId == input.QueueItemId ||
                    (this.QueueItemId != null &&
                    this.QueueItemId.Equals(input.QueueItemId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ReviewStatus == input.ReviewStatus ||
                    (this.ReviewStatus != null &&
                    this.ReviewStatus.Equals(input.ReviewStatus))
                ) && 
                (
                    this.ReviewerUserId == input.ReviewerUserId ||
                    (this.ReviewerUserId != null &&
                    this.ReviewerUserId.Equals(input.ReviewerUserId))
                ) && 
                (
                    this.ReviewerUserName == input.ReviewerUserName ||
                    (this.ReviewerUserName != null &&
                    this.ReviewerUserName.Equals(input.ReviewerUserName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueItemId != null)
                    hashCode = hashCode * 59 + this.QueueItemId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ReviewStatus != null)
                    hashCode = hashCode * 59 + this.ReviewStatus.GetHashCode();
                if (this.ReviewerUserId != null)
                    hashCode = hashCode * 59 + this.ReviewerUserId.GetHashCode();
                if (this.ReviewerUserName != null)
                    hashCode = hashCode * 59 + this.ReviewerUserName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
