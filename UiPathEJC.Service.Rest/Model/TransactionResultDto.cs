/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores data sent when processing an item ended.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class TransactionResultDto :  IEquatable<TransactionResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResultDto" /> class.
        /// </summary>
        /// <param name="IsSuccessful">States if the processing was successful or not..</param>
        /// <param name="ProcessingException">The details of the processing exception thrown if the item failed..</param>
        /// <param name="DeferDate">The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible..</param>
        /// <param name="DueDate">The latest date and time at which the item should be processed. If empty the item can be processed at any given time..</param>
        /// <param name="Output">A collection of key value pairs containing custom data resulted after successful processing..</param>
        /// <param name="Progress">String field which is used to keep track of the business flow progress..</param>
        public TransactionResultDto(bool? IsSuccessful = default(bool?), ProcessingExceptionDto ProcessingException = default(ProcessingExceptionDto), DateTime? DeferDate = default(DateTime?), DateTime? DueDate = default(DateTime?), QueueItemOutput Output = default(QueueItemOutput), string Progress = default(string))
        {
            this.IsSuccessful = IsSuccessful;
            this.ProcessingException = ProcessingException;
            this.DeferDate = DeferDate;
            this.DueDate = DueDate;
            this.Output = Output;
            this.Progress = Progress;
        }
        
        /// <summary>
        /// States if the processing was successful or not.
        /// </summary>
        /// <value>States if the processing was successful or not.</value>
        [DataMember(Name="IsSuccessful", EmitDefaultValue=false)]
        public bool? IsSuccessful { get; set; }

        /// <summary>
        /// The details of the processing exception thrown if the item failed.
        /// </summary>
        /// <value>The details of the processing exception thrown if the item failed.</value>
        [DataMember(Name="ProcessingException", EmitDefaultValue=false)]
        public ProcessingExceptionDto ProcessingException { get; set; }

        /// <summary>
        /// The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.
        /// </summary>
        /// <value>The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.</value>
        [DataMember(Name="DeferDate", EmitDefaultValue=false)]
        public DateTime? DeferDate { get; set; }

        /// <summary>
        /// The latest date and time at which the item should be processed. If empty the item can be processed at any given time.
        /// </summary>
        /// <value>The latest date and time at which the item should be processed. If empty the item can be processed at any given time.</value>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// A collection of key value pairs containing custom data resulted after successful processing.
        /// </summary>
        /// <value>A collection of key value pairs containing custom data resulted after successful processing.</value>
        [DataMember(Name="Output", EmitDefaultValue=false)]
        public QueueItemOutput Output { get; set; }

        /// <summary>
        /// String field which is used to keep track of the business flow progress.
        /// </summary>
        /// <value>String field which is used to keep track of the business flow progress.</value>
        [DataMember(Name="Progress", EmitDefaultValue=false)]
        public string Progress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionResultDto {\n");
            sb.Append("  IsSuccessful: ").Append(IsSuccessful).Append("\n");
            sb.Append("  ProcessingException: ").Append(ProcessingException).Append("\n");
            sb.Append("  DeferDate: ").Append(DeferDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionResultDto);
        }

        /// <summary>
        /// Returns true if TransactionResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsSuccessful == input.IsSuccessful ||
                    (this.IsSuccessful != null &&
                    this.IsSuccessful.Equals(input.IsSuccessful))
                ) && 
                (
                    this.ProcessingException == input.ProcessingException ||
                    (this.ProcessingException != null &&
                    this.ProcessingException.Equals(input.ProcessingException))
                ) && 
                (
                    this.DeferDate == input.DeferDate ||
                    (this.DeferDate != null &&
                    this.DeferDate.Equals(input.DeferDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsSuccessful != null)
                    hashCode = hashCode * 59 + this.IsSuccessful.GetHashCode();
                if (this.ProcessingException != null)
                    hashCode = hashCode * 59 + this.ProcessingException.GetHashCode();
                if (this.DeferDate != null)
                    hashCode = hashCode * 59 + this.DeferDate.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
