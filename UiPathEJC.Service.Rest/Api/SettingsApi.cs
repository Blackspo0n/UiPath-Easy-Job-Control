/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes the license
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SettingsDeleteLicense ();

        /// <summary>
        /// Removes the license
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SettingsDeleteLicenseWithHttpInfo ();
        /// <summary>
        /// Gets the authentication settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseDictionaryDto</returns>
        ResponseDictionaryDto SettingsGetAuthenticationSettings ();

        /// <summary>
        /// Gets the authentication settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseDictionaryDto</returns>
        ApiResponse<ResponseDictionaryDto> SettingsGetAuthenticationSettingsWithHttpInfo ();
        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CalendarDto</returns>
        CalendarDto SettingsGetCalendar ();

        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CalendarDto</returns>
        ApiResponse<CalendarDto> SettingsGetCalendarWithHttpInfo ();
        /// <summary>
        /// Gets the connection string
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string SettingsGetConnectionString ();

        /// <summary>
        /// Gets the connection string
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SettingsGetConnectionStringWithHttpInfo ();
        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>ExecutionSettingsConfiguration</returns>
        ExecutionSettingsConfiguration SettingsGetExecutionSettingsConfigurationByScope (int? scope);

        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>ApiResponse of ExecutionSettingsConfiguration</returns>
        ApiResponse<ExecutionSettingsConfiguration> SettingsGetExecutionSettingsConfigurationByScopeWithHttpInfo (int? scope);
        /// <summary>
        /// Gets supported languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object SettingsGetLanguages ();

        /// <summary>
        /// Gets supported languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SettingsGetLanguagesWithHttpInfo ();
        /// <summary>
        /// Retrieves the current license information.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LicenseDto</returns>
        LicenseDto SettingsGetLicense ();

        /// <summary>
        /// Retrieves the current license information.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LicenseDto</returns>
        ApiResponse<LicenseDto> SettingsGetLicenseWithHttpInfo ();
        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseDictionaryDto</returns>
        ResponseDictionaryDto SettingsGetServicesSettings ();

        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseDictionaryDto</returns>
        ApiResponse<ResponseDictionaryDto> SettingsGetServicesSettingsWithHttpInfo ();
        /// <summary>
        /// Gets the settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListSettingsDto</returns>
        ODataResponseListSettingsDto SettingsGetSettings (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets the settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListSettingsDto</returns>
        ApiResponse<ODataResponseListSettingsDto> SettingsGetSettingsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>SettingsDto</returns>
        SettingsDto SettingsGetSettingsById (string id, string expand = null, string select = null);

        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of SettingsDto</returns>
        ApiResponse<SettingsDto> SettingsGetSettingsByIdWithHttpInfo (string id, string expand = null, string select = null);
        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>SettingsDto</returns>
        SettingsDto SettingsGetSettingsByKey (string key);

        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of SettingsDto</returns>
        ApiResponse<SettingsDto> SettingsGetSettingsByKeyWithHttpInfo (string key);
        /// <summary>
        /// Gets timezones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListResultDtoNameValueDto</returns>
        ListResultDtoNameValueDto SettingsGetTimezones ();

        /// <summary>
        /// Gets timezones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListResultDtoNameValueDto</returns>
        ApiResponse<ListResultDtoNameValueDto> SettingsGetTimezonesWithHttpInfo ();
        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseDictionaryDto</returns>
        ResponseDictionaryDto SettingsGetWebSettings ();

        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseDictionaryDto</returns>
        ApiResponse<ResponseDictionaryDto> SettingsGetWebSettingsWithHttpInfo ();
        /// <summary>
        /// Edits a setting.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>SettingsDto</returns>
        SettingsDto SettingsPutById (string id, SettingsDto settingsDto);

        /// <summary>
        /// Edits a setting.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>ApiResponse of SettingsDto</returns>
        ApiResponse<SettingsDto> SettingsPutByIdWithHttpInfo (string id, SettingsDto settingsDto);
        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns></returns>
        void SettingsSetCalendar (CalendarDto calendar);

        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SettingsSetCalendarWithHttpInfo (CalendarDto calendar);
        /// <summary>
        /// Updates the current settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>SettingsDto</returns>
        SettingsDto SettingsUpdateBulk (UpdateBulkParameters updateBulkParameters = null);

        /// <summary>
        /// Updates the current settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>ApiResponse of SettingsDto</returns>
        ApiResponse<SettingsDto> SettingsUpdateBulkWithHttpInfo (UpdateBulkParameters updateBulkParameters = null);
        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Create or License.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns></returns>
        void SettingsUploadLicense (System.IO.Stream file);

        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Create or License.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SettingsUploadLicenseWithHttpInfo (System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Removes the license
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SettingsDeleteLicenseAsync ();

        /// <summary>
        /// Removes the license
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SettingsDeleteLicenseAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the authentication settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseDictionaryDto</returns>
        System.Threading.Tasks.Task<ResponseDictionaryDto> SettingsGetAuthenticationSettingsAsync ();

        /// <summary>
        /// Gets the authentication settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseDictionaryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDictionaryDto>> SettingsGetAuthenticationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CalendarDto</returns>
        System.Threading.Tasks.Task<CalendarDto> SettingsGetCalendarAsync ();

        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CalendarDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarDto>> SettingsGetCalendarAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the connection string
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SettingsGetConnectionStringAsync ();

        /// <summary>
        /// Gets the connection string
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SettingsGetConnectionStringAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>Task of ExecutionSettingsConfiguration</returns>
        System.Threading.Tasks.Task<ExecutionSettingsConfiguration> SettingsGetExecutionSettingsConfigurationByScopeAsync (int? scope);

        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>Task of ApiResponse (ExecutionSettingsConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutionSettingsConfiguration>> SettingsGetExecutionSettingsConfigurationByScopeAsyncWithHttpInfo (int? scope);
        /// <summary>
        /// Gets supported languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SettingsGetLanguagesAsync ();

        /// <summary>
        /// Gets supported languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SettingsGetLanguagesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the current license information.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LicenseDto</returns>
        System.Threading.Tasks.Task<LicenseDto> SettingsGetLicenseAsync ();

        /// <summary>
        /// Retrieves the current license information.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LicenseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicenseDto>> SettingsGetLicenseAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseDictionaryDto</returns>
        System.Threading.Tasks.Task<ResponseDictionaryDto> SettingsGetServicesSettingsAsync ();

        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseDictionaryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDictionaryDto>> SettingsGetServicesSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListSettingsDto</returns>
        System.Threading.Tasks.Task<ODataResponseListSettingsDto> SettingsGetSettingsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets the settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListSettingsDto>> SettingsGetSettingsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of SettingsDto</returns>
        System.Threading.Tasks.Task<SettingsDto> SettingsGetSettingsByIdAsync (string id, string expand = null, string select = null);

        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsGetSettingsByIdAsyncWithHttpInfo (string id, string expand = null, string select = null);
        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of SettingsDto</returns>
        System.Threading.Tasks.Task<SettingsDto> SettingsGetSettingsByKeyAsync (string key);

        /// <summary>
        /// Gets a settings value based on its key.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsGetSettingsByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Gets timezones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ListResultDtoNameValueDto</returns>
        System.Threading.Tasks.Task<ListResultDtoNameValueDto> SettingsGetTimezonesAsync ();

        /// <summary>
        /// Gets timezones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ListResultDtoNameValueDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListResultDtoNameValueDto>> SettingsGetTimezonesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseDictionaryDto</returns>
        System.Threading.Tasks.Task<ResponseDictionaryDto> SettingsGetWebSettingsAsync ();

        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseDictionaryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDictionaryDto>> SettingsGetWebSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Edits a setting.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>Task of SettingsDto</returns>
        System.Threading.Tasks.Task<SettingsDto> SettingsPutByIdAsync (string id, SettingsDto settingsDto);

        /// <summary>
        /// Edits a setting.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsPutByIdAsyncWithHttpInfo (string id, SettingsDto settingsDto);
        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SettingsSetCalendarAsync (CalendarDto calendar);

        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SettingsSetCalendarAsyncWithHttpInfo (CalendarDto calendar);
        /// <summary>
        /// Updates the current settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>Task of SettingsDto</returns>
        System.Threading.Tasks.Task<SettingsDto> SettingsUpdateBulkAsync (UpdateBulkParameters updateBulkParameters = null);

        /// <summary>
        /// Updates the current settings.
        /// </summary>
        /// <remarks>
        /// Required permissions: Settings.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsUpdateBulkAsyncWithHttpInfo (UpdateBulkParameters updateBulkParameters = null);
        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Create or License.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SettingsUploadLicenseAsync (System.IO.Stream file);

        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: License.Create or License.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SettingsUploadLicenseAsyncWithHttpInfo (System.IO.Stream file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Removes the license Required permissions: License.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SettingsDeleteLicense ()
        {
             SettingsDeleteLicenseWithHttpInfo();
        }

        /// <summary>
        /// Removes the license Required permissions: License.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SettingsDeleteLicenseWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.DeleteLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsDeleteLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the license Required permissions: License.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SettingsDeleteLicenseAsync ()
        {
             await SettingsDeleteLicenseAsyncWithHttpInfo();

        }

        /// <summary>
        /// Removes the license Required permissions: License.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SettingsDeleteLicenseAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.DeleteLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsDeleteLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the authentication settings 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseDictionaryDto</returns>
        public ResponseDictionaryDto SettingsGetAuthenticationSettings ()
        {
             ApiResponse<ResponseDictionaryDto> localVarResponse = SettingsGetAuthenticationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the authentication settings 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseDictionaryDto</returns>
        public ApiResponse< ResponseDictionaryDto > SettingsGetAuthenticationSettingsWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetAuthenticationSettings()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetAuthenticationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDictionaryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDictionaryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDictionaryDto)));
        }

        /// <summary>
        /// Gets the authentication settings 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseDictionaryDto</returns>
        public async System.Threading.Tasks.Task<ResponseDictionaryDto> SettingsGetAuthenticationSettingsAsync ()
        {
             ApiResponse<ResponseDictionaryDto> localVarResponse = await SettingsGetAuthenticationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the authentication settings 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseDictionaryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDictionaryDto>> SettingsGetAuthenticationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetAuthenticationSettings()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetAuthenticationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDictionaryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDictionaryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDictionaryDto)));
        }

        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CalendarDto</returns>
        public CalendarDto SettingsGetCalendar ()
        {
             ApiResponse<CalendarDto> localVarResponse = SettingsGetCalendarWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CalendarDto</returns>
        public ApiResponse< CalendarDto > SettingsGetCalendarWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetCalendar()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CalendarDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarDto)));
        }

        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CalendarDto</returns>
        public async System.Threading.Tasks.Task<CalendarDto> SettingsGetCalendarAsync ()
        {
             ApiResponse<CalendarDto> localVarResponse = await SettingsGetCalendarAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CalendarDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarDto>> SettingsGetCalendarAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetCalendar()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CalendarDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarDto)));
        }

        /// <summary>
        /// Gets the connection string Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string SettingsGetConnectionString ()
        {
             ApiResponse<string> localVarResponse = SettingsGetConnectionStringWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the connection string Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SettingsGetConnectionStringWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetConnectionString()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetConnectionString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the connection string Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SettingsGetConnectionStringAsync ()
        {
             ApiResponse<string> localVarResponse = await SettingsGetConnectionStringAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the connection string Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SettingsGetConnectionStringAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetConnectionString()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetConnectionString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1. Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>ExecutionSettingsConfiguration</returns>
        public ExecutionSettingsConfiguration SettingsGetExecutionSettingsConfigurationByScope (int? scope)
        {
             ApiResponse<ExecutionSettingsConfiguration> localVarResponse = SettingsGetExecutionSettingsConfigurationByScopeWithHttpInfo(scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1. Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>ApiResponse of ExecutionSettingsConfiguration</returns>
        public ApiResponse< ExecutionSettingsConfiguration > SettingsGetExecutionSettingsConfigurationByScopeWithHttpInfo (int? scope)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling SettingsApi->SettingsGetExecutionSettingsConfigurationByScope");

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetExecutionSettingsConfiguration(scope={scope})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetExecutionSettingsConfigurationByScope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionSettingsConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutionSettingsConfiguration) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionSettingsConfiguration)));
        }

        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1. Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>Task of ExecutionSettingsConfiguration</returns>
        public async System.Threading.Tasks.Task<ExecutionSettingsConfiguration> SettingsGetExecutionSettingsConfigurationByScopeAsync (int? scope)
        {
             ApiResponse<ExecutionSettingsConfiguration> localVarResponse = await SettingsGetExecutionSettingsConfigurationByScopeAsyncWithHttpInfo(scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the execution settings configuration (display name, value type, etc.).  If scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then  the default values will be the actual values set globally.  e.g., Resolution width  Assume it was set globally to 720.  Then within the config returned by this function, the default value for this setting will be:  - 0 for scope &#x3D; 0 and  - 720 for scope &#x3D; 1. Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the configuration; 0 for Global, 1 for Robot</param>
        /// <returns>Task of ApiResponse (ExecutionSettingsConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutionSettingsConfiguration>> SettingsGetExecutionSettingsConfigurationByScopeAsyncWithHttpInfo (int? scope)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling SettingsApi->SettingsGetExecutionSettingsConfigurationByScope");

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetExecutionSettingsConfiguration(scope={scope})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetExecutionSettingsConfigurationByScope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionSettingsConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutionSettingsConfiguration) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionSettingsConfiguration)));
        }

        /// <summary>
        /// Gets supported languages 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object SettingsGetLanguages ()
        {
             ApiResponse<Object> localVarResponse = SettingsGetLanguagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets supported languages 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SettingsGetLanguagesWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetLanguages()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets supported languages 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SettingsGetLanguagesAsync ()
        {
             ApiResponse<Object> localVarResponse = await SettingsGetLanguagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets supported languages 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SettingsGetLanguagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetLanguages()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieves the current license information. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LicenseDto</returns>
        public LicenseDto SettingsGetLicense ()
        {
             ApiResponse<LicenseDto> localVarResponse = SettingsGetLicenseWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the current license information. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LicenseDto</returns>
        public ApiResponse< LicenseDto > SettingsGetLicenseWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetLicense()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseDto)));
        }

        /// <summary>
        /// Retrieves the current license information. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LicenseDto</returns>
        public async System.Threading.Tasks.Task<LicenseDto> SettingsGetLicenseAsync ()
        {
             ApiResponse<LicenseDto> localVarResponse = await SettingsGetLicenseAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the current license information. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LicenseDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicenseDto>> SettingsGetLicenseAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetLicense()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseDto)));
        }

        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseDictionaryDto</returns>
        public ResponseDictionaryDto SettingsGetServicesSettings ()
        {
             ApiResponse<ResponseDictionaryDto> localVarResponse = SettingsGetServicesSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseDictionaryDto</returns>
        public ApiResponse< ResponseDictionaryDto > SettingsGetServicesSettingsWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetServicesSettings()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetServicesSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDictionaryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDictionaryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDictionaryDto)));
        }

        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseDictionaryDto</returns>
        public async System.Threading.Tasks.Task<ResponseDictionaryDto> SettingsGetServicesSettingsAsync ()
        {
             ApiResponse<ResponseDictionaryDto> localVarResponse = await SettingsGetServicesSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseDictionaryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDictionaryDto>> SettingsGetServicesSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetServicesSettings()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetServicesSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDictionaryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDictionaryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDictionaryDto)));
        }

        /// <summary>
        /// Gets the settings. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListSettingsDto</returns>
        public ODataResponseListSettingsDto SettingsGetSettings (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListSettingsDto> localVarResponse = SettingsGetSettingsWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the settings. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListSettingsDto</returns>
        public ApiResponse< ODataResponseListSettingsDto > SettingsGetSettingsWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListSettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListSettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListSettingsDto)));
        }

        /// <summary>
        /// Gets the settings. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListSettingsDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListSettingsDto> SettingsGetSettingsAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListSettingsDto> localVarResponse = await SettingsGetSettingsAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the settings. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListSettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListSettingsDto>> SettingsGetSettingsAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListSettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListSettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListSettingsDto)));
        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>SettingsDto</returns>
        public SettingsDto SettingsGetSettingsById (string id, string expand = null, string select = null)
        {
             ApiResponse<SettingsDto> localVarResponse = SettingsGetSettingsByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of SettingsDto</returns>
        public ApiResponse< SettingsDto > SettingsGetSettingsByIdWithHttpInfo (string id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsApi->SettingsGetSettingsById");

            var localVarPath = "/odata/Settings('{Id}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of SettingsDto</returns>
        public async System.Threading.Tasks.Task<SettingsDto> SettingsGetSettingsByIdAsync (string id, string expand = null, string select = null)
        {
             ApiResponse<SettingsDto> localVarResponse = await SettingsGetSettingsByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsGetSettingsByIdAsyncWithHttpInfo (string id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsApi->SettingsGetSettingsById");

            var localVarPath = "/odata/Settings('{Id}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetSettingsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>SettingsDto</returns>
        public SettingsDto SettingsGetSettingsByKey (string key)
        {
             ApiResponse<SettingsDto> localVarResponse = SettingsGetSettingsByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of SettingsDto</returns>
        public ApiResponse< SettingsDto > SettingsGetSettingsByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SettingsApi->SettingsGetSettingsByKey");

            var localVarPath = "/odata/Settings('{key}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetSettingsByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of SettingsDto</returns>
        public async System.Threading.Tasks.Task<SettingsDto> SettingsGetSettingsByKeyAsync (string key)
        {
             ApiResponse<SettingsDto> localVarResponse = await SettingsGetSettingsByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a settings value based on its key. Required permissions: Settings.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsGetSettingsByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SettingsApi->SettingsGetSettingsByKey");

            var localVarPath = "/odata/Settings('{key}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetSettingsByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Gets timezones. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListResultDtoNameValueDto</returns>
        public ListResultDtoNameValueDto SettingsGetTimezones ()
        {
             ApiResponse<ListResultDtoNameValueDto> localVarResponse = SettingsGetTimezonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets timezones. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListResultDtoNameValueDto</returns>
        public ApiResponse< ListResultDtoNameValueDto > SettingsGetTimezonesWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetTimezones()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResultDtoNameValueDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListResultDtoNameValueDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResultDtoNameValueDto)));
        }

        /// <summary>
        /// Gets timezones. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ListResultDtoNameValueDto</returns>
        public async System.Threading.Tasks.Task<ListResultDtoNameValueDto> SettingsGetTimezonesAsync ()
        {
             ApiResponse<ListResultDtoNameValueDto> localVarResponse = await SettingsGetTimezonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets timezones. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ListResultDtoNameValueDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListResultDtoNameValueDto>> SettingsGetTimezonesAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetTimezones()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResultDtoNameValueDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListResultDtoNameValueDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResultDtoNameValueDto)));
        }

        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseDictionaryDto</returns>
        public ResponseDictionaryDto SettingsGetWebSettings ()
        {
             ApiResponse<ResponseDictionaryDto> localVarResponse = SettingsGetWebSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseDictionaryDto</returns>
        public ApiResponse< ResponseDictionaryDto > SettingsGetWebSettingsWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetWebSettings()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetWebSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDictionaryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDictionaryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDictionaryDto)));
        }

        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseDictionaryDto</returns>
        public async System.Threading.Tasks.Task<ResponseDictionaryDto> SettingsGetWebSettingsAsync ()
        {
             ApiResponse<ResponseDictionaryDto> localVarResponse = await SettingsGetWebSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of key value pairs representing settings used by Orchestrator web client. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseDictionaryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDictionaryDto>> SettingsGetWebSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.GetWebSettings()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsGetWebSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDictionaryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDictionaryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDictionaryDto)));
        }

        /// <summary>
        /// Edits a setting. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>SettingsDto</returns>
        public SettingsDto SettingsPutById (string id, SettingsDto settingsDto)
        {
             ApiResponse<SettingsDto> localVarResponse = SettingsPutByIdWithHttpInfo(id, settingsDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a setting. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>ApiResponse of SettingsDto</returns>
        public ApiResponse< SettingsDto > SettingsPutByIdWithHttpInfo (string id, SettingsDto settingsDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsApi->SettingsPutById");
            // verify the required parameter 'settingsDto' is set
            if (settingsDto == null)
                throw new ApiException(400, "Missing required parameter 'settingsDto' when calling SettingsApi->SettingsPutById");

            var localVarPath = "/odata/Settings('{Id}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (settingsDto != null && settingsDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settingsDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settingsDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Edits a setting. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>Task of SettingsDto</returns>
        public async System.Threading.Tasks.Task<SettingsDto> SettingsPutByIdAsync (string id, SettingsDto settingsDto)
        {
             ApiResponse<SettingsDto> localVarResponse = await SettingsPutByIdAsyncWithHttpInfo(id, settingsDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edits a setting. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="settingsDto">The entity to put</param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsPutByIdAsyncWithHttpInfo (string id, SettingsDto settingsDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsApi->SettingsPutById");
            // verify the required parameter 'settingsDto' is set
            if (settingsDto == null)
                throw new ApiException(400, "Missing required parameter 'settingsDto' when calling SettingsApi->SettingsPutById");

            var localVarPath = "/odata/Settings('{Id}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (settingsDto != null && settingsDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settingsDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settingsDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns></returns>
        public void SettingsSetCalendar (CalendarDto calendar)
        {
             SettingsSetCalendarWithHttpInfo(calendar);
        }

        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SettingsSetCalendarWithHttpInfo (CalendarDto calendar)
        {
            // verify the required parameter 'calendar' is set
            if (calendar == null)
                throw new ApiException(400, "Missing required parameter 'calendar' when calling SettingsApi->SettingsSetCalendar");

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.SetCalendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calendar != null && calendar.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(calendar); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calendar; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsSetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SettingsSetCalendarAsync (CalendarDto calendar)
        {
             await SettingsSetCalendarAsyncWithHttpInfo(calendar);

        }

        /// <summary>
        /// Sets custom calendar, with excluded dates in UTC, for current tenant Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calendar"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SettingsSetCalendarAsyncWithHttpInfo (CalendarDto calendar)
        {
            // verify the required parameter 'calendar' is set
            if (calendar == null)
                throw new ApiException(400, "Missing required parameter 'calendar' when calling SettingsApi->SettingsSetCalendar");

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.SetCalendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calendar != null && calendar.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(calendar); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calendar; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsSetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the current settings. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>SettingsDto</returns>
        public SettingsDto SettingsUpdateBulk (UpdateBulkParameters updateBulkParameters = null)
        {
             ApiResponse<SettingsDto> localVarResponse = SettingsUpdateBulkWithHttpInfo(updateBulkParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the current settings. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>ApiResponse of SettingsDto</returns>
        public ApiResponse< SettingsDto > SettingsUpdateBulkWithHttpInfo (UpdateBulkParameters updateBulkParameters = null)
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.UpdateBulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBulkParameters != null && updateBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsUpdateBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Updates the current settings. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>Task of SettingsDto</returns>
        public async System.Threading.Tasks.Task<SettingsDto> SettingsUpdateBulkAsync (UpdateBulkParameters updateBulkParameters = null)
        {
             ApiResponse<SettingsDto> localVarResponse = await SettingsUpdateBulkAsyncWithHttpInfo(updateBulkParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the current settings. Required permissions: Settings.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBulkParameters">Settings - The collection of settings to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (SettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsDto>> SettingsUpdateBulkAsyncWithHttpInfo (UpdateBulkParameters updateBulkParameters = null)
        {

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.UpdateBulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBulkParameters != null && updateBulkParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateBulkParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBulkParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsUpdateBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsDto)));
        }

        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request. Required permissions: License.Create or License.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns></returns>
        public void SettingsUploadLicense (System.IO.Stream file)
        {
             SettingsUploadLicenseWithHttpInfo(file);
        }

        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request. Required permissions: License.Create or License.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SettingsUploadLicenseWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SettingsApi->SettingsUploadLicense");

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.UploadLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsUploadLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request. Required permissions: License.Create or License.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SettingsUploadLicenseAsync (System.IO.Stream file)
        {
             await SettingsUploadLicenseAsyncWithHttpInfo(file);

        }

        /// <summary>
        /// Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request. Required permissions: License.Create or License.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SettingsUploadLicenseAsyncWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SettingsApi->SettingsUploadLicense");

            var localVarPath = "/odata/Settings/UiPath.Server.Configuration.OData.UploadLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SettingsUploadLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
