/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// ODataRawQueryOptions
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class ODataRawQueryOptions :  IEquatable<ODataRawQueryOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ODataRawQueryOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ODataRawQueryOptions()
        {
        }
        
        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="Filter", EmitDefaultValue=false)]
        public string Filter { get; private set; }

        /// <summary>
        /// Gets or Sets Apply
        /// </summary>
        [DataMember(Name="Apply", EmitDefaultValue=false)]
        public string Apply { get; private set; }

        /// <summary>
        /// Gets or Sets OrderBy
        /// </summary>
        [DataMember(Name="OrderBy", EmitDefaultValue=false)]
        public string OrderBy { get; private set; }

        /// <summary>
        /// Gets or Sets Top
        /// </summary>
        [DataMember(Name="Top", EmitDefaultValue=false)]
        public string Top { get; private set; }

        /// <summary>
        /// Gets or Sets Skip
        /// </summary>
        [DataMember(Name="Skip", EmitDefaultValue=false)]
        public string Skip { get; private set; }

        /// <summary>
        /// Gets or Sets Select
        /// </summary>
        [DataMember(Name="Select", EmitDefaultValue=false)]
        public string Select { get; private set; }

        /// <summary>
        /// Gets or Sets Expand
        /// </summary>
        [DataMember(Name="Expand", EmitDefaultValue=false)]
        public string Expand { get; private set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="Count", EmitDefaultValue=false)]
        public string Count { get; private set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="Format", EmitDefaultValue=false)]
        public string Format { get; private set; }

        /// <summary>
        /// Gets or Sets SkipToken
        /// </summary>
        [DataMember(Name="SkipToken", EmitDefaultValue=false)]
        public string SkipToken { get; private set; }

        /// <summary>
        /// Gets or Sets DeltaToken
        /// </summary>
        [DataMember(Name="DeltaToken", EmitDefaultValue=false)]
        public string DeltaToken { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ODataRawQueryOptions {\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Apply: ").Append(Apply).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Select: ").Append(Select).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  SkipToken: ").Append(SkipToken).Append("\n");
            sb.Append("  DeltaToken: ").Append(DeltaToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ODataRawQueryOptions);
        }

        /// <summary>
        /// Returns true if ODataRawQueryOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ODataRawQueryOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ODataRawQueryOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Apply == input.Apply ||
                    (this.Apply != null &&
                    this.Apply.Equals(input.Apply))
                ) && 
                (
                    this.OrderBy == input.OrderBy ||
                    (this.OrderBy != null &&
                    this.OrderBy.Equals(input.OrderBy))
                ) && 
                (
                    this.Top == input.Top ||
                    (this.Top != null &&
                    this.Top.Equals(input.Top))
                ) && 
                (
                    this.Skip == input.Skip ||
                    (this.Skip != null &&
                    this.Skip.Equals(input.Skip))
                ) && 
                (
                    this.Select == input.Select ||
                    (this.Select != null &&
                    this.Select.Equals(input.Select))
                ) && 
                (
                    this.Expand == input.Expand ||
                    (this.Expand != null &&
                    this.Expand.Equals(input.Expand))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.SkipToken == input.SkipToken ||
                    (this.SkipToken != null &&
                    this.SkipToken.Equals(input.SkipToken))
                ) && 
                (
                    this.DeltaToken == input.DeltaToken ||
                    (this.DeltaToken != null &&
                    this.DeltaToken.Equals(input.DeltaToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.Apply != null)
                    hashCode = hashCode * 59 + this.Apply.GetHashCode();
                if (this.OrderBy != null)
                    hashCode = hashCode * 59 + this.OrderBy.GetHashCode();
                if (this.Top != null)
                    hashCode = hashCode * 59 + this.Top.GetHashCode();
                if (this.Skip != null)
                    hashCode = hashCode * 59 + this.Skip.GetHashCode();
                if (this.Select != null)
                    hashCode = hashCode * 59 + this.Select.GetHashCode();
                if (this.Expand != null)
                    hashCode = hashCode * 59 + this.Expand.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.SkipToken != null)
                    hashCode = hashCode * 59 + this.SkipToken.GetHashCode();
                if (this.DeltaToken != null)
                    hashCode = hashCode * 59 + this.DeltaToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
