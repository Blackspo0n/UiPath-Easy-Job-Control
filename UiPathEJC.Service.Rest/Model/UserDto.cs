/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores information about assigned role(s) and email settings, and enables a person or a Robot to login to Orchestrator.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class UserDto :  IEquatable<UserDto>, IValidatableObject
    {
        /// <summary>
        /// The user type.
        /// </summary>
        /// <value>The user type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,
            
            /// <summary>
            /// Enum Robot for value: Robot
            /// </summary>
            [EnumMember(Value = "Robot")]
            Robot = 2
        }

        /// <summary>
        /// The user type.
        /// </summary>
        /// <value>The user type.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDto" /> class.
        /// </summary>
        /// <param name="Name">The name of the person for which the user is created..</param>
        /// <param name="Surname">The surname of the person for which the user is created..</param>
        /// <param name="UserName">The name used to login to Orchestrator..</param>
        /// <param name="Domain">The domain from which the user is imported.</param>
        /// <param name="FullName">The full name of the person constructed with the format Name Surname..</param>
        /// <param name="EmailAddress">The e-mail address associated with the user..</param>
        /// <param name="IsEmailConfirmed">States if the email address is valid or not..</param>
        /// <param name="LastLoginTime">The date and time when the user last logged in, or null if the user never logged in..</param>
        /// <param name="IsActive">States if the user is active or not. An inactive user cannot login to Orchestrator..</param>
        /// <param name="CreationTime">The date and time when the user was created..</param>
        /// <param name="AuthenticationSource">The source which authenticated this user..</param>
        /// <param name="Password">The password used during application login..</param>
        /// <param name="UserRoles">The collection of roles associated with the user..</param>
        /// <param name="RolesList">The collection of role names associated with the user..</param>
        /// <param name="LoginProviders">The collection of entities that can authenticate the user..</param>
        /// <param name="OrganizationUnits">The collection of organization units associated with the user..</param>
        /// <param name="TenantId">The id of the tenant owning the user..</param>
        /// <param name="TenancyName">The name of the tenant owning the user..</param>
        /// <param name="Type">The user type..</param>
        /// <param name="NotificationSubscription">User can choose which notifications does he want to receive.</param>
        /// <param name="Id">Id.</param>
        public UserDto(string Name = default(string), string Surname = default(string), string UserName = default(string), string Domain = default(string), string FullName = default(string), string EmailAddress = default(string), bool? IsEmailConfirmed = default(bool?), DateTime? LastLoginTime = default(DateTime?), bool? IsActive = default(bool?), DateTime? CreationTime = default(DateTime?), string AuthenticationSource = default(string), string Password = default(string), List<UserRoleDto> UserRoles = default(List<UserRoleDto>), List<string> RolesList = default(List<string>), List<string> LoginProviders = default(List<string>), List<OrganizationUnitDto> OrganizationUnits = default(List<OrganizationUnitDto>), int? TenantId = default(int?), string TenancyName = default(string), TypeEnum? Type = default(TypeEnum?), UserNotificationSubscription NotificationSubscription = default(UserNotificationSubscription), long? Id = default(long?))
        {
            this.Name = Name;
            this.Surname = Surname;
            this.UserName = UserName;
            this.Domain = Domain;
            this.FullName = FullName;
            this.EmailAddress = EmailAddress;
            this.IsEmailConfirmed = IsEmailConfirmed;
            this.LastLoginTime = LastLoginTime;
            this.IsActive = IsActive;
            this.CreationTime = CreationTime;
            this.AuthenticationSource = AuthenticationSource;
            this.Password = Password;
            this.UserRoles = UserRoles;
            this.RolesList = RolesList;
            this.LoginProviders = LoginProviders;
            this.OrganizationUnits = OrganizationUnits;
            this.TenantId = TenantId;
            this.TenancyName = TenancyName;
            this.Type = Type;
            this.NotificationSubscription = NotificationSubscription;
            this.Id = Id;
        }
        
        /// <summary>
        /// The name of the person for which the user is created.
        /// </summary>
        /// <value>The name of the person for which the user is created.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The surname of the person for which the user is created.
        /// </summary>
        /// <value>The surname of the person for which the user is created.</value>
        [DataMember(Name="Surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// The name used to login to Orchestrator.
        /// </summary>
        /// <value>The name used to login to Orchestrator.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// The domain from which the user is imported
        /// </summary>
        /// <value>The domain from which the user is imported</value>
        [DataMember(Name="Domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// The full name of the person constructed with the format Name Surname.
        /// </summary>
        /// <value>The full name of the person constructed with the format Name Surname.</value>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// The e-mail address associated with the user.
        /// </summary>
        /// <value>The e-mail address associated with the user.</value>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// States if the email address is valid or not.
        /// </summary>
        /// <value>States if the email address is valid or not.</value>
        [DataMember(Name="IsEmailConfirmed", EmitDefaultValue=false)]
        public bool? IsEmailConfirmed { get; set; }

        /// <summary>
        /// The date and time when the user last logged in, or null if the user never logged in.
        /// </summary>
        /// <value>The date and time when the user last logged in, or null if the user never logged in.</value>
        [DataMember(Name="LastLoginTime", EmitDefaultValue=false)]
        public DateTime? LastLoginTime { get; set; }

        /// <summary>
        /// States if the user is active or not. An inactive user cannot login to Orchestrator.
        /// </summary>
        /// <value>States if the user is active or not. An inactive user cannot login to Orchestrator.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// The date and time when the user was created.
        /// </summary>
        /// <value>The date and time when the user was created.</value>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// The source which authenticated this user.
        /// </summary>
        /// <value>The source which authenticated this user.</value>
        [DataMember(Name="AuthenticationSource", EmitDefaultValue=false)]
        public string AuthenticationSource { get; set; }

        /// <summary>
        /// The password used during application login.
        /// </summary>
        /// <value>The password used during application login.</value>
        [DataMember(Name="Password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// The collection of roles associated with the user.
        /// </summary>
        /// <value>The collection of roles associated with the user.</value>
        [DataMember(Name="UserRoles", EmitDefaultValue=false)]
        public List<UserRoleDto> UserRoles { get; set; }

        /// <summary>
        /// The collection of role names associated with the user.
        /// </summary>
        /// <value>The collection of role names associated with the user.</value>
        [DataMember(Name="RolesList", EmitDefaultValue=false)]
        public List<string> RolesList { get; set; }

        /// <summary>
        /// The collection of entities that can authenticate the user.
        /// </summary>
        /// <value>The collection of entities that can authenticate the user.</value>
        [DataMember(Name="LoginProviders", EmitDefaultValue=false)]
        public List<string> LoginProviders { get; set; }

        /// <summary>
        /// The collection of organization units associated with the user.
        /// </summary>
        /// <value>The collection of organization units associated with the user.</value>
        [DataMember(Name="OrganizationUnits", EmitDefaultValue=false)]
        public List<OrganizationUnitDto> OrganizationUnits { get; set; }

        /// <summary>
        /// The id of the tenant owning the user.
        /// </summary>
        /// <value>The id of the tenant owning the user.</value>
        [DataMember(Name="TenantId", EmitDefaultValue=false)]
        public int? TenantId { get; set; }

        /// <summary>
        /// The name of the tenant owning the user.
        /// </summary>
        /// <value>The name of the tenant owning the user.</value>
        [DataMember(Name="TenancyName", EmitDefaultValue=false)]
        public string TenancyName { get; set; }


        /// <summary>
        /// User can choose which notifications does he want to receive
        /// </summary>
        /// <value>User can choose which notifications does he want to receive</value>
        [DataMember(Name="NotificationSubscription", EmitDefaultValue=false)]
        public UserNotificationSubscription NotificationSubscription { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  IsEmailConfirmed: ").Append(IsEmailConfirmed).Append("\n");
            sb.Append("  LastLoginTime: ").Append(LastLoginTime).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  AuthenticationSource: ").Append(AuthenticationSource).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  UserRoles: ").Append(UserRoles).Append("\n");
            sb.Append("  RolesList: ").Append(RolesList).Append("\n");
            sb.Append("  LoginProviders: ").Append(LoginProviders).Append("\n");
            sb.Append("  OrganizationUnits: ").Append(OrganizationUnits).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TenancyName: ").Append(TenancyName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NotificationSubscription: ").Append(NotificationSubscription).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDto);
        }

        /// <summary>
        /// Returns true if UserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.IsEmailConfirmed == input.IsEmailConfirmed ||
                    (this.IsEmailConfirmed != null &&
                    this.IsEmailConfirmed.Equals(input.IsEmailConfirmed))
                ) && 
                (
                    this.LastLoginTime == input.LastLoginTime ||
                    (this.LastLoginTime != null &&
                    this.LastLoginTime.Equals(input.LastLoginTime))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.AuthenticationSource == input.AuthenticationSource ||
                    (this.AuthenticationSource != null &&
                    this.AuthenticationSource.Equals(input.AuthenticationSource))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.UserRoles == input.UserRoles ||
                    this.UserRoles != null &&
                    this.UserRoles.SequenceEqual(input.UserRoles)
                ) && 
                (
                    this.RolesList == input.RolesList ||
                    this.RolesList != null &&
                    this.RolesList.SequenceEqual(input.RolesList)
                ) && 
                (
                    this.LoginProviders == input.LoginProviders ||
                    this.LoginProviders != null &&
                    this.LoginProviders.SequenceEqual(input.LoginProviders)
                ) && 
                (
                    this.OrganizationUnits == input.OrganizationUnits ||
                    this.OrganizationUnits != null &&
                    this.OrganizationUnits.SequenceEqual(input.OrganizationUnits)
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.TenancyName == input.TenancyName ||
                    (this.TenancyName != null &&
                    this.TenancyName.Equals(input.TenancyName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NotificationSubscription == input.NotificationSubscription ||
                    (this.NotificationSubscription != null &&
                    this.NotificationSubscription.Equals(input.NotificationSubscription))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.IsEmailConfirmed != null)
                    hashCode = hashCode * 59 + this.IsEmailConfirmed.GetHashCode();
                if (this.LastLoginTime != null)
                    hashCode = hashCode * 59 + this.LastLoginTime.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.AuthenticationSource != null)
                    hashCode = hashCode * 59 + this.AuthenticationSource.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.UserRoles != null)
                    hashCode = hashCode * 59 + this.UserRoles.GetHashCode();
                if (this.RolesList != null)
                    hashCode = hashCode * 59 + this.RolesList.GetHashCode();
                if (this.LoginProviders != null)
                    hashCode = hashCode * 59 + this.LoginProviders.GetHashCode();
                if (this.OrganizationUnits != null)
                    hashCode = hashCode * 59 + this.OrganizationUnits.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.TenancyName != null)
                    hashCode = hashCode * 59 + this.TenancyName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NotificationSubscription != null)
                    hashCode = hashCode * 59 + this.NotificationSubscription.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 32.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            // Surname (string) maxLength
            if(this.Surname != null && this.Surname.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, length must be less than 32.", new [] { "Surname" });
            }

            // Surname (string) minLength
            if(this.Surname != null && this.Surname.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, length must be greater than 0.", new [] { "Surname" });
            }

            // EmailAddress (string) maxLength
            if(this.EmailAddress != null && this.EmailAddress.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 256.", new [] { "EmailAddress" });
            }

            // EmailAddress (string) minLength
            if(this.EmailAddress != null && this.EmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be greater than 0.", new [] { "EmailAddress" });
            }

            yield break;
        }
    }

}
