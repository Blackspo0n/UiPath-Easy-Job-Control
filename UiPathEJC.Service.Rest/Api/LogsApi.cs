/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Inserts a log entry with a specified message in JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns></returns>
        void LogsPost (Object jMessage);

        /// <summary>
        /// Inserts a log entry with a specified message in JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogsPostWithHttpInfo (Object jMessage);
        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>Object</returns>
        Object LogsSubmitLogs (List<string> logEntries);

        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LogsSubmitLogsWithHttpInfo (List<string> logEntries);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Inserts a log entry with a specified message in JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogsPostAsync (Object jMessage);

        /// <summary>
        /// Inserts a log entry with a specified message in JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogsPostAsyncWithHttpInfo (Object jMessage);
        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LogsSubmitLogsAsync (List<string> logEntries);

        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format.
        /// </summary>
        /// <remarks>
        /// Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogsSubmitLogsAsyncWithHttpInfo (List<string> logEntries);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogsApi : ILogsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Inserts a log entry with a specified message in JSON format. Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns></returns>
        public void LogsPost (Object jMessage)
        {
             LogsPostWithHttpInfo(jMessage);
        }

        /// <summary>
        /// Inserts a log entry with a specified message in JSON format. Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogsPostWithHttpInfo (Object jMessage)
        {
            // verify the required parameter 'jMessage' is set
            if (jMessage == null)
                throw new ApiException(400, "Missing required parameter 'jMessage' when calling LogsApi->LogsPost");

            var localVarPath = "/api/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jMessage != null && jMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(jMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jMessage; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Inserts a log entry with a specified message in JSON format. Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogsPostAsync (Object jMessage)
        {
             await LogsPostAsyncWithHttpInfo(jMessage);

        }

        /// <summary>
        /// Inserts a log entry with a specified message in JSON format. Required permissions: Logs.Create.    Example of jMessage parameter.                     {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jMessage"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogsPostAsyncWithHttpInfo (Object jMessage)
        {
            // verify the required parameter 'jMessage' is set
            if (jMessage == null)
                throw new ApiException(400, "Missing required parameter 'jMessage' when calling LogsApi->LogsPost");

            var localVarPath = "/api/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jMessage != null && jMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(jMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jMessage; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format. Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>Object</returns>
        public Object LogsSubmitLogs (List<string> logEntries)
        {
             ApiResponse<Object> localVarResponse = LogsSubmitLogsWithHttpInfo(logEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format. Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > LogsSubmitLogsWithHttpInfo (List<string> logEntries)
        {
            // verify the required parameter 'logEntries' is set
            if (logEntries == null)
                throw new ApiException(400, "Missing required parameter 'logEntries' when calling LogsApi->LogsSubmitLogs");

            var localVarPath = "/api/Logs/SubmitLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logEntries != null && logEntries.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(logEntries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logEntries; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogsSubmitLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format. Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LogsSubmitLogsAsync (List<string> logEntries)
        {
             ApiResponse<Object> localVarResponse = await LogsSubmitLogsAsyncWithHttpInfo(logEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inserts a collection of log entries, each in a specific JSON format. Required permissions: Logs.Create.    Example of log entry:       {           \&quot;message\&quot;: \&quot;TTT execution started\&quot;,           \&quot;level\&quot;: \&quot;Information\&quot;,           \&quot;timeStamp\&quot;: \&quot;2017-01-18T14:46:07.4152893+02:00\&quot;,           \&quot;windowsIdentity\&quot;: \&quot;DESKTOP-1L50L0P\\\\WindowsUser\&quot;,           \&quot;agentSessionId\&quot;: \&quot;00000000-0000-0000-0000-000000000000\&quot;,           \&quot;processName\&quot;: \&quot;TTT\&quot;,           \&quot;fileName\&quot;: \&quot;Main\&quot;,           \&quot;jobId\&quot;: \&quot;8066c309-cef8-4b47-9163-b273fc14cc43\&quot;       }
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logEntries">Collection of string representations of JSON objects</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogsSubmitLogsAsyncWithHttpInfo (List<string> logEntries)
        {
            // verify the required parameter 'logEntries' is set
            if (logEntries == null)
                throw new ApiException(400, "Missing required parameter 'logEntries' when calling LogsApi->LogsSubmitLogs");

            var localVarPath = "/api/Logs/SubmitLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logEntries != null && logEntries.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(logEntries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logEntries; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogsSubmitLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
