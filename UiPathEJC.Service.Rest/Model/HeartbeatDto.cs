/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// HeartbeatDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class HeartbeatDto :  IEquatable<HeartbeatDto>, IValidatableObject
    {
        /// <summary>
        /// Defines RobotState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RobotStateEnum
        {
            
            /// <summary>
            /// Enum Available for value: Available
            /// </summary>
            [EnumMember(Value = "Available")]
            Available = 1,
            
            /// <summary>
            /// Enum Busy for value: Busy
            /// </summary>
            [EnumMember(Value = "Busy")]
            Busy = 2,
            
            /// <summary>
            /// Enum Disconnected for value: Disconnected
            /// </summary>
            [EnumMember(Value = "Disconnected")]
            Disconnected = 3,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 4
        }

        /// <summary>
        /// Gets or Sets RobotState
        /// </summary>
        [DataMember(Name="robotState", EmitDefaultValue=false)]
        public RobotStateEnum? RobotState { get; set; }
        /// <summary>
        /// Defines JobState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JobStateEnum
        {
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,
            
            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 2,
            
            /// <summary>
            /// Enum Stopping for value: Stopping
            /// </summary>
            [EnumMember(Value = "Stopping")]
            Stopping = 3,
            
            /// <summary>
            /// Enum Terminating for value: Terminating
            /// </summary>
            [EnumMember(Value = "Terminating")]
            Terminating = 4,
            
            /// <summary>
            /// Enum Faulted for value: Faulted
            /// </summary>
            [EnumMember(Value = "Faulted")]
            Faulted = 5,
            
            /// <summary>
            /// Enum Successful for value: Successful
            /// </summary>
            [EnumMember(Value = "Successful")]
            Successful = 6,
            
            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 7
        }

        /// <summary>
        /// Gets or Sets JobState
        /// </summary>
        [DataMember(Name="jobState", EmitDefaultValue=false)]
        public JobStateEnum? JobState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeartbeatDto" /> class.
        /// </summary>
        /// <param name="RobotKey">RobotKey.</param>
        /// <param name="RobotState">RobotState.</param>
        /// <param name="JobState">JobState.</param>
        /// <param name="JobKey">JobKey.</param>
        /// <param name="ProcessKey">ProcessKey.</param>
        /// <param name="Info">Info.</param>
        /// <param name="OutputArguments">OutputArguments.</param>
        public HeartbeatDto(string RobotKey = default(string), RobotStateEnum? RobotState = default(RobotStateEnum?), JobStateEnum? JobState = default(JobStateEnum?), string JobKey = default(string), string ProcessKey = default(string), string Info = default(string), string OutputArguments = default(string))
        {
            this.RobotKey = RobotKey;
            this.RobotState = RobotState;
            this.JobState = JobState;
            this.JobKey = JobKey;
            this.ProcessKey = ProcessKey;
            this.Info = Info;
            this.OutputArguments = OutputArguments;
        }
        
        /// <summary>
        /// Gets or Sets RobotKey
        /// </summary>
        [DataMember(Name="robotKey", EmitDefaultValue=false)]
        public string RobotKey { get; set; }



        /// <summary>
        /// Gets or Sets JobKey
        /// </summary>
        [DataMember(Name="jobKey", EmitDefaultValue=false)]
        public string JobKey { get; set; }

        /// <summary>
        /// Gets or Sets ProcessKey
        /// </summary>
        [DataMember(Name="processKey", EmitDefaultValue=false)]
        public string ProcessKey { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public string Info { get; set; }

        /// <summary>
        /// Gets or Sets OutputArguments
        /// </summary>
        [DataMember(Name="outputArguments", EmitDefaultValue=false)]
        public string OutputArguments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HeartbeatDto {\n");
            sb.Append("  RobotKey: ").Append(RobotKey).Append("\n");
            sb.Append("  RobotState: ").Append(RobotState).Append("\n");
            sb.Append("  JobState: ").Append(JobState).Append("\n");
            sb.Append("  JobKey: ").Append(JobKey).Append("\n");
            sb.Append("  ProcessKey: ").Append(ProcessKey).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  OutputArguments: ").Append(OutputArguments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HeartbeatDto);
        }

        /// <summary>
        /// Returns true if HeartbeatDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HeartbeatDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeartbeatDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RobotKey == input.RobotKey ||
                    (this.RobotKey != null &&
                    this.RobotKey.Equals(input.RobotKey))
                ) && 
                (
                    this.RobotState == input.RobotState ||
                    (this.RobotState != null &&
                    this.RobotState.Equals(input.RobotState))
                ) && 
                (
                    this.JobState == input.JobState ||
                    (this.JobState != null &&
                    this.JobState.Equals(input.JobState))
                ) && 
                (
                    this.JobKey == input.JobKey ||
                    (this.JobKey != null &&
                    this.JobKey.Equals(input.JobKey))
                ) && 
                (
                    this.ProcessKey == input.ProcessKey ||
                    (this.ProcessKey != null &&
                    this.ProcessKey.Equals(input.ProcessKey))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.OutputArguments == input.OutputArguments ||
                    (this.OutputArguments != null &&
                    this.OutputArguments.Equals(input.OutputArguments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RobotKey != null)
                    hashCode = hashCode * 59 + this.RobotKey.GetHashCode();
                if (this.RobotState != null)
                    hashCode = hashCode * 59 + this.RobotState.GetHashCode();
                if (this.JobState != null)
                    hashCode = hashCode * 59 + this.JobState.GetHashCode();
                if (this.JobKey != null)
                    hashCode = hashCode * 59 + this.JobKey.GetHashCode();
                if (this.ProcessKey != null)
                    hashCode = hashCode * 59 + this.ProcessKey.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.OutputArguments != null)
                    hashCode = hashCode * 59 + this.OutputArguments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
