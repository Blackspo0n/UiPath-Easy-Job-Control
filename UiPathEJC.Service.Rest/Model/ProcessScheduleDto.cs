/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Defines the schedule of a process that can be executed at regular intervals, on selected Robots, all of them or a specified number of Robots.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class ProcessScheduleDto :  IEquatable<ProcessScheduleDto>, IValidatableObject
    {
        /// <summary>
        /// The way a running process is stopped.
        /// </summary>
        /// <value>The way a running process is stopped.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StopStrategyEnum
        {
            
            /// <summary>
            /// Enum SoftStop for value: SoftStop
            /// </summary>
            [EnumMember(Value = "SoftStop")]
            SoftStop = 1,
            
            /// <summary>
            /// Enum Kill for value: Kill
            /// </summary>
            [EnumMember(Value = "Kill")]
            Kill = 2
        }

        /// <summary>
        /// The way a running process is stopped.
        /// </summary>
        /// <value>The way a running process is stopped.</value>
        [DataMember(Name="StopStrategy", EmitDefaultValue=false)]
        public StopStrategyEnum? StopStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessScheduleDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessScheduleDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessScheduleDto" /> class.
        /// </summary>
        /// <param name="Enabled">Specifies if the schedule is active or not..</param>
        /// <param name="Name">The name of the schedule. (required).</param>
        /// <param name="ReleaseId">The Id of the process associated with the schedule..</param>
        /// <param name="ReleaseKey">The unique key of the process associated with the schedule..</param>
        /// <param name="ReleaseName">The name of the process associated with the schedule..</param>
        /// <param name="PackageName">The name of the package to be triggered with the schedule..</param>
        /// <param name="EnvironmentName">The name of the environment associated with the schedule..</param>
        /// <param name="EnvironmentId">The Id of the environment associated with the schedule..</param>
        /// <param name="StartProcessCron">The start cron expression of the schedule..</param>
        /// <param name="StartProcessCronDetails">Various details that can be associated to the time period expression of the schedule..</param>
        /// <param name="StartProcessCronSummary">Human readable form of cron expression of the schedule..</param>
        /// <param name="StartProcessNextOccurrence">The date and time when the associated process will be run next..</param>
        /// <param name="StartStrategy">States which robots from the environment are being run by the schedule..</param>
        /// <param name="ExecutorRobots">The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots)..</param>
        /// <param name="StopProcessExpression">The cron expression after which a running process will be stopped..</param>
        /// <param name="StopStrategy">The way a running process is stopped..</param>
        /// <param name="ExternalJobKey">The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule..</param>
        /// <param name="TimeZoneId">The timezone under which the schedule will run..</param>
        /// <param name="TimeZoneIana">The timezone under which the schedule will run in Iana Standard..</param>
        /// <param name="UseCalendar">Specify whether the schedule uses the bank holiday calendar.</param>
        /// <param name="StopProcessDate">StopProcessDate.</param>
        /// <param name="InputArguments">Input parameters that will be passed to each job created by this schedule..</param>
        /// <param name="Id">Id.</param>
        public ProcessScheduleDto(bool? Enabled = default(bool?), string Name = default(string), long? ReleaseId = default(long?), string ReleaseKey = default(string), string ReleaseName = default(string), string PackageName = default(string), string EnvironmentName = default(string), string EnvironmentId = default(string), string StartProcessCron = default(string), string StartProcessCronDetails = default(string), string StartProcessCronSummary = default(string), DateTime? StartProcessNextOccurrence = default(DateTime?), int? StartStrategy = default(int?), List<RobotExecutorDto> ExecutorRobots = default(List<RobotExecutorDto>), string StopProcessExpression = default(string), StopStrategyEnum? StopStrategy = default(StopStrategyEnum?), string ExternalJobKey = default(string), string TimeZoneId = default(string), string TimeZoneIana = default(string), bool? UseCalendar = default(bool?), DateTime? StopProcessDate = default(DateTime?), string InputArguments = default(string), long? Id = default(long?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ProcessScheduleDto and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Enabled = Enabled;
            this.ReleaseId = ReleaseId;
            this.ReleaseKey = ReleaseKey;
            this.ReleaseName = ReleaseName;
            this.PackageName = PackageName;
            this.EnvironmentName = EnvironmentName;
            this.EnvironmentId = EnvironmentId;
            this.StartProcessCron = StartProcessCron;
            this.StartProcessCronDetails = StartProcessCronDetails;
            this.StartProcessCronSummary = StartProcessCronSummary;
            this.StartProcessNextOccurrence = StartProcessNextOccurrence;
            this.StartStrategy = StartStrategy;
            this.ExecutorRobots = ExecutorRobots;
            this.StopProcessExpression = StopProcessExpression;
            this.StopStrategy = StopStrategy;
            this.ExternalJobKey = ExternalJobKey;
            this.TimeZoneId = TimeZoneId;
            this.TimeZoneIana = TimeZoneIana;
            this.UseCalendar = UseCalendar;
            this.StopProcessDate = StopProcessDate;
            this.InputArguments = InputArguments;
            this.Id = Id;
        }
        
        /// <summary>
        /// Specifies if the schedule is active or not.
        /// </summary>
        /// <value>Specifies if the schedule is active or not.</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The name of the schedule.
        /// </summary>
        /// <value>The name of the schedule.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The Id of the process associated with the schedule.
        /// </summary>
        /// <value>The Id of the process associated with the schedule.</value>
        [DataMember(Name="ReleaseId", EmitDefaultValue=false)]
        public long? ReleaseId { get; set; }

        /// <summary>
        /// The unique key of the process associated with the schedule.
        /// </summary>
        /// <value>The unique key of the process associated with the schedule.</value>
        [DataMember(Name="ReleaseKey", EmitDefaultValue=false)]
        public string ReleaseKey { get; set; }

        /// <summary>
        /// The name of the process associated with the schedule.
        /// </summary>
        /// <value>The name of the process associated with the schedule.</value>
        [DataMember(Name="ReleaseName", EmitDefaultValue=false)]
        public string ReleaseName { get; set; }

        /// <summary>
        /// The name of the package to be triggered with the schedule.
        /// </summary>
        /// <value>The name of the package to be triggered with the schedule.</value>
        [DataMember(Name="PackageName", EmitDefaultValue=false)]
        public string PackageName { get; set; }

        /// <summary>
        /// The name of the environment associated with the schedule.
        /// </summary>
        /// <value>The name of the environment associated with the schedule.</value>
        [DataMember(Name="EnvironmentName", EmitDefaultValue=false)]
        public string EnvironmentName { get; set; }

        /// <summary>
        /// The Id of the environment associated with the schedule.
        /// </summary>
        /// <value>The Id of the environment associated with the schedule.</value>
        [DataMember(Name="EnvironmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// The start cron expression of the schedule.
        /// </summary>
        /// <value>The start cron expression of the schedule.</value>
        [DataMember(Name="StartProcessCron", EmitDefaultValue=false)]
        public string StartProcessCron { get; set; }

        /// <summary>
        /// Various details that can be associated to the time period expression of the schedule.
        /// </summary>
        /// <value>Various details that can be associated to the time period expression of the schedule.</value>
        [DataMember(Name="StartProcessCronDetails", EmitDefaultValue=false)]
        public string StartProcessCronDetails { get; set; }

        /// <summary>
        /// Human readable form of cron expression of the schedule.
        /// </summary>
        /// <value>Human readable form of cron expression of the schedule.</value>
        [DataMember(Name="StartProcessCronSummary", EmitDefaultValue=false)]
        public string StartProcessCronSummary { get; set; }

        /// <summary>
        /// The date and time when the associated process will be run next.
        /// </summary>
        /// <value>The date and time when the associated process will be run next.</value>
        [DataMember(Name="StartProcessNextOccurrence", EmitDefaultValue=false)]
        public DateTime? StartProcessNextOccurrence { get; set; }

        /// <summary>
        /// States which robots from the environment are being run by the schedule.
        /// </summary>
        /// <value>States which robots from the environment are being run by the schedule.</value>
        [DataMember(Name="StartStrategy", EmitDefaultValue=false)]
        public int? StartStrategy { get; set; }

        /// <summary>
        /// The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).
        /// </summary>
        /// <value>The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).</value>
        [DataMember(Name="ExecutorRobots", EmitDefaultValue=false)]
        public List<RobotExecutorDto> ExecutorRobots { get; set; }

        /// <summary>
        /// The cron expression after which a running process will be stopped.
        /// </summary>
        /// <value>The cron expression after which a running process will be stopped.</value>
        [DataMember(Name="StopProcessExpression", EmitDefaultValue=false)]
        public string StopProcessExpression { get; set; }


        /// <summary>
        /// The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.
        /// </summary>
        /// <value>The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.</value>
        [DataMember(Name="ExternalJobKey", EmitDefaultValue=false)]
        public string ExternalJobKey { get; set; }

        /// <summary>
        /// The timezone under which the schedule will run.
        /// </summary>
        /// <value>The timezone under which the schedule will run.</value>
        [DataMember(Name="TimeZoneId", EmitDefaultValue=false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// The timezone under which the schedule will run in Iana Standard.
        /// </summary>
        /// <value>The timezone under which the schedule will run in Iana Standard.</value>
        [DataMember(Name="TimeZoneIana", EmitDefaultValue=false)]
        public string TimeZoneIana { get; set; }

        /// <summary>
        /// Specify whether the schedule uses the bank holiday calendar
        /// </summary>
        /// <value>Specify whether the schedule uses the bank holiday calendar</value>
        [DataMember(Name="UseCalendar", EmitDefaultValue=false)]
        public bool? UseCalendar { get; set; }

        /// <summary>
        /// Gets or Sets StopProcessDate
        /// </summary>
        [DataMember(Name="StopProcessDate", EmitDefaultValue=false)]
        public DateTime? StopProcessDate { get; set; }

        /// <summary>
        /// Input parameters that will be passed to each job created by this schedule.
        /// </summary>
        /// <value>Input parameters that will be passed to each job created by this schedule.</value>
        [DataMember(Name="InputArguments", EmitDefaultValue=false)]
        public string InputArguments { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessScheduleDto {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  ReleaseKey: ").Append(ReleaseKey).Append("\n");
            sb.Append("  ReleaseName: ").Append(ReleaseName).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  EnvironmentName: ").Append(EnvironmentName).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  StartProcessCron: ").Append(StartProcessCron).Append("\n");
            sb.Append("  StartProcessCronDetails: ").Append(StartProcessCronDetails).Append("\n");
            sb.Append("  StartProcessCronSummary: ").Append(StartProcessCronSummary).Append("\n");
            sb.Append("  StartProcessNextOccurrence: ").Append(StartProcessNextOccurrence).Append("\n");
            sb.Append("  StartStrategy: ").Append(StartStrategy).Append("\n");
            sb.Append("  ExecutorRobots: ").Append(ExecutorRobots).Append("\n");
            sb.Append("  StopProcessExpression: ").Append(StopProcessExpression).Append("\n");
            sb.Append("  StopStrategy: ").Append(StopStrategy).Append("\n");
            sb.Append("  ExternalJobKey: ").Append(ExternalJobKey).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  TimeZoneIana: ").Append(TimeZoneIana).Append("\n");
            sb.Append("  UseCalendar: ").Append(UseCalendar).Append("\n");
            sb.Append("  StopProcessDate: ").Append(StopProcessDate).Append("\n");
            sb.Append("  InputArguments: ").Append(InputArguments).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessScheduleDto);
        }

        /// <summary>
        /// Returns true if ProcessScheduleDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessScheduleDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessScheduleDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.ReleaseKey == input.ReleaseKey ||
                    (this.ReleaseKey != null &&
                    this.ReleaseKey.Equals(input.ReleaseKey))
                ) && 
                (
                    this.ReleaseName == input.ReleaseName ||
                    (this.ReleaseName != null &&
                    this.ReleaseName.Equals(input.ReleaseName))
                ) && 
                (
                    this.PackageName == input.PackageName ||
                    (this.PackageName != null &&
                    this.PackageName.Equals(input.PackageName))
                ) && 
                (
                    this.EnvironmentName == input.EnvironmentName ||
                    (this.EnvironmentName != null &&
                    this.EnvironmentName.Equals(input.EnvironmentName))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                ) && 
                (
                    this.StartProcessCron == input.StartProcessCron ||
                    (this.StartProcessCron != null &&
                    this.StartProcessCron.Equals(input.StartProcessCron))
                ) && 
                (
                    this.StartProcessCronDetails == input.StartProcessCronDetails ||
                    (this.StartProcessCronDetails != null &&
                    this.StartProcessCronDetails.Equals(input.StartProcessCronDetails))
                ) && 
                (
                    this.StartProcessCronSummary == input.StartProcessCronSummary ||
                    (this.StartProcessCronSummary != null &&
                    this.StartProcessCronSummary.Equals(input.StartProcessCronSummary))
                ) && 
                (
                    this.StartProcessNextOccurrence == input.StartProcessNextOccurrence ||
                    (this.StartProcessNextOccurrence != null &&
                    this.StartProcessNextOccurrence.Equals(input.StartProcessNextOccurrence))
                ) && 
                (
                    this.StartStrategy == input.StartStrategy ||
                    (this.StartStrategy != null &&
                    this.StartStrategy.Equals(input.StartStrategy))
                ) && 
                (
                    this.ExecutorRobots == input.ExecutorRobots ||
                    this.ExecutorRobots != null &&
                    this.ExecutorRobots.SequenceEqual(input.ExecutorRobots)
                ) && 
                (
                    this.StopProcessExpression == input.StopProcessExpression ||
                    (this.StopProcessExpression != null &&
                    this.StopProcessExpression.Equals(input.StopProcessExpression))
                ) && 
                (
                    this.StopStrategy == input.StopStrategy ||
                    (this.StopStrategy != null &&
                    this.StopStrategy.Equals(input.StopStrategy))
                ) && 
                (
                    this.ExternalJobKey == input.ExternalJobKey ||
                    (this.ExternalJobKey != null &&
                    this.ExternalJobKey.Equals(input.ExternalJobKey))
                ) && 
                (
                    this.TimeZoneId == input.TimeZoneId ||
                    (this.TimeZoneId != null &&
                    this.TimeZoneId.Equals(input.TimeZoneId))
                ) && 
                (
                    this.TimeZoneIana == input.TimeZoneIana ||
                    (this.TimeZoneIana != null &&
                    this.TimeZoneIana.Equals(input.TimeZoneIana))
                ) && 
                (
                    this.UseCalendar == input.UseCalendar ||
                    (this.UseCalendar != null &&
                    this.UseCalendar.Equals(input.UseCalendar))
                ) && 
                (
                    this.StopProcessDate == input.StopProcessDate ||
                    (this.StopProcessDate != null &&
                    this.StopProcessDate.Equals(input.StopProcessDate))
                ) && 
                (
                    this.InputArguments == input.InputArguments ||
                    (this.InputArguments != null &&
                    this.InputArguments.Equals(input.InputArguments))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.ReleaseKey != null)
                    hashCode = hashCode * 59 + this.ReleaseKey.GetHashCode();
                if (this.ReleaseName != null)
                    hashCode = hashCode * 59 + this.ReleaseName.GetHashCode();
                if (this.PackageName != null)
                    hashCode = hashCode * 59 + this.PackageName.GetHashCode();
                if (this.EnvironmentName != null)
                    hashCode = hashCode * 59 + this.EnvironmentName.GetHashCode();
                if (this.EnvironmentId != null)
                    hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                if (this.StartProcessCron != null)
                    hashCode = hashCode * 59 + this.StartProcessCron.GetHashCode();
                if (this.StartProcessCronDetails != null)
                    hashCode = hashCode * 59 + this.StartProcessCronDetails.GetHashCode();
                if (this.StartProcessCronSummary != null)
                    hashCode = hashCode * 59 + this.StartProcessCronSummary.GetHashCode();
                if (this.StartProcessNextOccurrence != null)
                    hashCode = hashCode * 59 + this.StartProcessNextOccurrence.GetHashCode();
                if (this.StartStrategy != null)
                    hashCode = hashCode * 59 + this.StartStrategy.GetHashCode();
                if (this.ExecutorRobots != null)
                    hashCode = hashCode * 59 + this.ExecutorRobots.GetHashCode();
                if (this.StopProcessExpression != null)
                    hashCode = hashCode * 59 + this.StopProcessExpression.GetHashCode();
                if (this.StopStrategy != null)
                    hashCode = hashCode * 59 + this.StopStrategy.GetHashCode();
                if (this.ExternalJobKey != null)
                    hashCode = hashCode * 59 + this.ExternalJobKey.GetHashCode();
                if (this.TimeZoneId != null)
                    hashCode = hashCode * 59 + this.TimeZoneId.GetHashCode();
                if (this.TimeZoneIana != null)
                    hashCode = hashCode * 59 + this.TimeZoneIana.GetHashCode();
                if (this.UseCalendar != null)
                    hashCode = hashCode * 59 + this.UseCalendar.GetHashCode();
                if (this.StopProcessDate != null)
                    hashCode = hashCode * 59 + this.StopProcessDate.GetHashCode();
                if (this.InputArguments != null)
                    hashCode = hashCode * 59 + this.InputArguments.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
