/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores information about a named-user license (attended/development).
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class LicenseNamedUserDto :  IEquatable<LicenseNamedUserDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseNamedUserDto" /> class.
        /// </summary>
        /// <param name="Key">The license key..</param>
        /// <param name="UserName">The Robot&#39;s UserName..</param>
        /// <param name="LastLoginDate">The last date when the Robot acquired a license..</param>
        /// <param name="MachinesCount">Total number of machines where a robot with UserName is defined..</param>
        /// <param name="IsLicensed">If the license is in use..</param>
        /// <param name="ActiveRobotId">The Id of the Robot that uses the license..</param>
        /// <param name="MachineNames">The Machine names of the defined Robot..</param>
        /// <param name="ActiveMachineNames">The Machine names of the connected and licensed Robot..</param>
        public LicenseNamedUserDto(string Key = default(string), string UserName = default(string), DateTime? LastLoginDate = default(DateTime?), int? MachinesCount = default(int?), bool? IsLicensed = default(bool?), long? ActiveRobotId = default(long?), List<string> MachineNames = default(List<string>), List<string> ActiveMachineNames = default(List<string>))
        {
            this.Key = Key;
            this.UserName = UserName;
            this.LastLoginDate = LastLoginDate;
            this.MachinesCount = MachinesCount;
            this.IsLicensed = IsLicensed;
            this.ActiveRobotId = ActiveRobotId;
            this.MachineNames = MachineNames;
            this.ActiveMachineNames = ActiveMachineNames;
        }
        
        /// <summary>
        /// The license key.
        /// </summary>
        /// <value>The license key.</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The Robot&#39;s UserName.
        /// </summary>
        /// <value>The Robot&#39;s UserName.</value>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// The last date when the Robot acquired a license.
        /// </summary>
        /// <value>The last date when the Robot acquired a license.</value>
        [DataMember(Name="LastLoginDate", EmitDefaultValue=false)]
        public DateTime? LastLoginDate { get; set; }

        /// <summary>
        /// Total number of machines where a robot with UserName is defined.
        /// </summary>
        /// <value>Total number of machines where a robot with UserName is defined.</value>
        [DataMember(Name="MachinesCount", EmitDefaultValue=false)]
        public int? MachinesCount { get; set; }

        /// <summary>
        /// If the license is in use.
        /// </summary>
        /// <value>If the license is in use.</value>
        [DataMember(Name="IsLicensed", EmitDefaultValue=false)]
        public bool? IsLicensed { get; set; }

        /// <summary>
        /// The Id of the Robot that uses the license.
        /// </summary>
        /// <value>The Id of the Robot that uses the license.</value>
        [DataMember(Name="ActiveRobotId", EmitDefaultValue=false)]
        public long? ActiveRobotId { get; set; }

        /// <summary>
        /// The Machine names of the defined Robot.
        /// </summary>
        /// <value>The Machine names of the defined Robot.</value>
        [DataMember(Name="MachineNames", EmitDefaultValue=false)]
        public List<string> MachineNames { get; set; }

        /// <summary>
        /// The Machine names of the connected and licensed Robot.
        /// </summary>
        /// <value>The Machine names of the connected and licensed Robot.</value>
        [DataMember(Name="ActiveMachineNames", EmitDefaultValue=false)]
        public List<string> ActiveMachineNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseNamedUserDto {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  LastLoginDate: ").Append(LastLoginDate).Append("\n");
            sb.Append("  MachinesCount: ").Append(MachinesCount).Append("\n");
            sb.Append("  IsLicensed: ").Append(IsLicensed).Append("\n");
            sb.Append("  ActiveRobotId: ").Append(ActiveRobotId).Append("\n");
            sb.Append("  MachineNames: ").Append(MachineNames).Append("\n");
            sb.Append("  ActiveMachineNames: ").Append(ActiveMachineNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseNamedUserDto);
        }

        /// <summary>
        /// Returns true if LicenseNamedUserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseNamedUserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseNamedUserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.LastLoginDate == input.LastLoginDate ||
                    (this.LastLoginDate != null &&
                    this.LastLoginDate.Equals(input.LastLoginDate))
                ) && 
                (
                    this.MachinesCount == input.MachinesCount ||
                    (this.MachinesCount != null &&
                    this.MachinesCount.Equals(input.MachinesCount))
                ) && 
                (
                    this.IsLicensed == input.IsLicensed ||
                    (this.IsLicensed != null &&
                    this.IsLicensed.Equals(input.IsLicensed))
                ) && 
                (
                    this.ActiveRobotId == input.ActiveRobotId ||
                    (this.ActiveRobotId != null &&
                    this.ActiveRobotId.Equals(input.ActiveRobotId))
                ) && 
                (
                    this.MachineNames == input.MachineNames ||
                    this.MachineNames != null &&
                    this.MachineNames.SequenceEqual(input.MachineNames)
                ) && 
                (
                    this.ActiveMachineNames == input.ActiveMachineNames ||
                    this.ActiveMachineNames != null &&
                    this.ActiveMachineNames.SequenceEqual(input.ActiveMachineNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.LastLoginDate != null)
                    hashCode = hashCode * 59 + this.LastLoginDate.GetHashCode();
                if (this.MachinesCount != null)
                    hashCode = hashCode * 59 + this.MachinesCount.GetHashCode();
                if (this.IsLicensed != null)
                    hashCode = hashCode * 59 + this.IsLicensed.GetHashCode();
                if (this.ActiveRobotId != null)
                    hashCode = hashCode * 59 + this.ActiveRobotId.GetHashCode();
                if (this.MachineNames != null)
                    hashCode = hashCode * 59 + this.MachineNames.GetHashCode();
                if (this.ActiveMachineNames != null)
                    hashCode = hashCode * 59 + this.ActiveMachineNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
