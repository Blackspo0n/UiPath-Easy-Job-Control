/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRobotsServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acquire a license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns></returns>
        void RobotsServiceAcquireLicense (RobotIdentifier identifier);

        /// <summary>
        /// Acquire a license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RobotsServiceAcquireLicenseWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Begins a front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>RobotDetailsDto</returns>
        RobotDetailsDto RobotsServiceBeginSession (RobotIdentifier identifier);

        /// <summary>
        /// Begins a front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of RobotDetailsDto</returns>
        ApiResponse<RobotDetailsDto> RobotsServiceBeginSessionWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Ends the front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns></returns>
        void RobotsServiceEndSession (RobotIdentifier identifier);

        /// <summary>
        /// Ends the front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RobotsServiceEndSessionWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>List&lt;PublishedProcess&gt;</returns>
        List<PublishedProcess> RobotsServiceGetAssociatedProcesses (string robotKey);

        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>ApiResponse of List&lt;PublishedProcess&gt;</returns>
        ApiResponse<List<PublishedProcess>> RobotsServiceGetAssociatedProcessesWithHttpInfo (string robotKey);
        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment).
        /// </summary>
        /// <remarks>
        /// This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>ConnectionData</returns>
        ConnectionData RobotsServiceGetConnectionData (int? tenantId, string domainName = null);

        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment).
        /// </summary>
        /// <remarks>
        /// This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>ApiResponse of ConnectionData</returns>
        ApiResponse<ConnectionData> RobotsServiceGetConnectionDataWithHttpInfo (int? tenantId, string domainName = null);
        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>List&lt;PublishedProcess&gt;</returns>
        List<PublishedProcess> RobotsServiceGetProcesses (RobotIdentifier identifier);

        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of List&lt;PublishedProcess&gt;</returns>
        ApiResponse<List<PublishedProcess>> RobotsServiceGetProcessesWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>List&lt;RobotDetailsDto&gt;</returns>
        List<RobotDetailsDto> RobotsServiceGetRobotMappings (string licenseKey, string machineName);

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>ApiResponse of List&lt;RobotDetailsDto&gt;</returns>
        ApiResponse<List<RobotDetailsDto>> RobotsServiceGetRobotMappingsWithHttpInfo (string licenseKey, string machineName);
        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>HeartbeatResponse</returns>
        HeartbeatResponse RobotsServiceHeartbeat (HeartbeatPayload payload);

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of HeartbeatResponse</returns>
        ApiResponse<HeartbeatResponse> RobotsServiceHeartbeatWithHttpInfo (HeartbeatPayload payload);
        /// <summary>
        /// Release active license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns></returns>
        void RobotsServiceReleaseLicense (RobotIdentifier identifier);

        /// <summary>
        /// Release active license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RobotsServiceReleaseLicenseWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>RobotServiceResponse</returns>
        RobotServiceResponse RobotsServiceStartService (RobotServicePayload payload);

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of RobotServiceResponse</returns>
        ApiResponse<RobotServiceResponse> RobotsServiceStartServiceWithHttpInfo (RobotServicePayload payload);
        /// <summary>
        /// Called by RobotSvc to disconnect all Robots.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns></returns>
        void RobotsServiceStopService (HeartbeatPayload payload);

        /// <summary>
        /// Called by RobotSvc to disconnect all Robots.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RobotsServiceStopServiceWithHttpInfo (HeartbeatPayload payload);
        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>List&lt;RobotCommand&gt;</returns>
        List<RobotCommand> RobotsServiceSubmitHeartbeat (List<HeartbeatDto> hbts);

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>ApiResponse of List&lt;RobotCommand&gt;</returns>
        ApiResponse<List<RobotCommand>> RobotsServiceSubmitHeartbeatWithHttpInfo (List<HeartbeatDto> hbts);
        /// <summary>
        /// Post to the server a heartbeat collection with jobs information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns></returns>
        void RobotsServiceSubmitJobState (List<HeartbeatDto> heartbeats);

        /// <summary>
        /// Post to the server a heartbeat collection with jobs information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RobotsServiceSubmitJobStateWithHttpInfo (List<HeartbeatDto> heartbeats);
        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns></returns>
        void RobotsServiceUploadScreenshot (System.IO.Stream file, string robotKey, string jobKey);

        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RobotsServiceUploadScreenshotWithHttpInfo (System.IO.Stream file, string robotKey, string jobKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Acquire a license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RobotsServiceAcquireLicenseAsync (RobotIdentifier identifier);

        /// <summary>
        /// Acquire a license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceAcquireLicenseAsyncWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Begins a front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of RobotDetailsDto</returns>
        System.Threading.Tasks.Task<RobotDetailsDto> RobotsServiceBeginSessionAsync (RobotIdentifier identifier);

        /// <summary>
        /// Begins a front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (RobotDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotDetailsDto>> RobotsServiceBeginSessionAsyncWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Ends the front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RobotsServiceEndSessionAsync (RobotIdentifier identifier);

        /// <summary>
        /// Ends the front-office session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceEndSessionAsyncWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>Task of List&lt;PublishedProcess&gt;</returns>
        System.Threading.Tasks.Task<List<PublishedProcess>> RobotsServiceGetAssociatedProcessesAsync (string robotKey);

        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>Task of ApiResponse (List&lt;PublishedProcess&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublishedProcess>>> RobotsServiceGetAssociatedProcessesAsyncWithHttpInfo (string robotKey);
        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment).
        /// </summary>
        /// <remarks>
        /// This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>Task of ConnectionData</returns>
        System.Threading.Tasks.Task<ConnectionData> RobotsServiceGetConnectionDataAsync (int? tenantId, string domainName = null);

        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment).
        /// </summary>
        /// <remarks>
        /// This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>Task of ApiResponse (ConnectionData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionData>> RobotsServiceGetConnectionDataAsyncWithHttpInfo (int? tenantId, string domainName = null);
        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of List&lt;PublishedProcess&gt;</returns>
        System.Threading.Tasks.Task<List<PublishedProcess>> RobotsServiceGetProcessesAsync (RobotIdentifier identifier);

        /// <summary>
        /// Gets from the server all the processes associated with a Robot.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the processes associated with a Robot
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (List&lt;PublishedProcess&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublishedProcess>>> RobotsServiceGetProcessesAsyncWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>Task of List&lt;RobotDetailsDto&gt;</returns>
        System.Threading.Tasks.Task<List<RobotDetailsDto>> RobotsServiceGetRobotMappingsAsync (string licenseKey, string machineName);

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>Task of ApiResponse (List&lt;RobotDetailsDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RobotDetailsDto>>> RobotsServiceGetRobotMappingsAsyncWithHttpInfo (string licenseKey, string machineName);
        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of HeartbeatResponse</returns>
        System.Threading.Tasks.Task<HeartbeatResponse> RobotsServiceHeartbeatAsync (HeartbeatPayload payload);

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (HeartbeatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HeartbeatResponse>> RobotsServiceHeartbeatAsyncWithHttpInfo (HeartbeatPayload payload);
        /// <summary>
        /// Release active license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RobotsServiceReleaseLicenseAsync (RobotIdentifier identifier);

        /// <summary>
        /// Release active license.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceReleaseLicenseAsyncWithHttpInfo (RobotIdentifier identifier);
        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of RobotServiceResponse</returns>
        System.Threading.Tasks.Task<RobotServiceResponse> RobotsServiceStartServiceAsync (RobotServicePayload payload);

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName.
        /// </summary>
        /// <remarks>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (RobotServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotServiceResponse>> RobotsServiceStartServiceAsyncWithHttpInfo (RobotServicePayload payload);
        /// <summary>
        /// Called by RobotSvc to disconnect all Robots.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RobotsServiceStopServiceAsync (HeartbeatPayload payload);

        /// <summary>
        /// Called by RobotSvc to disconnect all Robots.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceStopServiceAsyncWithHttpInfo (HeartbeatPayload payload);
        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>Task of List&lt;RobotCommand&gt;</returns>
        System.Threading.Tasks.Task<List<RobotCommand>> RobotsServiceSubmitHeartbeatAsync (List<HeartbeatDto> hbts);

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>Task of ApiResponse (List&lt;RobotCommand&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RobotCommand>>> RobotsServiceSubmitHeartbeatAsyncWithHttpInfo (List<HeartbeatDto> hbts);
        /// <summary>
        /// Post to the server a heartbeat collection with jobs information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RobotsServiceSubmitJobStateAsync (List<HeartbeatDto> heartbeats);

        /// <summary>
        /// Post to the server a heartbeat collection with jobs information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceSubmitJobStateAsyncWithHttpInfo (List<HeartbeatDto> heartbeats);
        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RobotsServiceUploadScreenshotAsync (System.IO.Stream file, string robotKey, string jobKey);

        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceUploadScreenshotAsyncWithHttpInfo (System.IO.Stream file, string robotKey, string jobKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RobotsServiceApi : IRobotsServiceApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RobotsServiceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RobotsServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Acquire a license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns></returns>
        public void RobotsServiceAcquireLicense (RobotIdentifier identifier)
        {
             RobotsServiceAcquireLicenseWithHttpInfo(identifier);
        }

        /// <summary>
        /// Acquire a license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RobotsServiceAcquireLicenseWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceAcquireLicense");

            var localVarPath = "/api/RobotsService/AcquireLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceAcquireLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Acquire a license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RobotsServiceAcquireLicenseAsync (RobotIdentifier identifier)
        {
             await RobotsServiceAcquireLicenseAsyncWithHttpInfo(identifier);

        }

        /// <summary>
        /// Acquire a license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceAcquireLicenseAsyncWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceAcquireLicense");

            var localVarPath = "/api/RobotsService/AcquireLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceAcquireLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Begins a front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>RobotDetailsDto</returns>
        public RobotDetailsDto RobotsServiceBeginSession (RobotIdentifier identifier)
        {
             ApiResponse<RobotDetailsDto> localVarResponse = RobotsServiceBeginSessionWithHttpInfo(identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begins a front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of RobotDetailsDto</returns>
        public ApiResponse< RobotDetailsDto > RobotsServiceBeginSessionWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceBeginSession");

            var localVarPath = "/api/RobotsService/BeginSession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceBeginSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotDetailsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotDetailsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotDetailsDto)));
        }

        /// <summary>
        /// Begins a front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of RobotDetailsDto</returns>
        public async System.Threading.Tasks.Task<RobotDetailsDto> RobotsServiceBeginSessionAsync (RobotIdentifier identifier)
        {
             ApiResponse<RobotDetailsDto> localVarResponse = await RobotsServiceBeginSessionAsyncWithHttpInfo(identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begins a front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (RobotDetailsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RobotDetailsDto>> RobotsServiceBeginSessionAsyncWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceBeginSession");

            var localVarPath = "/api/RobotsService/BeginSession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceBeginSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotDetailsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotDetailsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotDetailsDto)));
        }

        /// <summary>
        /// Ends the front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns></returns>
        public void RobotsServiceEndSession (RobotIdentifier identifier)
        {
             RobotsServiceEndSessionWithHttpInfo(identifier);
        }

        /// <summary>
        /// Ends the front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RobotsServiceEndSessionWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceEndSession");

            var localVarPath = "/api/RobotsService/EndSession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceEndSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Ends the front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RobotsServiceEndSessionAsync (RobotIdentifier identifier)
        {
             await RobotsServiceEndSessionAsyncWithHttpInfo(identifier);

        }

        /// <summary>
        /// Ends the front-office session. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceEndSessionAsyncWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceEndSession");

            var localVarPath = "/api/RobotsService/EndSession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceEndSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>List&lt;PublishedProcess&gt;</returns>
        public List<PublishedProcess> RobotsServiceGetAssociatedProcesses (string robotKey)
        {
             ApiResponse<List<PublishedProcess>> localVarResponse = RobotsServiceGetAssociatedProcessesWithHttpInfo(robotKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>ApiResponse of List&lt;PublishedProcess&gt;</returns>
        public ApiResponse< List<PublishedProcess> > RobotsServiceGetAssociatedProcessesWithHttpInfo (string robotKey)
        {
            // verify the required parameter 'robotKey' is set
            if (robotKey == null)
                throw new ApiException(400, "Missing required parameter 'robotKey' when calling RobotsServiceApi->RobotsServiceGetAssociatedProcesses");

            var localVarPath = "/api/RobotsService/GetAssociatedProcesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "robotKey", robotKey)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetAssociatedProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublishedProcess>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublishedProcess>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublishedProcess>)));
        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>Task of List&lt;PublishedProcess&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublishedProcess>> RobotsServiceGetAssociatedProcessesAsync (string robotKey)
        {
             ApiResponse<List<PublishedProcess>> localVarResponse = await RobotsServiceGetAssociatedProcessesAsyncWithHttpInfo(robotKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. DEPRECATED. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="robotKey">The unique key identifying the Robot.</param>
        /// <returns>Task of ApiResponse (List&lt;PublishedProcess&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PublishedProcess>>> RobotsServiceGetAssociatedProcessesAsyncWithHttpInfo (string robotKey)
        {
            // verify the required parameter 'robotKey' is set
            if (robotKey == null)
                throw new ApiException(400, "Missing required parameter 'robotKey' when calling RobotsServiceApi->RobotsServiceGetAssociatedProcesses");

            var localVarPath = "/api/RobotsService/GetAssociatedProcesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (robotKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "robotKey", robotKey)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetAssociatedProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublishedProcess>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublishedProcess>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublishedProcess>)));
        }

        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment). This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>ConnectionData</returns>
        public ConnectionData RobotsServiceGetConnectionData (int? tenantId, string domainName = null)
        {
             ApiResponse<ConnectionData> localVarResponse = RobotsServiceGetConnectionDataWithHttpInfo(tenantId, domainName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment). This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>ApiResponse of ConnectionData</returns>
        public ApiResponse< ConnectionData > RobotsServiceGetConnectionDataWithHttpInfo (int? tenantId, string domainName = null)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling RobotsServiceApi->RobotsServiceGetConnectionData");

            var localVarPath = "/api/RobotsService/GetConnectionData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (domainName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "domainName", domainName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetConnectionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionData)));
        }

        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment). This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>Task of ConnectionData</returns>
        public async System.Threading.Tasks.Task<ConnectionData> RobotsServiceGetConnectionDataAsync (int? tenantId, string domainName = null)
        {
             ApiResponse<ConnectionData> localVarResponse = await RobotsServiceGetConnectionDataAsyncWithHttpInfo(tenantId, domainName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment). This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection              info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the              same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned              in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The tenant under which already defined robots are searched for.</param>
        /// <param name="domainName">Domain name for the machine where robot is installed. If it&#39;s not provided, we&#39;ll use the one specified in web.config (optional)</param>
        /// <returns>Task of ApiResponse (ConnectionData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectionData>> RobotsServiceGetConnectionDataAsyncWithHttpInfo (int? tenantId, string domainName = null)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling RobotsServiceApi->RobotsServiceGetConnectionData");

            var localVarPath = "/api/RobotsService/GetConnectionData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (domainName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "domainName", domainName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetConnectionData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionData)));
        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>List&lt;PublishedProcess&gt;</returns>
        public List<PublishedProcess> RobotsServiceGetProcesses (RobotIdentifier identifier)
        {
             ApiResponse<List<PublishedProcess>> localVarResponse = RobotsServiceGetProcessesWithHttpInfo(identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of List&lt;PublishedProcess&gt;</returns>
        public ApiResponse< List<PublishedProcess> > RobotsServiceGetProcessesWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceGetProcesses");

            var localVarPath = "/api/RobotsService/GetProcesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublishedProcess>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublishedProcess>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublishedProcess>)));
        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of List&lt;PublishedProcess&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublishedProcess>> RobotsServiceGetProcessesAsync (RobotIdentifier identifier)
        {
             ApiResponse<List<PublishedProcess>> localVarResponse = await RobotsServiceGetProcessesAsyncWithHttpInfo(identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets from the server all the processes associated with a Robot. Gets from the server all the processes associated with a Robot
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (List&lt;PublishedProcess&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PublishedProcess>>> RobotsServiceGetProcessesAsyncWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceGetProcesses");

            var localVarPath = "/api/RobotsService/GetProcesses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublishedProcess>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublishedProcess>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublishedProcess>)));
        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>List&lt;RobotDetailsDto&gt;</returns>
        public List<RobotDetailsDto> RobotsServiceGetRobotMappings (string licenseKey, string machineName)
        {
             ApiResponse<List<RobotDetailsDto>> localVarResponse = RobotsServiceGetRobotMappingsWithHttpInfo(licenseKey, machineName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>ApiResponse of List&lt;RobotDetailsDto&gt;</returns>
        public ApiResponse< List<RobotDetailsDto> > RobotsServiceGetRobotMappingsWithHttpInfo (string licenseKey, string machineName)
        {
            // verify the required parameter 'licenseKey' is set
            if (licenseKey == null)
                throw new ApiException(400, "Missing required parameter 'licenseKey' when calling RobotsServiceApi->RobotsServiceGetRobotMappings");
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling RobotsServiceApi->RobotsServiceGetRobotMappings");

            var localVarPath = "/api/RobotsService/GetRobotMappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (licenseKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseKey", licenseKey)); // query parameter
            if (machineName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "machineName", machineName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetRobotMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RobotDetailsDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RobotDetailsDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RobotDetailsDto>)));
        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>Task of List&lt;RobotDetailsDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<RobotDetailsDto>> RobotsServiceGetRobotMappingsAsync (string licenseKey, string machineName)
        {
             ApiResponse<List<RobotDetailsDto>> localVarResponse = await RobotsServiceGetRobotMappingsAsyncWithHttpInfo(licenseKey, machineName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="licenseKey">The licenseKey that the returned Robots must have.</param>
        /// <param name="machineName">The name of the Machine that the returned Robots must be associated with</param>
        /// <returns>Task of ApiResponse (List&lt;RobotDetailsDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RobotDetailsDto>>> RobotsServiceGetRobotMappingsAsyncWithHttpInfo (string licenseKey, string machineName)
        {
            // verify the required parameter 'licenseKey' is set
            if (licenseKey == null)
                throw new ApiException(400, "Missing required parameter 'licenseKey' when calling RobotsServiceApi->RobotsServiceGetRobotMappings");
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling RobotsServiceApi->RobotsServiceGetRobotMappings");

            var localVarPath = "/api/RobotsService/GetRobotMappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (licenseKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseKey", licenseKey)); // query parameter
            if (machineName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "machineName", machineName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceGetRobotMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RobotDetailsDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RobotDetailsDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RobotDetailsDto>)));
        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>HeartbeatResponse</returns>
        public HeartbeatResponse RobotsServiceHeartbeat (HeartbeatPayload payload)
        {
             ApiResponse<HeartbeatResponse> localVarResponse = RobotsServiceHeartbeatWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of HeartbeatResponse</returns>
        public ApiResponse< HeartbeatResponse > RobotsServiceHeartbeatWithHttpInfo (HeartbeatPayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RobotsServiceApi->RobotsServiceHeartbeat");

            var localVarPath = "/api/RobotsService/Heartbeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceHeartbeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HeartbeatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HeartbeatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HeartbeatResponse)));
        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of HeartbeatResponse</returns>
        public async System.Threading.Tasks.Task<HeartbeatResponse> RobotsServiceHeartbeatAsync (HeartbeatPayload payload)
        {
             ApiResponse<HeartbeatResponse> localVarResponse = await RobotsServiceHeartbeatAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (HeartbeatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HeartbeatResponse>> RobotsServiceHeartbeatAsyncWithHttpInfo (HeartbeatPayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RobotsServiceApi->RobotsServiceHeartbeat");

            var localVarPath = "/api/RobotsService/Heartbeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceHeartbeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HeartbeatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HeartbeatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HeartbeatResponse)));
        }

        /// <summary>
        /// Release active license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns></returns>
        public void RobotsServiceReleaseLicense (RobotIdentifier identifier)
        {
             RobotsServiceReleaseLicenseWithHttpInfo(identifier);
        }

        /// <summary>
        /// Release active license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RobotsServiceReleaseLicenseWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceReleaseLicense");

            var localVarPath = "/api/RobotsService/ReleaseLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceReleaseLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Release active license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RobotsServiceReleaseLicenseAsync (RobotIdentifier identifier)
        {
             await RobotsServiceReleaseLicenseAsyncWithHttpInfo(identifier);

        }

        /// <summary>
        /// Release active license. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceReleaseLicenseAsyncWithHttpInfo (RobotIdentifier identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling RobotsServiceApi->RobotsServiceReleaseLicense");

            var localVarPath = "/api/RobotsService/ReleaseLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null && identifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(identifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identifier; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceReleaseLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName. Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>RobotServiceResponse</returns>
        public RobotServiceResponse RobotsServiceStartService (RobotServicePayload payload)
        {
             ApiResponse<RobotServiceResponse> localVarResponse = RobotsServiceStartServiceWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName. Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of RobotServiceResponse</returns>
        public ApiResponse< RobotServiceResponse > RobotsServiceStartServiceWithHttpInfo (RobotServicePayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RobotsServiceApi->RobotsServiceStartService");

            var localVarPath = "/api/RobotsService/StartService";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceStartService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotServiceResponse)));
        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName. Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of RobotServiceResponse</returns>
        public async System.Threading.Tasks.Task<RobotServiceResponse> RobotsServiceStartServiceAsync (RobotServicePayload payload)
        {
             ApiResponse<RobotServiceResponse> localVarResponse = await RobotsServiceStartServiceAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets from the server all the Robots associated with a Machine and having the specified licenseKey.  If the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName. Gets from the server all the Robots associated with a Machine and having the specified licenseKey.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (RobotServiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RobotServiceResponse>> RobotsServiceStartServiceAsyncWithHttpInfo (RobotServicePayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RobotsServiceApi->RobotsServiceStartService");

            var localVarPath = "/api/RobotsService/StartService";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceStartService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RobotServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RobotServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RobotServiceResponse)));
        }

        /// <summary>
        /// Called by RobotSvc to disconnect all Robots. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns></returns>
        public void RobotsServiceStopService (HeartbeatPayload payload)
        {
             RobotsServiceStopServiceWithHttpInfo(payload);
        }

        /// <summary>
        /// Called by RobotSvc to disconnect all Robots. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RobotsServiceStopServiceWithHttpInfo (HeartbeatPayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RobotsServiceApi->RobotsServiceStopService");

            var localVarPath = "/api/RobotsService/StopService";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceStopService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Called by RobotSvc to disconnect all Robots. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RobotsServiceStopServiceAsync (HeartbeatPayload payload)
        {
             await RobotsServiceStopServiceAsyncWithHttpInfo(payload);

        }

        /// <summary>
        /// Called by RobotSvc to disconnect all Robots. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceStopServiceAsyncWithHttpInfo (HeartbeatPayload payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RobotsServiceApi->RobotsServiceStopService");

            var localVarPath = "/api/RobotsService/StopService";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceStopService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>List&lt;RobotCommand&gt;</returns>
        public List<RobotCommand> RobotsServiceSubmitHeartbeat (List<HeartbeatDto> hbts)
        {
             ApiResponse<List<RobotCommand>> localVarResponse = RobotsServiceSubmitHeartbeatWithHttpInfo(hbts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>ApiResponse of List&lt;RobotCommand&gt;</returns>
        public ApiResponse< List<RobotCommand> > RobotsServiceSubmitHeartbeatWithHttpInfo (List<HeartbeatDto> hbts)
        {
            // verify the required parameter 'hbts' is set
            if (hbts == null)
                throw new ApiException(400, "Missing required parameter 'hbts' when calling RobotsServiceApi->RobotsServiceSubmitHeartbeat");

            var localVarPath = "/api/RobotsService/SubmitHeartbeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hbts != null && hbts.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hbts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hbts; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceSubmitHeartbeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RobotCommand>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RobotCommand>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RobotCommand>)));
        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>Task of List&lt;RobotCommand&gt;</returns>
        public async System.Threading.Tasks.Task<List<RobotCommand>> RobotsServiceSubmitHeartbeatAsync (List<HeartbeatDto> hbts)
        {
             ApiResponse<List<RobotCommand>> localVarResponse = await RobotsServiceSubmitHeartbeatAsyncWithHttpInfo(hbts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post to the server a collection of heartbeat messages generated by the Robots from a Machine Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).  The response is a collection of commands specific to all robots defined on that Machine, including the ones that were added in the meanwhile.  DEPRECATED. Used for Robots with version lower or equal to 18.2
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hbts"></param>
        /// <returns>Task of ApiResponse (List&lt;RobotCommand&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RobotCommand>>> RobotsServiceSubmitHeartbeatAsyncWithHttpInfo (List<HeartbeatDto> hbts)
        {
            // verify the required parameter 'hbts' is set
            if (hbts == null)
                throw new ApiException(400, "Missing required parameter 'hbts' when calling RobotsServiceApi->RobotsServiceSubmitHeartbeat");

            var localVarPath = "/api/RobotsService/SubmitHeartbeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hbts != null && hbts.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hbts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hbts; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceSubmitHeartbeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RobotCommand>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RobotCommand>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RobotCommand>)));
        }

        /// <summary>
        /// Post to the server a heartbeat collection with jobs information 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns></returns>
        public void RobotsServiceSubmitJobState (List<HeartbeatDto> heartbeats)
        {
             RobotsServiceSubmitJobStateWithHttpInfo(heartbeats);
        }

        /// <summary>
        /// Post to the server a heartbeat collection with jobs information 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RobotsServiceSubmitJobStateWithHttpInfo (List<HeartbeatDto> heartbeats)
        {
            // verify the required parameter 'heartbeats' is set
            if (heartbeats == null)
                throw new ApiException(400, "Missing required parameter 'heartbeats' when calling RobotsServiceApi->RobotsServiceSubmitJobState");

            var localVarPath = "/api/RobotsService/SubmitJobState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (heartbeats != null && heartbeats.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(heartbeats); // http body (model) parameter
            }
            else
            {
                localVarPostBody = heartbeats; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceSubmitJobState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Post to the server a heartbeat collection with jobs information 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RobotsServiceSubmitJobStateAsync (List<HeartbeatDto> heartbeats)
        {
             await RobotsServiceSubmitJobStateAsyncWithHttpInfo(heartbeats);

        }

        /// <summary>
        /// Post to the server a heartbeat collection with jobs information 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceSubmitJobStateAsyncWithHttpInfo (List<HeartbeatDto> heartbeats)
        {
            // verify the required parameter 'heartbeats' is set
            if (heartbeats == null)
                throw new ApiException(400, "Missing required parameter 'heartbeats' when calling RobotsServiceApi->RobotsServiceSubmitJobState");

            var localVarPath = "/api/RobotsService/SubmitJobState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (heartbeats != null && heartbeats.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(heartbeats); // http body (model) parameter
            }
            else
            {
                localVarPostBody = heartbeats; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceSubmitJobState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns></returns>
        public void RobotsServiceUploadScreenshot (System.IO.Stream file, string robotKey, string jobKey)
        {
             RobotsServiceUploadScreenshotWithHttpInfo(file, robotKey, jobKey);
        }

        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RobotsServiceUploadScreenshotWithHttpInfo (System.IO.Stream file, string robotKey, string jobKey)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling RobotsServiceApi->RobotsServiceUploadScreenshot");
            // verify the required parameter 'robotKey' is set
            if (robotKey == null)
                throw new ApiException(400, "Missing required parameter 'robotKey' when calling RobotsServiceApi->RobotsServiceUploadScreenshot");
            // verify the required parameter 'jobKey' is set
            if (jobKey == null)
                throw new ApiException(400, "Missing required parameter 'jobKey' when calling RobotsServiceApi->RobotsServiceUploadScreenshot");

            var localVarPath = "/api/RobotsService/UploadScreenshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (robotKey != null) localVarFormParams.Add("robotKey", Configuration.ApiClient.ParameterToString(robotKey)); // form parameter
            if (jobKey != null) localVarFormParams.Add("jobKey", Configuration.ApiClient.ParameterToString(jobKey)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceUploadScreenshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RobotsServiceUploadScreenshotAsync (System.IO.Stream file, string robotKey, string jobKey)
        {
             await RobotsServiceUploadScreenshotAsyncWithHttpInfo(file, robotKey, jobKey);

        }

        /// <summary>
        /// Uploads a screenshot for the given jobKey and robotKey. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="robotKey"></param>
        /// <param name="jobKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RobotsServiceUploadScreenshotAsyncWithHttpInfo (System.IO.Stream file, string robotKey, string jobKey)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling RobotsServiceApi->RobotsServiceUploadScreenshot");
            // verify the required parameter 'robotKey' is set
            if (robotKey == null)
                throw new ApiException(400, "Missing required parameter 'robotKey' when calling RobotsServiceApi->RobotsServiceUploadScreenshot");
            // verify the required parameter 'jobKey' is set
            if (jobKey == null)
                throw new ApiException(400, "Missing required parameter 'jobKey' when calling RobotsServiceApi->RobotsServiceUploadScreenshot");

            var localVarPath = "/api/RobotsService/UploadScreenshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (robotKey != null) localVarFormParams.Add("robotKey", Configuration.ApiClient.ParameterToString(robotKey)); // form parameter
            if (jobKey != null) localVarFormParams.Add("jobKey", Configuration.ApiClient.ParameterToString(jobKey)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RobotsServiceUploadScreenshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
