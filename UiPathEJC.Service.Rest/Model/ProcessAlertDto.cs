/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// ProcessAlertDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class ProcessAlertDto :  IEquatable<ProcessAlertDto>, IValidatableObject
    {
        /// <summary>
        /// Defines Severity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 1,
            
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 2,
            
            /// <summary>
            /// Enum Warn for value: Warn
            /// </summary>
            [EnumMember(Value = "Warn")]
            Warn = 3,
            
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 4,
            
            /// <summary>
            /// Enum Fatal for value: Fatal
            /// </summary>
            [EnumMember(Value = "Fatal")]
            Fatal = 5
        }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="Severity", EmitDefaultValue=false)]
        public SeverityEnum Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessAlertDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessAlertDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessAlertDto" /> class.
        /// </summary>
        /// <param name="Message">Message (required).</param>
        /// <param name="Severity">Severity (required).</param>
        /// <param name="RobotName">RobotName (required).</param>
        /// <param name="ProcessName">ProcessName (required).</param>
        /// <param name="Id">Id.</param>
        public ProcessAlertDto(string Message = default(string), SeverityEnum Severity = default(SeverityEnum), string RobotName = default(string), string ProcessName = default(string), Guid? Id = default(Guid?))
        {
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for ProcessAlertDto and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "Severity" is required (not null)
            if (Severity == null)
            {
                throw new InvalidDataException("Severity is a required property for ProcessAlertDto and cannot be null");
            }
            else
            {
                this.Severity = Severity;
            }
            // to ensure "RobotName" is required (not null)
            if (RobotName == null)
            {
                throw new InvalidDataException("RobotName is a required property for ProcessAlertDto and cannot be null");
            }
            else
            {
                this.RobotName = RobotName;
            }
            // to ensure "ProcessName" is required (not null)
            if (ProcessName == null)
            {
                throw new InvalidDataException("ProcessName is a required property for ProcessAlertDto and cannot be null");
            }
            else
            {
                this.ProcessName = ProcessName;
            }
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }


        /// <summary>
        /// Gets or Sets RobotName
        /// </summary>
        [DataMember(Name="RobotName", EmitDefaultValue=false)]
        public string RobotName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name="ProcessName", EmitDefaultValue=false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessAlertDto {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  RobotName: ").Append(RobotName).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessAlertDto);
        }

        /// <summary>
        /// Returns true if ProcessAlertDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessAlertDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessAlertDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.RobotName == input.RobotName ||
                    (this.RobotName != null &&
                    this.RobotName.Equals(input.RobotName))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.RobotName != null)
                    hashCode = hashCode * 59 + this.RobotName.GetHashCode();
                if (this.ProcessName != null)
                    hashCode = hashCode * 59 + this.ProcessName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 512.", new [] { "Message" });
            }

            // Message (string) minLength
            if(this.Message != null && this.Message.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be greater than 0.", new [] { "Message" });
            }

            // RobotName (string) maxLength
            if(this.RobotName != null && this.RobotName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RobotName, length must be less than 512.", new [] { "RobotName" });
            }

            // RobotName (string) minLength
            if(this.RobotName != null && this.RobotName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RobotName, length must be greater than 0.", new [] { "RobotName" });
            }

            // ProcessName (string) maxLength
            if(this.ProcessName != null && this.ProcessName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessName, length must be less than 512.", new [] { "ProcessName" });
            }

            // ProcessName (string) minLength
            if(this.ProcessName != null && this.ProcessName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProcessName, length must be greater than 0.", new [] { "ProcessName" });
            }

            yield break;
        }
    }

}
