/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator
        /// </summary>
        /// <remarks>
        /// Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CountStats&gt;</returns>
        List<CountStats> StatsGetCountStats ();

        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator
        /// </summary>
        /// <remarks>
        /// Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CountStats&gt;</returns>
        ApiResponse<List<CountStats>> StatsGetCountStatsWithHttpInfo ();
        /// <summary>
        /// Gets the total number of jobs aggregated by Job State
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CountStats&gt;</returns>
        List<CountStats> StatsGetJobsStats ();

        /// <summary>
        /// Gets the total number of jobs aggregated by Job State
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CountStats&gt;</returns>
        ApiResponse<List<CountStats>> StatsGetJobsStatsWithHttpInfo ();
        /// <summary>
        /// Gets the licensing usage statistics
        /// </summary>
        /// <remarks>
        /// Required permissions: License.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>List&lt;LicenseStatsModel&gt;</returns>
        List<LicenseStatsModel> StatsGetLicenseStats (int? tenantId, int? days);

        /// <summary>
        /// Gets the licensing usage statistics
        /// </summary>
        /// <remarks>
        /// Required permissions: License.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>ApiResponse of List&lt;LicenseStatsModel&gt;</returns>
        ApiResponse<List<LicenseStatsModel>> StatsGetLicenseStatsWithHttpInfo (int? tenantId, int? days);
        /// <summary>
        /// Gets the total number of robots aggregated by Robot State
        /// </summary>
        /// <remarks>
        /// Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CountStats&gt;</returns>
        List<CountStats> StatsGetSessionsStats ();

        /// <summary>
        /// Gets the total number of robots aggregated by Robot State
        /// </summary>
        /// <remarks>
        /// Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CountStats&gt;</returns>
        ApiResponse<List<CountStats>> StatsGetSessionsStatsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator
        /// </summary>
        /// <remarks>
        /// Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CountStats&gt;</returns>
        System.Threading.Tasks.Task<List<CountStats>> StatsGetCountStatsAsync ();

        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator
        /// </summary>
        /// <remarks>
        /// Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CountStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountStats>>> StatsGetCountStatsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the total number of jobs aggregated by Job State
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CountStats&gt;</returns>
        System.Threading.Tasks.Task<List<CountStats>> StatsGetJobsStatsAsync ();

        /// <summary>
        /// Gets the total number of jobs aggregated by Job State
        /// </summary>
        /// <remarks>
        /// Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CountStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountStats>>> StatsGetJobsStatsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the licensing usage statistics
        /// </summary>
        /// <remarks>
        /// Required permissions: License.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>Task of List&lt;LicenseStatsModel&gt;</returns>
        System.Threading.Tasks.Task<List<LicenseStatsModel>> StatsGetLicenseStatsAsync (int? tenantId, int? days);

        /// <summary>
        /// Gets the licensing usage statistics
        /// </summary>
        /// <remarks>
        /// Required permissions: License.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>Task of ApiResponse (List&lt;LicenseStatsModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LicenseStatsModel>>> StatsGetLicenseStatsAsyncWithHttpInfo (int? tenantId, int? days);
        /// <summary>
        /// Gets the total number of robots aggregated by Robot State
        /// </summary>
        /// <remarks>
        /// Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CountStats&gt;</returns>
        System.Threading.Tasks.Task<List<CountStats>> StatsGetSessionsStatsAsync ();

        /// <summary>
        /// Gets the total number of robots aggregated by Robot State
        /// </summary>
        /// <remarks>
        /// Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CountStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountStats>>> StatsGetSessionsStatsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsApi : IStatsApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CountStats&gt;</returns>
        public List<CountStats> StatsGetCountStats ()
        {
             ApiResponse<List<CountStats>> localVarResponse = StatsGetCountStatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CountStats&gt;</returns>
        public ApiResponse< List<CountStats> > StatsGetCountStatsWithHttpInfo ()
        {

            var localVarPath = "/api/Stats/GetCountStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetCountStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountStats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountStats>)));
        }

        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CountStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountStats>> StatsGetCountStatsAsync ()
        {
             ApiResponse<List<CountStats>> localVarResponse = await StatsGetCountStatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the total number of various entities registered in Orchestrator Requires authentication.    Returns the name and the total number of entities registered in Orchestrator for a set of entities.  All the counted entity types can be seen in the result below.       [             {               \&quot;title\&quot;: \&quot;Processes\&quot;,               \&quot;count\&quot;: 1             },             {               \&quot;title\&quot;: \&quot;Assets\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Queues\&quot;,               \&quot;count\&quot;: 0             },             {               \&quot;title\&quot;: \&quot;Schedules\&quot;,               \&quot;count\&quot;: 0             }       ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CountStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CountStats>>> StatsGetCountStatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Stats/GetCountStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetCountStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountStats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountStats>)));
        }

        /// <summary>
        /// Gets the total number of jobs aggregated by Job State Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CountStats&gt;</returns>
        public List<CountStats> StatsGetJobsStats ()
        {
             ApiResponse<List<CountStats>> localVarResponse = StatsGetJobsStatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total number of jobs aggregated by Job State Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CountStats&gt;</returns>
        public ApiResponse< List<CountStats> > StatsGetJobsStatsWithHttpInfo ()
        {

            var localVarPath = "/api/Stats/GetJobsStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetJobsStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountStats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountStats>)));
        }

        /// <summary>
        /// Gets the total number of jobs aggregated by Job State Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CountStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountStats>> StatsGetJobsStatsAsync ()
        {
             ApiResponse<List<CountStats>> localVarResponse = await StatsGetJobsStatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the total number of jobs aggregated by Job State Required permissions: Jobs.View.    Returns the total number of Successful, Faulted and Canceled jobs respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Successful\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Faulted\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Canceled\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CountStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CountStats>>> StatsGetJobsStatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Stats/GetJobsStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetJobsStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountStats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountStats>)));
        }

        /// <summary>
        /// Gets the licensing usage statistics Required permissions: License.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>List&lt;LicenseStatsModel&gt;</returns>
        public List<LicenseStatsModel> StatsGetLicenseStats (int? tenantId, int? days)
        {
             ApiResponse<List<LicenseStatsModel>> localVarResponse = StatsGetLicenseStatsWithHttpInfo(tenantId, days);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the licensing usage statistics Required permissions: License.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>ApiResponse of List&lt;LicenseStatsModel&gt;</returns>
        public ApiResponse< List<LicenseStatsModel> > StatsGetLicenseStatsWithHttpInfo (int? tenantId, int? days)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling StatsApi->StatsGetLicenseStats");
            // verify the required parameter 'days' is set
            if (days == null)
                throw new ApiException(400, "Missing required parameter 'days' when calling StatsApi->StatsGetLicenseStats");

            var localVarPath = "/api/Stats/GetLicenseStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (days != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetLicenseStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LicenseStatsModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LicenseStatsModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LicenseStatsModel>)));
        }

        /// <summary>
        /// Gets the licensing usage statistics Required permissions: License.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>Task of List&lt;LicenseStatsModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LicenseStatsModel>> StatsGetLicenseStatsAsync (int? tenantId, int? days)
        {
             ApiResponse<List<LicenseStatsModel>> localVarResponse = await StatsGetLicenseStatsAsyncWithHttpInfo(tenantId, days);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the licensing usage statistics Required permissions: License.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">The Tenant&#39;s Id - can be used when authenticated as Host</param>
        /// <param name="days">Number of reported license usage days</param>
        /// <returns>Task of ApiResponse (List&lt;LicenseStatsModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LicenseStatsModel>>> StatsGetLicenseStatsAsyncWithHttpInfo (int? tenantId, int? days)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new ApiException(400, "Missing required parameter 'tenantId' when calling StatsApi->StatsGetLicenseStats");
            // verify the required parameter 'days' is set
            if (days == null)
                throw new ApiException(400, "Missing required parameter 'days' when calling StatsApi->StatsGetLicenseStats");

            var localVarPath = "/api/Stats/GetLicenseStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (days != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetLicenseStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LicenseStatsModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LicenseStatsModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LicenseStatsModel>)));
        }

        /// <summary>
        /// Gets the total number of robots aggregated by Robot State Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CountStats&gt;</returns>
        public List<CountStats> StatsGetSessionsStats ()
        {
             ApiResponse<List<CountStats>> localVarResponse = StatsGetSessionsStatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total number of robots aggregated by Robot State Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CountStats&gt;</returns>
        public ApiResponse< List<CountStats> > StatsGetSessionsStatsWithHttpInfo ()
        {

            var localVarPath = "/api/Stats/GetSessionsStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetSessionsStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountStats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountStats>)));
        }

        /// <summary>
        /// Gets the total number of robots aggregated by Robot State Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CountStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountStats>> StatsGetSessionsStatsAsync ()
        {
             ApiResponse<List<CountStats>> localVarResponse = await StatsGetSessionsStatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the total number of robots aggregated by Robot State Required permissions: Robots.View.    Returns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.  Example of returned result:      [            {              \&quot;title\&quot;: \&quot;Available\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Busy\&quot;,              \&quot;count\&quot;: 0            },            {              \&quot;title\&quot;: \&quot;Disconnected\&quot;,              \&quot;count\&quot;: 1            },            {              \&quot;title\&quot;: \&quot;Unresponsive\&quot;,              \&quot;count\&quot;: 0            }      ]
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CountStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CountStats>>> StatsGetSessionsStatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Stats/GetSessionsStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetSessionsStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountStats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountStats>)));
        }

    }
}
