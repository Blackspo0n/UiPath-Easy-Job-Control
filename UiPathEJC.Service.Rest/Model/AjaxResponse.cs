/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// AjaxResponse
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class AjaxResponse :  IEquatable<AjaxResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AjaxResponse" /> class.
        /// </summary>
        /// <param name="Result">Result.</param>
        /// <param name="TargetUrl">TargetUrl.</param>
        /// <param name="Success">Success.</param>
        /// <param name="Error">Error.</param>
        /// <param name="UnAuthorizedRequest">UnAuthorizedRequest.</param>
        public AjaxResponse(Object Result = default(Object), string TargetUrl = default(string), bool? Success = default(bool?), ErrorInfo Error = default(ErrorInfo), bool? UnAuthorizedRequest = default(bool?))
        {
            this.Result = Result;
            this.TargetUrl = TargetUrl;
            this.Success = Success;
            this.Error = Error;
            this.UnAuthorizedRequest = UnAuthorizedRequest;
        }
        
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Object Result { get; set; }

        /// <summary>
        /// Gets or Sets TargetUrl
        /// </summary>
        [DataMember(Name="targetUrl", EmitDefaultValue=false)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ErrorInfo Error { get; set; }

        /// <summary>
        /// Gets or Sets UnAuthorizedRequest
        /// </summary>
        [DataMember(Name="unAuthorizedRequest", EmitDefaultValue=false)]
        public bool? UnAuthorizedRequest { get; set; }

        /// <summary>
        /// Gets or Sets Abp
        /// </summary>
        [DataMember(Name="__abp", EmitDefaultValue=false)]
        public bool? Abp { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AjaxResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  UnAuthorizedRequest: ").Append(UnAuthorizedRequest).Append("\n");
            sb.Append("  Abp: ").Append(Abp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AjaxResponse);
        }

        /// <summary>
        /// Returns true if AjaxResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AjaxResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AjaxResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.TargetUrl == input.TargetUrl ||
                    (this.TargetUrl != null &&
                    this.TargetUrl.Equals(input.TargetUrl))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.UnAuthorizedRequest == input.UnAuthorizedRequest ||
                    (this.UnAuthorizedRequest != null &&
                    this.UnAuthorizedRequest.Equals(input.UnAuthorizedRequest))
                ) && 
                (
                    this.Abp == input.Abp ||
                    (this.Abp != null &&
                    this.Abp.Equals(input.Abp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.TargetUrl != null)
                    hashCode = hashCode * 59 + this.TargetUrl.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.UnAuthorizedRequest != null)
                    hashCode = hashCode * 59 + this.UnAuthorizedRequest.GetHashCode();
                if (this.Abp != null)
                    hashCode = hashCode * 59 + this.Abp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
