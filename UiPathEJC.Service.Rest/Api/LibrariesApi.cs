/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibrariesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a package.
        /// </summary>
        /// <remarks>
        /// Host only. Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void LibrariesDeleteById (string id, string ifMatch = null);

        /// <summary>
        /// Deletes a package.
        /// </summary>
        /// <remarks>
        /// Host only. Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LibrariesDeleteByIdWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Downloads the .nupkg file of a Package.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream LibrariesDownloadPackageByKey (string key);

        /// <summary>
        /// Downloads the .nupkg file of a Package.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> LibrariesDownloadPackageByKeyWithHttpInfo (string key);
        /// <summary>
        /// Gets the library packages.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListLibraryDto</returns>
        ODataResponseListLibraryDto LibrariesGetLibraries (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets the library packages.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListLibraryDto</returns>
        ApiResponse<ODataResponseListLibraryDto> LibrariesGetLibrariesWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListLibraryDto</returns>
        ODataResponseListLibraryDto LibrariesGetVersionsByPackageid (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListLibraryDto</returns>
        ApiResponse<ODataResponseListLibraryDto> LibrariesGetVersionsByPackageidWithHttpInfo (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns></returns>
        void LibrariesUploadPackage (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null);

        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LibrariesUploadPackageWithHttpInfo (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a package.
        /// </summary>
        /// <remarks>
        /// Host only. Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LibrariesDeleteByIdAsync (string id, string ifMatch = null);

        /// <summary>
        /// Deletes a package.
        /// </summary>
        /// <remarks>
        /// Host only. Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LibrariesDeleteByIdAsyncWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Downloads the .nupkg file of a Package.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> LibrariesDownloadPackageByKeyAsync (string key);

        /// <summary>
        /// Downloads the .nupkg file of a Package.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> LibrariesDownloadPackageByKeyAsyncWithHttpInfo (string key);
        /// <summary>
        /// Gets the library packages.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListLibraryDto</returns>
        System.Threading.Tasks.Task<ODataResponseListLibraryDto> LibrariesGetLibrariesAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets the library packages.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListLibraryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListLibraryDto>> LibrariesGetLibrariesAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListLibraryDto</returns>
        System.Threading.Tasks.Task<ODataResponseListLibraryDto> LibrariesGetVersionsByPackageidAsync (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListLibraryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListLibraryDto>> LibrariesGetVersionsByPackageidAsyncWithHttpInfo (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LibrariesUploadPackageAsync (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null);

        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.
        /// </summary>
        /// <remarks>
        /// Required permissions: Libraries.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LibrariesUploadPackageAsyncWithHttpInfo (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LibrariesApi : ILibrariesApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibrariesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibrariesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a package. Host only. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void LibrariesDeleteById (string id, string ifMatch = null)
        {
             LibrariesDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes a package. Host only. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LibrariesDeleteByIdWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->LibrariesDeleteById");

            var localVarPath = "/odata/Libraries('{Id}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a package. Host only. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LibrariesDeleteByIdAsync (string id, string ifMatch = null)
        {
             await LibrariesDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes a package. Host only. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LibrariesDeleteByIdAsyncWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->LibrariesDeleteById");

            var localVarPath = "/odata/Libraries('{Id}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Downloads the .nupkg file of a Package. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream LibrariesDownloadPackageByKey (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = LibrariesDownloadPackageByKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads the .nupkg file of a Package. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > LibrariesDownloadPackageByKeyWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling LibrariesApi->LibrariesDownloadPackageByKey");

            var localVarPath = "/odata/Libraries/UiPath.Server.Configuration.OData.DownloadPackage(key='{key}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/file"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesDownloadPackageByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Downloads the .nupkg file of a Package. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> LibrariesDownloadPackageByKeyAsync (string key)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await LibrariesDownloadPackageByKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads the .nupkg file of a Package. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> LibrariesDownloadPackageByKeyAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling LibrariesApi->LibrariesDownloadPackageByKey");

            var localVarPath = "/odata/Libraries/UiPath.Server.Configuration.OData.DownloadPackage(key='{key}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/file"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesDownloadPackageByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the library packages. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListLibraryDto</returns>
        public ODataResponseListLibraryDto LibrariesGetLibraries (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListLibraryDto> localVarResponse = LibrariesGetLibrariesWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the library packages. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListLibraryDto</returns>
        public ApiResponse< ODataResponseListLibraryDto > LibrariesGetLibrariesWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Libraries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesGetLibraries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListLibraryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListLibraryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListLibraryDto)));
        }

        /// <summary>
        /// Gets the library packages. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListLibraryDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListLibraryDto> LibrariesGetLibrariesAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListLibraryDto> localVarResponse = await LibrariesGetLibrariesAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the library packages. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListLibraryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListLibraryDto>> LibrariesGetLibrariesAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Libraries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesGetLibraries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListLibraryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListLibraryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListLibraryDto)));
        }

        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ODataResponseListLibraryDto</returns>
        public ODataResponseListLibraryDto LibrariesGetVersionsByPackageid (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListLibraryDto> localVarResponse = LibrariesGetVersionsByPackageidWithHttpInfo(packageId, expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListLibraryDto</returns>
        public ApiResponse< ODataResponseListLibraryDto > LibrariesGetVersionsByPackageidWithHttpInfo (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling LibrariesApi->LibrariesGetVersionsByPackageid");

            var localVarPath = "/odata/Libraries/UiPath.Server.Configuration.OData.GetVersions(packageId='{packageId}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesGetVersionsByPackageid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListLibraryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListLibraryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListLibraryDto)));
        }

        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ODataResponseListLibraryDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListLibraryDto> LibrariesGetVersionsByPackageidAsync (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListLibraryDto> localVarResponse = await LibrariesGetVersionsByPackageidAsyncWithHttpInfo(packageId, expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a collection of all available versions of a given package. Allows odata query options. Required permissions: Libraries.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Id of the package for which the versions are fetched.</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListLibraryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListLibraryDto>> LibrariesGetVersionsByPackageidAsyncWithHttpInfo (string packageId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling LibrariesApi->LibrariesGetVersionsByPackageid");

            var localVarPath = "/odata/Libraries/UiPath.Server.Configuration.OData.GetVersions(packageId='{packageId}')";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesGetVersionsByPackageid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListLibraryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListLibraryDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListLibraryDto)));
        }

        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request. Required permissions: Libraries.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns></returns>
        public void LibrariesUploadPackage (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null)
        {
             LibrariesUploadPackageWithHttpInfo(file, file1, file2, file3, file4, file5, file6, file7, file8, file9);
        }

        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request. Required permissions: Libraries.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LibrariesUploadPackageWithHttpInfo (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling LibrariesApi->LibrariesUploadPackage");

            var localVarPath = "/odata/Libraries/UiPath.Server.Configuration.OData.UploadPackage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (file1 != null) localVarFileParams.Add("file1", Configuration.ApiClient.ParameterToFile("file1", file1));
            if (file2 != null) localVarFileParams.Add("file2", Configuration.ApiClient.ParameterToFile("file2", file2));
            if (file3 != null) localVarFileParams.Add("file3", Configuration.ApiClient.ParameterToFile("file3", file3));
            if (file4 != null) localVarFileParams.Add("file4", Configuration.ApiClient.ParameterToFile("file4", file4));
            if (file5 != null) localVarFileParams.Add("file5", Configuration.ApiClient.ParameterToFile("file5", file5));
            if (file6 != null) localVarFileParams.Add("file6", Configuration.ApiClient.ParameterToFile("file6", file6));
            if (file7 != null) localVarFileParams.Add("file7", Configuration.ApiClient.ParameterToFile("file7", file7));
            if (file8 != null) localVarFileParams.Add("file8", Configuration.ApiClient.ParameterToFile("file8", file8));
            if (file9 != null) localVarFileParams.Add("file9", Configuration.ApiClient.ParameterToFile("file9", file9));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesUploadPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request. Required permissions: Libraries.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LibrariesUploadPackageAsync (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null)
        {
             await LibrariesUploadPackageAsyncWithHttpInfo(file, file1, file2, file3, file4, file5, file6, file7, file8, file9);

        }

        /// <summary>
        /// Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request. Required permissions: Libraries.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="file1"> (optional)</param>
        /// <param name="file2"> (optional)</param>
        /// <param name="file3"> (optional)</param>
        /// <param name="file4"> (optional)</param>
        /// <param name="file5"> (optional)</param>
        /// <param name="file6"> (optional)</param>
        /// <param name="file7"> (optional)</param>
        /// <param name="file8"> (optional)</param>
        /// <param name="file9"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LibrariesUploadPackageAsyncWithHttpInfo (System.IO.Stream file, System.IO.Stream file1 = null, System.IO.Stream file2 = null, System.IO.Stream file3 = null, System.IO.Stream file4 = null, System.IO.Stream file5 = null, System.IO.Stream file6 = null, System.IO.Stream file7 = null, System.IO.Stream file8 = null, System.IO.Stream file9 = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling LibrariesApi->LibrariesUploadPackage");

            var localVarPath = "/odata/Libraries/UiPath.Server.Configuration.OData.UploadPackage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (file1 != null) localVarFileParams.Add("file1", Configuration.ApiClient.ParameterToFile("file1", file1));
            if (file2 != null) localVarFileParams.Add("file2", Configuration.ApiClient.ParameterToFile("file2", file2));
            if (file3 != null) localVarFileParams.Add("file3", Configuration.ApiClient.ParameterToFile("file3", file3));
            if (file4 != null) localVarFileParams.Add("file4", Configuration.ApiClient.ParameterToFile("file4", file4));
            if (file5 != null) localVarFileParams.Add("file5", Configuration.ApiClient.ParameterToFile("file5", file5));
            if (file6 != null) localVarFileParams.Add("file6", Configuration.ApiClient.ParameterToFile("file6", file6));
            if (file7 != null) localVarFileParams.Add("file7", Configuration.ApiClient.ParameterToFile("file7", file7));
            if (file8 != null) localVarFileParams.Add("file8", Configuration.ApiClient.ParameterToFile("file8", file8));
            if (file9 != null) localVarFileParams.Add("file9", Configuration.ApiClient.ParameterToFile("file9", file9));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LibrariesUploadPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
