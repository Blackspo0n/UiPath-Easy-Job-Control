/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// WebhookDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class WebhookDto :  IEquatable<WebhookDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookDto" /> class.
        /// </summary>
        /// <param name="Url">Url (required).</param>
        /// <param name="Enabled">Enabled (required).</param>
        /// <param name="Secret">Secret.</param>
        /// <param name="SubscribeToAllEvents">SubscribeToAllEvents (required).</param>
        /// <param name="AllowInsecureSsl">AllowInsecureSsl (required).</param>
        /// <param name="Events">Events.</param>
        /// <param name="Id">Id.</param>
        public WebhookDto(string Url = default(string), bool? Enabled = default(bool?), string Secret = default(string), bool? SubscribeToAllEvents = default(bool?), bool? AllowInsecureSsl = default(bool?), List<WebhookEventDto> Events = default(List<WebhookEventDto>), long? Id = default(long?))
        {
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for WebhookDto and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            // to ensure "Enabled" is required (not null)
            if (Enabled == null)
            {
                throw new InvalidDataException("Enabled is a required property for WebhookDto and cannot be null");
            }
            else
            {
                this.Enabled = Enabled;
            }
            // to ensure "SubscribeToAllEvents" is required (not null)
            if (SubscribeToAllEvents == null)
            {
                throw new InvalidDataException("SubscribeToAllEvents is a required property for WebhookDto and cannot be null");
            }
            else
            {
                this.SubscribeToAllEvents = SubscribeToAllEvents;
            }
            // to ensure "AllowInsecureSsl" is required (not null)
            if (AllowInsecureSsl == null)
            {
                throw new InvalidDataException("AllowInsecureSsl is a required property for WebhookDto and cannot be null");
            }
            else
            {
                this.AllowInsecureSsl = AllowInsecureSsl;
            }
            this.Secret = Secret;
            this.Events = Events;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="Secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeToAllEvents
        /// </summary>
        [DataMember(Name="SubscribeToAllEvents", EmitDefaultValue=false)]
        public bool? SubscribeToAllEvents { get; set; }

        /// <summary>
        /// Gets or Sets AllowInsecureSsl
        /// </summary>
        [DataMember(Name="AllowInsecureSsl", EmitDefaultValue=false)]
        public bool? AllowInsecureSsl { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="Events", EmitDefaultValue=false)]
        public List<WebhookEventDto> Events { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookDto {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  SubscribeToAllEvents: ").Append(SubscribeToAllEvents).Append("\n");
            sb.Append("  AllowInsecureSsl: ").Append(AllowInsecureSsl).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookDto);
        }

        /// <summary>
        /// Returns true if WebhookDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.SubscribeToAllEvents == input.SubscribeToAllEvents ||
                    (this.SubscribeToAllEvents != null &&
                    this.SubscribeToAllEvents.Equals(input.SubscribeToAllEvents))
                ) && 
                (
                    this.AllowInsecureSsl == input.AllowInsecureSsl ||
                    (this.AllowInsecureSsl != null &&
                    this.AllowInsecureSsl.Equals(input.AllowInsecureSsl))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.SubscribeToAllEvents != null)
                    hashCode = hashCode * 59 + this.SubscribeToAllEvents.GetHashCode();
                if (this.AllowInsecureSsl != null)
                    hashCode = hashCode * 59 + this.AllowInsecureSsl.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Url (string) maxLength
            if(this.Url != null && this.Url.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 2000.", new [] { "Url" });
            }

            // Url (string) minLength
            if(this.Url != null && this.Url.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 0.", new [] { "Url" });
            }

            // Secret (string) maxLength
            if(this.Secret != null && this.Secret.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Secret, length must be less than 100.", new [] { "Secret" });
            }

            // Secret (string) minLength
            if(this.Secret != null && this.Secret.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Secret, length must be greater than 0.", new [] { "Secret" });
            }

            yield break;
        }
    }

}
