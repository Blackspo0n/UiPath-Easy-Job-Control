/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores information about a runtime license (unattended/non-production).
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class LicenseRuntimeDto :  IEquatable<LicenseRuntimeDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseRuntimeDto" /> class.
        /// </summary>
        /// <param name="Key">The license key..</param>
        /// <param name="MachineId">The Machine&#39;s Id..</param>
        /// <param name="MachineName">The Machine&#39;s Name..</param>
        /// <param name="Runtimes">Maximum number of runtimes..</param>
        /// <param name="RobotsCount">Total number of Robots..</param>
        /// <param name="ExecutingCount">How many Robots acquired a license..</param>
        /// <param name="IsOnline">If the machine is online..</param>
        /// <param name="IsLicensed">If the machine is licensed..</param>
        /// <param name="Enabled">If the machine is allowed to consume licenses..</param>
        public LicenseRuntimeDto(string Key = default(string), long? MachineId = default(long?), string MachineName = default(string), int? Runtimes = default(int?), int? RobotsCount = default(int?), int? ExecutingCount = default(int?), bool? IsOnline = default(bool?), bool? IsLicensed = default(bool?), bool? Enabled = default(bool?))
        {
            this.Key = Key;
            this.MachineId = MachineId;
            this.MachineName = MachineName;
            this.Runtimes = Runtimes;
            this.RobotsCount = RobotsCount;
            this.ExecutingCount = ExecutingCount;
            this.IsOnline = IsOnline;
            this.IsLicensed = IsLicensed;
            this.Enabled = Enabled;
        }
        
        /// <summary>
        /// The license key.
        /// </summary>
        /// <value>The license key.</value>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The Machine&#39;s Id.
        /// </summary>
        /// <value>The Machine&#39;s Id.</value>
        [DataMember(Name="MachineId", EmitDefaultValue=false)]
        public long? MachineId { get; set; }

        /// <summary>
        /// The Machine&#39;s Name.
        /// </summary>
        /// <value>The Machine&#39;s Name.</value>
        [DataMember(Name="MachineName", EmitDefaultValue=false)]
        public string MachineName { get; set; }

        /// <summary>
        /// Maximum number of runtimes.
        /// </summary>
        /// <value>Maximum number of runtimes.</value>
        [DataMember(Name="Runtimes", EmitDefaultValue=false)]
        public int? Runtimes { get; set; }

        /// <summary>
        /// Total number of Robots.
        /// </summary>
        /// <value>Total number of Robots.</value>
        [DataMember(Name="RobotsCount", EmitDefaultValue=false)]
        public int? RobotsCount { get; set; }

        /// <summary>
        /// How many Robots acquired a license.
        /// </summary>
        /// <value>How many Robots acquired a license.</value>
        [DataMember(Name="ExecutingCount", EmitDefaultValue=false)]
        public int? ExecutingCount { get; set; }

        /// <summary>
        /// If the machine is online.
        /// </summary>
        /// <value>If the machine is online.</value>
        [DataMember(Name="IsOnline", EmitDefaultValue=false)]
        public bool? IsOnline { get; set; }

        /// <summary>
        /// If the machine is licensed.
        /// </summary>
        /// <value>If the machine is licensed.</value>
        [DataMember(Name="IsLicensed", EmitDefaultValue=false)]
        public bool? IsLicensed { get; set; }

        /// <summary>
        /// If the machine is allowed to consume licenses.
        /// </summary>
        /// <value>If the machine is allowed to consume licenses.</value>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseRuntimeDto {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  Runtimes: ").Append(Runtimes).Append("\n");
            sb.Append("  RobotsCount: ").Append(RobotsCount).Append("\n");
            sb.Append("  ExecutingCount: ").Append(ExecutingCount).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  IsLicensed: ").Append(IsLicensed).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseRuntimeDto);
        }

        /// <summary>
        /// Returns true if LicenseRuntimeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseRuntimeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseRuntimeDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.Runtimes == input.Runtimes ||
                    (this.Runtimes != null &&
                    this.Runtimes.Equals(input.Runtimes))
                ) && 
                (
                    this.RobotsCount == input.RobotsCount ||
                    (this.RobotsCount != null &&
                    this.RobotsCount.Equals(input.RobotsCount))
                ) && 
                (
                    this.ExecutingCount == input.ExecutingCount ||
                    (this.ExecutingCount != null &&
                    this.ExecutingCount.Equals(input.ExecutingCount))
                ) && 
                (
                    this.IsOnline == input.IsOnline ||
                    (this.IsOnline != null &&
                    this.IsOnline.Equals(input.IsOnline))
                ) && 
                (
                    this.IsLicensed == input.IsLicensed ||
                    (this.IsLicensed != null &&
                    this.IsLicensed.Equals(input.IsLicensed))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.MachineName != null)
                    hashCode = hashCode * 59 + this.MachineName.GetHashCode();
                if (this.Runtimes != null)
                    hashCode = hashCode * 59 + this.Runtimes.GetHashCode();
                if (this.RobotsCount != null)
                    hashCode = hashCode * 59 + this.RobotsCount.GetHashCode();
                if (this.ExecutingCount != null)
                    hashCode = hashCode * 59 + this.ExecutingCount.GetHashCode();
                if (this.IsOnline != null)
                    hashCode = hashCode * 59 + this.IsOnline.GetHashCode();
                if (this.IsLicensed != null)
                    hashCode = hashCode * 59 + this.IsLicensed.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
