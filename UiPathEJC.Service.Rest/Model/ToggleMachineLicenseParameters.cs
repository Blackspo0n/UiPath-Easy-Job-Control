/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// ToggleMachineLicenseParameters
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class ToggleMachineLicenseParameters :  IEquatable<ToggleMachineLicenseParameters>, IValidatableObject
    {
        /// <summary>
        /// Defines RobotType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RobotTypeEnum
        {
            
            /// <summary>
            /// Enum NonProduction for value: NonProduction
            /// </summary>
            [EnumMember(Value = "NonProduction")]
            NonProduction = 1,
            
            /// <summary>
            /// Enum Attended for value: Attended
            /// </summary>
            [EnumMember(Value = "Attended")]
            Attended = 2,
            
            /// <summary>
            /// Enum Unattended for value: Unattended
            /// </summary>
            [EnumMember(Value = "Unattended")]
            Unattended = 3,
            
            /// <summary>
            /// Enum Development for value: Development
            /// </summary>
            [EnumMember(Value = "Development")]
            Development = 4
        }

        /// <summary>
        /// Gets or Sets RobotType
        /// </summary>
        [DataMember(Name="robotType", EmitDefaultValue=false)]
        public RobotTypeEnum RobotType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToggleMachineLicenseParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToggleMachineLicenseParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToggleMachineLicenseParameters" /> class.
        /// </summary>
        /// <param name="Key">Key.</param>
        /// <param name="RobotType">RobotType (required).</param>
        /// <param name="Enabled">Enabled (required).</param>
        public ToggleMachineLicenseParameters(string Key = default(string), RobotTypeEnum RobotType = default(RobotTypeEnum), bool? Enabled = default(bool?))
        {
            // to ensure "RobotType" is required (not null)
            if (RobotType == null)
            {
                throw new InvalidDataException("RobotType is a required property for ToggleMachineLicenseParameters and cannot be null");
            }
            else
            {
                this.RobotType = RobotType;
            }
            // to ensure "Enabled" is required (not null)
            if (Enabled == null)
            {
                throw new InvalidDataException("Enabled is a required property for ToggleMachineLicenseParameters and cannot be null");
            }
            else
            {
                this.Enabled = Enabled;
            }
            this.Key = Key;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }


        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToggleMachineLicenseParameters {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  RobotType: ").Append(RobotType).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ToggleMachineLicenseParameters);
        }

        /// <summary>
        /// Returns true if ToggleMachineLicenseParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ToggleMachineLicenseParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ToggleMachineLicenseParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.RobotType == input.RobotType ||
                    (this.RobotType != null &&
                    this.RobotType.Equals(input.RobotType))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.RobotType != null)
                    hashCode = hashCode * 59 + this.RobotType.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
