/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// IEdmPathExpression
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class IEdmPathExpression :  IEquatable<IEdmPathExpression>, IValidatableObject
    {
        /// <summary>
        /// Defines ExpressionKind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExpressionKindEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum BinaryConstant for value: BinaryConstant
            /// </summary>
            [EnumMember(Value = "BinaryConstant")]
            BinaryConstant = 2,
            
            /// <summary>
            /// Enum BooleanConstant for value: BooleanConstant
            /// </summary>
            [EnumMember(Value = "BooleanConstant")]
            BooleanConstant = 3,
            
            /// <summary>
            /// Enum DateTimeOffsetConstant for value: DateTimeOffsetConstant
            /// </summary>
            [EnumMember(Value = "DateTimeOffsetConstant")]
            DateTimeOffsetConstant = 4,
            
            /// <summary>
            /// Enum DecimalConstant for value: DecimalConstant
            /// </summary>
            [EnumMember(Value = "DecimalConstant")]
            DecimalConstant = 5,
            
            /// <summary>
            /// Enum FloatingConstant for value: FloatingConstant
            /// </summary>
            [EnumMember(Value = "FloatingConstant")]
            FloatingConstant = 6,
            
            /// <summary>
            /// Enum GuidConstant for value: GuidConstant
            /// </summary>
            [EnumMember(Value = "GuidConstant")]
            GuidConstant = 7,
            
            /// <summary>
            /// Enum IntegerConstant for value: IntegerConstant
            /// </summary>
            [EnumMember(Value = "IntegerConstant")]
            IntegerConstant = 8,
            
            /// <summary>
            /// Enum StringConstant for value: StringConstant
            /// </summary>
            [EnumMember(Value = "StringConstant")]
            StringConstant = 9,
            
            /// <summary>
            /// Enum DurationConstant for value: DurationConstant
            /// </summary>
            [EnumMember(Value = "DurationConstant")]
            DurationConstant = 10,
            
            /// <summary>
            /// Enum Null for value: Null
            /// </summary>
            [EnumMember(Value = "Null")]
            Null = 11,
            
            /// <summary>
            /// Enum Record for value: Record
            /// </summary>
            [EnumMember(Value = "Record")]
            Record = 12,
            
            /// <summary>
            /// Enum Collection for value: Collection
            /// </summary>
            [EnumMember(Value = "Collection")]
            Collection = 13,
            
            /// <summary>
            /// Enum Path for value: Path
            /// </summary>
            [EnumMember(Value = "Path")]
            Path = 14,
            
            /// <summary>
            /// Enum If for value: If
            /// </summary>
            [EnumMember(Value = "If")]
            If = 15,
            
            /// <summary>
            /// Enum Cast for value: Cast
            /// </summary>
            [EnumMember(Value = "Cast")]
            Cast = 16,
            
            /// <summary>
            /// Enum IsType for value: IsType
            /// </summary>
            [EnumMember(Value = "IsType")]
            IsType = 17,
            
            /// <summary>
            /// Enum FunctionApplication for value: FunctionApplication
            /// </summary>
            [EnumMember(Value = "FunctionApplication")]
            FunctionApplication = 18,
            
            /// <summary>
            /// Enum LabeledExpressionReference for value: LabeledExpressionReference
            /// </summary>
            [EnumMember(Value = "LabeledExpressionReference")]
            LabeledExpressionReference = 19,
            
            /// <summary>
            /// Enum Labeled for value: Labeled
            /// </summary>
            [EnumMember(Value = "Labeled")]
            Labeled = 20,
            
            /// <summary>
            /// Enum PropertyPath for value: PropertyPath
            /// </summary>
            [EnumMember(Value = "PropertyPath")]
            PropertyPath = 21,
            
            /// <summary>
            /// Enum NavigationPropertyPath for value: NavigationPropertyPath
            /// </summary>
            [EnumMember(Value = "NavigationPropertyPath")]
            NavigationPropertyPath = 22,
            
            /// <summary>
            /// Enum DateConstant for value: DateConstant
            /// </summary>
            [EnumMember(Value = "DateConstant")]
            DateConstant = 23,
            
            /// <summary>
            /// Enum TimeOfDayConstant for value: TimeOfDayConstant
            /// </summary>
            [EnumMember(Value = "TimeOfDayConstant")]
            TimeOfDayConstant = 24,
            
            /// <summary>
            /// Enum EnumMember for value: EnumMember
            /// </summary>
            [EnumMember(Value = "EnumMember")]
            EnumMember = 25,
            
            /// <summary>
            /// Enum AnnotationPath for value: AnnotationPath
            /// </summary>
            [EnumMember(Value = "AnnotationPath")]
            AnnotationPath = 26
        }

        /// <summary>
        /// Gets or Sets ExpressionKind
        /// </summary>
        [DataMember(Name="ExpressionKind", EmitDefaultValue=false)]
        public ExpressionKindEnum? ExpressionKind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IEdmPathExpression" /> class.
        /// </summary>
        /// <param name="PathSegments">PathSegments.</param>
        public IEdmPathExpression(List<string> PathSegments = default(List<string>))
        {
            this.PathSegments = PathSegments;
        }
        
        /// <summary>
        /// Gets or Sets PathSegments
        /// </summary>
        [DataMember(Name="PathSegments", EmitDefaultValue=false)]
        public List<string> PathSegments { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IEdmPathExpression {\n");
            sb.Append("  PathSegments: ").Append(PathSegments).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ExpressionKind: ").Append(ExpressionKind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IEdmPathExpression);
        }

        /// <summary>
        /// Returns true if IEdmPathExpression instances are equal
        /// </summary>
        /// <param name="input">Instance of IEdmPathExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IEdmPathExpression input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PathSegments == input.PathSegments ||
                    this.PathSegments != null &&
                    this.PathSegments.SequenceEqual(input.PathSegments)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ExpressionKind == input.ExpressionKind ||
                    (this.ExpressionKind != null &&
                    this.ExpressionKind.Equals(input.ExpressionKind))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PathSegments != null)
                    hashCode = hashCode * 59 + this.PathSegments.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ExpressionKind != null)
                    hashCode = hashCode * 59 + this.ExpressionKind.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
