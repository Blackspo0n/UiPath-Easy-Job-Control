/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Changes the culture for the current user
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns></returns>
        void UsersChangeCulture (ChangeCultureParameters changeCultureParameters = null);

        /// <summary>
        /// Changes the culture for the current user
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersChangeCultureWithHttpInfo (ChangeCultureParameters changeCultureParameters = null);
        /// <summary>
        /// Changes the password of the user. This method can be called only by host users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns></returns>
        void UsersChangePasswordById (long? id, ChangePasswordDto changePasswordParameters);

        /// <summary>
        /// Changes the password of the user. This method can be called only by host users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersChangePasswordByIdWithHttpInfo (long? id, ChangePasswordDto changePasswordParameters);
        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void UsersDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a user based on its id.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>UserDto</returns>
        UserDto UsersGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a user based on its id.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UsersGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserPermissionsCollection</returns>
        UserPermissionsCollection UsersGetCurrentPermissions ();

        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserPermissionsCollection</returns>
        ApiResponse<UserPermissionsCollection> UsersGetCurrentPermissionsWithHttpInfo ();
        /// <summary>
        /// Returns details about the user currently logged into Orchestrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>UserDto</returns>
        UserDto UsersGetCurrentUser (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns details about the user currently logged into Orchestrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UsersGetCurrentUserWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Gets users.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListUserDto</returns>
        ODataResponseListUserDto UsersGetUsers (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets users.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListUserDto</returns>
        ApiResponse<ODataResponseListUserDto> UsersGetUsersWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns></returns>
        void UsersImportUsers (ImportUsersParameters importUsersParameters = null);

        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersImportUsersWithHttpInfo (ImportUsersParameters importUsersParameters = null);
        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns></returns>
        void UsersPatchById (long? id, UserDto userDto);

        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersPatchByIdWithHttpInfo (long? id, UserDto userDto);
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>UserDto</returns>
        UserDto UsersPost (UserDto userDto);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UsersPostWithHttpInfo (UserDto userDto);
        /// <summary>
        /// Edits a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>UserDto</returns>
        UserDto UsersPutById (long? id, UserDto userDto);

        /// <summary>
        /// Edits a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UsersPutByIdWithHttpInfo (long? id, UserDto userDto);
        /// <summary>
        /// Activate or deactivate a user
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns></returns>
        void UsersSetActiveById (long? id, SetUserActiveParameters setUserActiveParameters);

        /// <summary>
        /// Activate or deactivate a user
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersSetActiveByIdWithHttpInfo (long? id, SetUserActiveParameters setUserActiveParameters);
        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns></returns>
        void UsersToggleRoleById (long? id, ToggleRoleParameters toggleRoleParameters);

        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersToggleRoleByIdWithHttpInfo (long? id, ToggleRoleParameters toggleRoleParameters);
        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns></returns>
        void UsersUpdatePassword (UpdateUserPasswordDto updatePasswordParameters);

        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUpdatePasswordWithHttpInfo (UpdateUserPasswordDto updatePasswordParameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Changes the culture for the current user
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersChangeCultureAsync (ChangeCultureParameters changeCultureParameters = null);

        /// <summary>
        /// Changes the culture for the current user
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangeCultureAsyncWithHttpInfo (ChangeCultureParameters changeCultureParameters = null);
        /// <summary>
        /// Changes the password of the user. This method can be called only by host users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersChangePasswordByIdAsync (long? id, ChangePasswordDto changePasswordParameters);

        /// <summary>
        /// Changes the password of the user. This method can be called only by host users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangePasswordByIdAsyncWithHttpInfo (long? id, ChangePasswordDto changePasswordParameters);
        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a user based on its id.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UsersGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a user based on its id.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserPermissionsCollection</returns>
        System.Threading.Tasks.Task<UserPermissionsCollection> UsersGetCurrentPermissionsAsync ();

        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserPermissionsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPermissionsCollection>> UsersGetCurrentPermissionsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns details about the user currently logged into Orchestrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UsersGetCurrentUserAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Returns details about the user currently logged into Orchestrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersGetCurrentUserAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Gets users.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListUserDto</returns>
        System.Threading.Tasks.Task<ODataResponseListUserDto> UsersGetUsersAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// Gets users.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListUserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListUserDto>> UsersGetUsersAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersImportUsersAsync (ImportUsersParameters importUsersParameters = null);

        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersImportUsersAsyncWithHttpInfo (ImportUsersParameters importUsersParameters = null);
        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersPatchByIdAsync (long? id, UserDto userDto);

        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint.
        /// </summary>
        /// <remarks>
        /// Requires authentication.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersPatchByIdAsyncWithHttpInfo (long? id, UserDto userDto);
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UsersPostAsync (UserDto userDto);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersPostAsyncWithHttpInfo (UserDto userDto);
        /// <summary>
        /// Edits a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UsersPutByIdAsync (long? id, UserDto userDto);

        /// <summary>
        /// Edits a user.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersPutByIdAsyncWithHttpInfo (long? id, UserDto userDto);
        /// <summary>
        /// Activate or deactivate a user
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersSetActiveByIdAsync (long? id, SetUserActiveParameters setUserActiveParameters);

        /// <summary>
        /// Activate or deactivate a user
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersSetActiveByIdAsyncWithHttpInfo (long? id, SetUserActiveParameters setUserActiveParameters);
        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersToggleRoleByIdAsync (long? id, ToggleRoleParameters toggleRoleParameters);

        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter.
        /// </summary>
        /// <remarks>
        /// Required permissions: Users.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersToggleRoleByIdAsyncWithHttpInfo (long? id, ToggleRoleParameters toggleRoleParameters);
        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUpdatePasswordAsync (UpdateUserPasswordDto updatePasswordParameters);

        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUpdatePasswordAsyncWithHttpInfo (UpdateUserPasswordDto updatePasswordParameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Changes the culture for the current user Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns></returns>
        public void UsersChangeCulture (ChangeCultureParameters changeCultureParameters = null)
        {
             UsersChangeCultureWithHttpInfo(changeCultureParameters);
        }

        /// <summary>
        /// Changes the culture for the current user Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersChangeCultureWithHttpInfo (ChangeCultureParameters changeCultureParameters = null)
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.ChangeCulture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeCultureParameters != null && changeCultureParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changeCultureParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeCultureParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangeCulture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Changes the culture for the current user Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersChangeCultureAsync (ChangeCultureParameters changeCultureParameters = null)
        {
             await UsersChangeCultureAsyncWithHttpInfo(changeCultureParameters);

        }

        /// <summary>
        /// Changes the culture for the current user Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeCultureParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangeCultureAsyncWithHttpInfo (ChangeCultureParameters changeCultureParameters = null)
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.ChangeCulture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeCultureParameters != null && changeCultureParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changeCultureParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeCultureParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangeCulture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Changes the password of the user. This method can be called only by host users. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns></returns>
        public void UsersChangePasswordById (long? id, ChangePasswordDto changePasswordParameters)
        {
             UsersChangePasswordByIdWithHttpInfo(id, changePasswordParameters);
        }

        /// <summary>
        /// Changes the password of the user. This method can be called only by host users. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersChangePasswordByIdWithHttpInfo (long? id, ChangePasswordDto changePasswordParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersChangePasswordById");
            // verify the required parameter 'changePasswordParameters' is set
            if (changePasswordParameters == null)
                throw new ApiException(400, "Missing required parameter 'changePasswordParameters' when calling UsersApi->UsersChangePasswordById");

            var localVarPath = "/odata/Users({Id})/UiPath.Server.Configuration.OData.ChangePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (changePasswordParameters != null && changePasswordParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changePasswordParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangePasswordById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Changes the password of the user. This method can be called only by host users. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersChangePasswordByIdAsync (long? id, ChangePasswordDto changePasswordParameters)
        {
             await UsersChangePasswordByIdAsyncWithHttpInfo(id, changePasswordParameters);

        }

        /// <summary>
        /// Changes the password of the user. This method can be called only by host users. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="changePasswordParameters">&lt;para /&gt;CurrentPassword - The current password of the user.              &lt;para /&gt;NewPassword - Then new password of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersChangePasswordByIdAsyncWithHttpInfo (long? id, ChangePasswordDto changePasswordParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersChangePasswordById");
            // verify the required parameter 'changePasswordParameters' is set
            if (changePasswordParameters == null)
                throw new ApiException(400, "Missing required parameter 'changePasswordParameters' when calling UsersApi->UsersChangePasswordById");

            var localVarPath = "/odata/Users({Id})/UiPath.Server.Configuration.OData.ChangePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (changePasswordParameters != null && changePasswordParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(changePasswordParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersChangePasswordById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a user. Required permissions: Users.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void UsersDeleteById (long? id, string ifMatch = null)
        {
             UsersDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes a user. Required permissions: Users.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersDeleteById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a user. Required permissions: Users.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await UsersDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes a user. Required permissions: Users.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersDeleteById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a user based on its id. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>UserDto</returns>
        public UserDto UsersGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<UserDto> localVarResponse = UsersGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a user based on its id. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse< UserDto > UsersGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersGetById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Gets a user based on its id. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UsersGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<UserDto> localVarResponse = await UsersGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a user based on its id. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersGetById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserPermissionsCollection</returns>
        public UserPermissionsCollection UsersGetCurrentPermissions ()
        {
             ApiResponse<UserPermissionsCollection> localVarResponse = UsersGetCurrentPermissionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserPermissionsCollection</returns>
        public ApiResponse< UserPermissionsCollection > UsersGetCurrentPermissionsWithHttpInfo ()
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentPermissions()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetCurrentPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPermissionsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserPermissionsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPermissionsCollection)));
        }

        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserPermissionsCollection</returns>
        public async System.Threading.Tasks.Task<UserPermissionsCollection> UsersGetCurrentPermissionsAsync ()
        {
             ApiResponse<UserPermissionsCollection> localVarResponse = await UsersGetCurrentPermissionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a user permission collection containing data about the current user and all the permissions it has. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserPermissionsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserPermissionsCollection>> UsersGetCurrentPermissionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentPermissions()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetCurrentPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPermissionsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserPermissionsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPermissionsCollection)));
        }

        /// <summary>
        /// Returns details about the user currently logged into Orchestrator. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>UserDto</returns>
        public UserDto UsersGetCurrentUser (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<UserDto> localVarResponse = UsersGetCurrentUserWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about the user currently logged into Orchestrator. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse< UserDto > UsersGetCurrentUserWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentUser()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Returns details about the user currently logged into Orchestrator. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UsersGetCurrentUserAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<UserDto> localVarResponse = await UsersGetCurrentUserAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details about the user currently logged into Orchestrator. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the odata-count header. (optional)</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersGetCurrentUserAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentUser()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Gets users. Required permissions: Users.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListUserDto</returns>
        public ODataResponseListUserDto UsersGetUsers (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListUserDto> localVarResponse = UsersGetUsersWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets users. Required permissions: Users.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListUserDto</returns>
        public ApiResponse< ODataResponseListUserDto > UsersGetUsersWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListUserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListUserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListUserDto)));
        }

        /// <summary>
        /// Gets users. Required permissions: Users.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListUserDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListUserDto> UsersGetUsersAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListUserDto> localVarResponse = await UsersGetUsersAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets users. Required permissions: Users.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListUserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListUserDto>> UsersGetUsersAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListUserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListUserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListUserDto)));
        }

        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns></returns>
        public void UsersImportUsers (ImportUsersParameters importUsersParameters = null)
        {
             UsersImportUsersWithHttpInfo(importUsersParameters);
        }

        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersImportUsersWithHttpInfo (ImportUsersParameters importUsersParameters = null)
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.ImportUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (importUsersParameters != null && importUsersParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importUsersParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importUsersParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersImportUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersImportUsersAsync (ImportUsersParameters importUsersParameters = null)
        {
             await UsersImportUsersAsyncWithHttpInfo(importUsersParameters);

        }

        /// <summary>
        /// Imports from AD all users from the given group and associates them with given roles. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importUsersParameters">&lt;para /&gt;Group - The name of the AD group whose users are to be imported.              &lt;para /&gt;RolesList - The collection of roles the imported users will be associated with.              &lt;para /&gt;OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersImportUsersAsyncWithHttpInfo (ImportUsersParameters importUsersParameters = null)
        {

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.ImportUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (importUsersParameters != null && importUsersParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importUsersParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importUsersParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersImportUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns></returns>
        public void UsersPatchById (long? id, UserDto userDto)
        {
             UsersPatchByIdWithHttpInfo(id, userDto);
        }

        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersPatchByIdWithHttpInfo (long? id, UserDto userDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersPatchById");
            // verify the required parameter 'userDto' is set
            if (userDto == null)
                throw new ApiException(400, "Missing required parameter 'userDto' when calling UsersApi->UsersPatchById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userDto != null && userDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPatchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersPatchByIdAsync (long? id, UserDto userDto)
        {
             await UsersPatchByIdAsyncWithHttpInfo(id, userDto);

        }

        /// <summary>
        /// Partially updates a user.  Cannot update roles or organization units via this endpoint. Requires authentication.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersPatchByIdAsyncWithHttpInfo (long? id, UserDto userDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersPatchById");
            // verify the required parameter 'userDto' is set
            if (userDto == null)
                throw new ApiException(400, "Missing required parameter 'userDto' when calling UsersApi->UsersPatchById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userDto != null && userDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPatchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new user. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>UserDto</returns>
        public UserDto UsersPost (UserDto userDto)
        {
             ApiResponse<UserDto> localVarResponse = UsersPostWithHttpInfo(userDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new user. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse< UserDto > UsersPostWithHttpInfo (UserDto userDto)
        {
            // verify the required parameter 'userDto' is set
            if (userDto == null)
                throw new ApiException(400, "Missing required parameter 'userDto' when calling UsersApi->UsersPost");

            var localVarPath = "/odata/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userDto != null && userDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Creates a new user. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UsersPostAsync (UserDto userDto)
        {
             ApiResponse<UserDto> localVarResponse = await UsersPostAsyncWithHttpInfo(userDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new user. Required permissions: Users.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"></param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersPostAsyncWithHttpInfo (UserDto userDto)
        {
            // verify the required parameter 'userDto' is set
            if (userDto == null)
                throw new ApiException(400, "Missing required parameter 'userDto' when calling UsersApi->UsersPost");

            var localVarPath = "/odata/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userDto != null && userDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Edits a user. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>UserDto</returns>
        public UserDto UsersPutById (long? id, UserDto userDto)
        {
             ApiResponse<UserDto> localVarResponse = UsersPutByIdWithHttpInfo(id, userDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a user. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse< UserDto > UsersPutByIdWithHttpInfo (long? id, UserDto userDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersPutById");
            // verify the required parameter 'userDto' is set
            if (userDto == null)
                throw new ApiException(400, "Missing required parameter 'userDto' when calling UsersApi->UsersPutById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userDto != null && userDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Edits a user. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UsersPutByIdAsync (long? id, UserDto userDto)
        {
             ApiResponse<UserDto> localVarResponse = await UsersPutByIdAsyncWithHttpInfo(id, userDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edits a user. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="userDto"></param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> UsersPutByIdAsyncWithHttpInfo (long? id, UserDto userDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersPutById");
            // verify the required parameter 'userDto' is set
            if (userDto == null)
                throw new ApiException(400, "Missing required parameter 'userDto' when calling UsersApi->UsersPutById");

            var localVarPath = "/odata/Users({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userDto != null && userDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Activate or deactivate a user Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns></returns>
        public void UsersSetActiveById (long? id, SetUserActiveParameters setUserActiveParameters)
        {
             UsersSetActiveByIdWithHttpInfo(id, setUserActiveParameters);
        }

        /// <summary>
        /// Activate or deactivate a user Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersSetActiveByIdWithHttpInfo (long? id, SetUserActiveParameters setUserActiveParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersSetActiveById");
            // verify the required parameter 'setUserActiveParameters' is set
            if (setUserActiveParameters == null)
                throw new ApiException(400, "Missing required parameter 'setUserActiveParameters' when calling UsersApi->UsersSetActiveById");

            var localVarPath = "/odata/Users({Id})/UiPath.Server.Configuration.OData.SetActive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setUserActiveParameters != null && setUserActiveParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setUserActiveParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setUserActiveParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersSetActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate or deactivate a user Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersSetActiveByIdAsync (long? id, SetUserActiveParameters setUserActiveParameters)
        {
             await UsersSetActiveByIdAsyncWithHttpInfo(id, setUserActiveParameters);

        }

        /// <summary>
        /// Activate or deactivate a user Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="setUserActiveParameters"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersSetActiveByIdAsyncWithHttpInfo (long? id, SetUserActiveParameters setUserActiveParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersSetActiveById");
            // verify the required parameter 'setUserActiveParameters' is set
            if (setUserActiveParameters == null)
                throw new ApiException(400, "Missing required parameter 'setUserActiveParameters' when calling UsersApi->UsersSetActiveById");

            var localVarPath = "/odata/Users({Id})/UiPath.Server.Configuration.OData.SetActive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setUserActiveParameters != null && setUserActiveParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(setUserActiveParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setUserActiveParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersSetActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns></returns>
        public void UsersToggleRoleById (long? id, ToggleRoleParameters toggleRoleParameters)
        {
             UsersToggleRoleByIdWithHttpInfo(id, toggleRoleParameters);
        }

        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersToggleRoleByIdWithHttpInfo (long? id, ToggleRoleParameters toggleRoleParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersToggleRoleById");
            // verify the required parameter 'toggleRoleParameters' is set
            if (toggleRoleParameters == null)
                throw new ApiException(400, "Missing required parameter 'toggleRoleParameters' when calling UsersApi->UsersToggleRoleById");

            var localVarPath = "/odata/Users({Id})/UiPath.Server.Configuration.OData.ToggleRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toggleRoleParameters != null && toggleRoleParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(toggleRoleParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toggleRoleParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersToggleRoleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersToggleRoleByIdAsync (long? id, ToggleRoleParameters toggleRoleParameters)
        {
             await UsersToggleRoleByIdAsyncWithHttpInfo(id, toggleRoleParameters);

        }

        /// <summary>
        /// Associates/dissociates the given user with/from a role based on toggle parameter. Required permissions: Users.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="toggleRoleParameters">&lt;para /&gt;Toggle - States whether to associate or to dissociate the role with/from the user.              &lt;para /&gt;Role - The name of the role to be associated/dissociated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersToggleRoleByIdAsyncWithHttpInfo (long? id, ToggleRoleParameters toggleRoleParameters)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersToggleRoleById");
            // verify the required parameter 'toggleRoleParameters' is set
            if (toggleRoleParameters == null)
                throw new ApiException(400, "Missing required parameter 'toggleRoleParameters' when calling UsersApi->UsersToggleRoleById");

            var localVarPath = "/odata/Users({Id})/UiPath.Server.Configuration.OData.ToggleRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toggleRoleParameters != null && toggleRoleParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(toggleRoleParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toggleRoleParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersToggleRoleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns></returns>
        public void UsersUpdatePassword (UpdateUserPasswordDto updatePasswordParameters)
        {
             UsersUpdatePasswordWithHttpInfo(updatePasswordParameters);
        }

        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersUpdatePasswordWithHttpInfo (UpdateUserPasswordDto updatePasswordParameters)
        {
            // verify the required parameter 'updatePasswordParameters' is set
            if (updatePasswordParameters == null)
                throw new ApiException(400, "Missing required parameter 'updatePasswordParameters' when calling UsersApi->UsersUpdatePassword");

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.UpdatePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updatePasswordParameters != null && updatePasswordParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updatePasswordParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePasswordParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUpdatePasswordAsync (UpdateUserPasswordDto updatePasswordParameters)
        {
             await UsersUpdatePasswordAsyncWithHttpInfo(updatePasswordParameters);

        }

        /// <summary>
        /// Updates the user password for the provided Username and Tenancy Name.  This endpoint is intended to be used via API to update the first login password. 
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordParameters"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersUpdatePasswordAsyncWithHttpInfo (UpdateUserPasswordDto updatePasswordParameters)
        {
            // verify the required parameter 'updatePasswordParameters' is set
            if (updatePasswordParameters == null)
                throw new ApiException(400, "Missing required parameter 'updatePasswordParameters' when calling UsersApi->UsersUpdatePassword");

            var localVarPath = "/odata/Users/UiPath.Server.Configuration.OData.UpdatePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updatePasswordParameters != null && updatePasswordParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updatePasswordParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePasswordParameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersUpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
