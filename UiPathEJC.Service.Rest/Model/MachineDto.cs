/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// The Machine that hosts the Robot
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class MachineDto :  IEquatable<MachineDto>, IValidatableObject
    {
        /// <summary>
        /// The type of the Machine (Standard / Template).
        /// </summary>
        /// <value>The type of the Machine (Standard / Template).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Standard for value: Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard = 1,
            
            /// <summary>
            /// Enum Template for value: Template
            /// </summary>
            [EnumMember(Value = "Template")]
            Template = 2
        }

        /// <summary>
        /// The type of the Machine (Standard / Template).
        /// </summary>
        /// <value>The type of the Machine (Standard / Template).</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MachineDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineDto" /> class.
        /// </summary>
        /// <param name="LicenseKey">The key is automatically generated from the server for the Robot machine.  &lt;para /&gt;For the robot to work, the same key must exist on both the robot and Orchestrator.  &lt;para /&gt;All robots on a machine must have the same license key in order to register correctly..</param>
        /// <param name="Name">The name of the Machine a Robot is hosted on. (required).</param>
        /// <param name="Type">The type of the Machine (Standard / Template)..</param>
        /// <param name="NonProductionSlots">Number of NonProduction slots to be reserved at runtime.</param>
        /// <param name="UnattendedSlots">Number of Unattended slots to be reserved at runtime.</param>
        /// <param name="RobotVersions">The versions of the Robots hosted on the Machine..</param>
        /// <param name="Id">Id.</param>
        public MachineDto(string LicenseKey = default(string), string Name = default(string), TypeEnum? Type = default(TypeEnum?), int? NonProductionSlots = default(int?), int? UnattendedSlots = default(int?), List<MachinesRobotVersionDto> RobotVersions = default(List<MachinesRobotVersionDto>), long? Id = default(long?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for MachineDto and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.LicenseKey = LicenseKey;
            this.Type = Type;
            this.NonProductionSlots = NonProductionSlots;
            this.UnattendedSlots = UnattendedSlots;
            this.RobotVersions = RobotVersions;
            this.Id = Id;
        }
        
        /// <summary>
        /// The key is automatically generated from the server for the Robot machine.  &lt;para /&gt;For the robot to work, the same key must exist on both the robot and Orchestrator.  &lt;para /&gt;All robots on a machine must have the same license key in order to register correctly.
        /// </summary>
        /// <value>The key is automatically generated from the server for the Robot machine.  &lt;para /&gt;For the robot to work, the same key must exist on both the robot and Orchestrator.  &lt;para /&gt;All robots on a machine must have the same license key in order to register correctly.</value>
        [DataMember(Name="LicenseKey", EmitDefaultValue=false)]
        public string LicenseKey { get; set; }

        /// <summary>
        /// The name of the Machine a Robot is hosted on.
        /// </summary>
        /// <value>The name of the Machine a Robot is hosted on.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Number of NonProduction slots to be reserved at runtime
        /// </summary>
        /// <value>Number of NonProduction slots to be reserved at runtime</value>
        [DataMember(Name="NonProductionSlots", EmitDefaultValue=false)]
        public int? NonProductionSlots { get; set; }

        /// <summary>
        /// Number of Unattended slots to be reserved at runtime
        /// </summary>
        /// <value>Number of Unattended slots to be reserved at runtime</value>
        [DataMember(Name="UnattendedSlots", EmitDefaultValue=false)]
        public int? UnattendedSlots { get; set; }

        /// <summary>
        /// The versions of the Robots hosted on the Machine.
        /// </summary>
        /// <value>The versions of the Robots hosted on the Machine.</value>
        [DataMember(Name="RobotVersions", EmitDefaultValue=false)]
        public List<MachinesRobotVersionDto> RobotVersions { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineDto {\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NonProductionSlots: ").Append(NonProductionSlots).Append("\n");
            sb.Append("  UnattendedSlots: ").Append(UnattendedSlots).Append("\n");
            sb.Append("  RobotVersions: ").Append(RobotVersions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachineDto);
        }

        /// <summary>
        /// Returns true if MachineDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MachineDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LicenseKey == input.LicenseKey ||
                    (this.LicenseKey != null &&
                    this.LicenseKey.Equals(input.LicenseKey))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NonProductionSlots == input.NonProductionSlots ||
                    (this.NonProductionSlots != null &&
                    this.NonProductionSlots.Equals(input.NonProductionSlots))
                ) && 
                (
                    this.UnattendedSlots == input.UnattendedSlots ||
                    (this.UnattendedSlots != null &&
                    this.UnattendedSlots.Equals(input.UnattendedSlots))
                ) && 
                (
                    this.RobotVersions == input.RobotVersions ||
                    this.RobotVersions != null &&
                    this.RobotVersions.SequenceEqual(input.RobotVersions)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicenseKey != null)
                    hashCode = hashCode * 59 + this.LicenseKey.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NonProductionSlots != null)
                    hashCode = hashCode * 59 + this.NonProductionSlots.GetHashCode();
                if (this.UnattendedSlots != null)
                    hashCode = hashCode * 59 + this.UnattendedSlots.GetHashCode();
                if (this.RobotVersions != null)
                    hashCode = hashCode * 59 + this.RobotVersions.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LicenseKey (string) maxLength
            if(this.LicenseKey != null && this.LicenseKey.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseKey, length must be less than 255.", new [] { "LicenseKey" });
            }

            // LicenseKey (string) minLength
            if(this.LicenseKey != null && this.LicenseKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseKey, length must be greater than 0.", new [] { "LicenseKey" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
