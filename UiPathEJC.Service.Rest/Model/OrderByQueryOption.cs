/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// OrderByQueryOption
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class OrderByQueryOption :  IEquatable<OrderByQueryOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderByQueryOption" /> class.
        /// </summary>
        /// <param name="Context">Context.</param>
        /// <param name="OrderByNodes">OrderByNodes.</param>
        /// <param name="Validator">Validator.</param>
        /// <param name="OrderByClause">OrderByClause.</param>
        public OrderByQueryOption(ODataQueryContext Context = default(ODataQueryContext), List<OrderByNode> OrderByNodes = default(List<OrderByNode>), OrderByQueryValidator Validator = default(OrderByQueryValidator), OrderByClause OrderByClause = default(OrderByClause))
        {
            this.Context = Context;
            this.OrderByNodes = OrderByNodes;
            this.Validator = Validator;
            this.OrderByClause = OrderByClause;
        }
        
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="Context", EmitDefaultValue=false)]
        public ODataQueryContext Context { get; set; }

        /// <summary>
        /// Gets or Sets OrderByNodes
        /// </summary>
        [DataMember(Name="OrderByNodes", EmitDefaultValue=false)]
        public List<OrderByNode> OrderByNodes { get; set; }

        /// <summary>
        /// Gets or Sets RawValue
        /// </summary>
        [DataMember(Name="RawValue", EmitDefaultValue=false)]
        public string RawValue { get; private set; }

        /// <summary>
        /// Gets or Sets Validator
        /// </summary>
        [DataMember(Name="Validator", EmitDefaultValue=false)]
        public OrderByQueryValidator Validator { get; set; }

        /// <summary>
        /// Gets or Sets OrderByClause
        /// </summary>
        [DataMember(Name="OrderByClause", EmitDefaultValue=false)]
        public OrderByClause OrderByClause { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderByQueryOption {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  OrderByNodes: ").Append(OrderByNodes).Append("\n");
            sb.Append("  RawValue: ").Append(RawValue).Append("\n");
            sb.Append("  Validator: ").Append(Validator).Append("\n");
            sb.Append("  OrderByClause: ").Append(OrderByClause).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderByQueryOption);
        }

        /// <summary>
        /// Returns true if OrderByQueryOption instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderByQueryOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderByQueryOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.OrderByNodes == input.OrderByNodes ||
                    this.OrderByNodes != null &&
                    this.OrderByNodes.SequenceEqual(input.OrderByNodes)
                ) && 
                (
                    this.RawValue == input.RawValue ||
                    (this.RawValue != null &&
                    this.RawValue.Equals(input.RawValue))
                ) && 
                (
                    this.Validator == input.Validator ||
                    (this.Validator != null &&
                    this.Validator.Equals(input.Validator))
                ) && 
                (
                    this.OrderByClause == input.OrderByClause ||
                    (this.OrderByClause != null &&
                    this.OrderByClause.Equals(input.OrderByClause))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.OrderByNodes != null)
                    hashCode = hashCode * 59 + this.OrderByNodes.GetHashCode();
                if (this.RawValue != null)
                    hashCode = hashCode * 59 + this.RawValue.GetHashCode();
                if (this.Validator != null)
                    hashCode = hashCode * 59 + this.Validator.GetHashCode();
                if (this.OrderByClause != null)
                    hashCode = hashCode * 59 + this.OrderByClause.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
