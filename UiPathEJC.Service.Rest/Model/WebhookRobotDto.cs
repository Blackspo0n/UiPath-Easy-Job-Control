/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// WebhookRobotDto
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class WebhookRobotDto :  IEquatable<WebhookRobotDto>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NonProduction for value: NonProduction
            /// </summary>
            [EnumMember(Value = "NonProduction")]
            NonProduction = 1,
            
            /// <summary>
            /// Enum Attended for value: Attended
            /// </summary>
            [EnumMember(Value = "Attended")]
            Attended = 2,
            
            /// <summary>
            /// Enum Unattended for value: Unattended
            /// </summary>
            [EnumMember(Value = "Unattended")]
            Unattended = 3,
            
            /// <summary>
            /// Enum Development for value: Development
            /// </summary>
            [EnumMember(Value = "Development")]
            Development = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines HostingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HostingTypeEnum
        {
            
            /// <summary>
            /// Enum Standard for value: Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard = 1,
            
            /// <summary>
            /// Enum Floating for value: Floating
            /// </summary>
            [EnumMember(Value = "Floating")]
            Floating = 2
        }

        /// <summary>
        /// Gets or Sets HostingType
        /// </summary>
        [DataMember(Name="HostingType", EmitDefaultValue=false)]
        public HostingTypeEnum? HostingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookRobotDto" /> class.
        /// </summary>
        /// <param name="Environments">Environments.</param>
        /// <param name="ExecutionSettings">ExecutionSettings.</param>
        public WebhookRobotDto(List<WebhookEnvironmentDto> Environments = default(List<WebhookEnvironmentDto>), Dictionary<string, Object> ExecutionSettings = default(Dictionary<string, Object>))
        {
            this.Environments = Environments;
            this.ExecutionSettings = ExecutionSettings;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets MachineId
        /// </summary>
        [DataMember(Name="MachineId", EmitDefaultValue=false)]
        public long? MachineId { get; private set; }

        /// <summary>
        /// Gets or Sets MachineName
        /// </summary>
        [DataMember(Name="MachineName", EmitDefaultValue=false)]
        public string MachineName { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="UserName", EmitDefaultValue=false)]
        public string UserName { get; private set; }



        /// <summary>
        /// Gets or Sets Environments
        /// </summary>
        [DataMember(Name="Environments", EmitDefaultValue=false)]
        public List<WebhookEnvironmentDto> Environments { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionSettings
        /// </summary>
        [DataMember(Name="ExecutionSettings", EmitDefaultValue=false)]
        public Dictionary<string, Object> ExecutionSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookRobotDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HostingType: ").Append(HostingType).Append("\n");
            sb.Append("  Environments: ").Append(Environments).Append("\n");
            sb.Append("  ExecutionSettings: ").Append(ExecutionSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookRobotDto);
        }

        /// <summary>
        /// Returns true if WebhookRobotDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookRobotDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookRobotDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.HostingType == input.HostingType ||
                    (this.HostingType != null &&
                    this.HostingType.Equals(input.HostingType))
                ) && 
                (
                    this.Environments == input.Environments ||
                    this.Environments != null &&
                    this.Environments.SequenceEqual(input.Environments)
                ) && 
                (
                    this.ExecutionSettings == input.ExecutionSettings ||
                    this.ExecutionSettings != null &&
                    this.ExecutionSettings.SequenceEqual(input.ExecutionSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.MachineName != null)
                    hashCode = hashCode * 59 + this.MachineName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.HostingType != null)
                    hashCode = hashCode * 59 + this.HostingType.GetHashCode();
                if (this.Environments != null)
                    hashCode = hashCode * 59 + this.Environments.GetHashCode();
                if (this.ExecutionSettings != null)
                    hashCode = hashCode * 59 + this.ExecutionSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
