/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Logs generated by Robots and execution reports. Can be stored in ElasticSearch and/or to a local SQL database.  &lt;para /&gt;Note: The endpoint for this type is /odata/RobotLogs URL.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class LogDto :  IEquatable<LogDto>, IValidatableObject
    {
        /// <summary>
        /// Defines the log severity.
        /// </summary>
        /// <value>Defines the log severity.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            
            /// <summary>
            /// Enum Trace for value: Trace
            /// </summary>
            [EnumMember(Value = "Trace")]
            Trace = 1,
            
            /// <summary>
            /// Enum Debug for value: Debug
            /// </summary>
            [EnumMember(Value = "Debug")]
            Debug = 2,
            
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 3,
            
            /// <summary>
            /// Enum Warn for value: Warn
            /// </summary>
            [EnumMember(Value = "Warn")]
            Warn = 4,
            
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 5,
            
            /// <summary>
            /// Enum Fatal for value: Fatal
            /// </summary>
            [EnumMember(Value = "Fatal")]
            Fatal = 6
        }

        /// <summary>
        /// Defines the log severity.
        /// </summary>
        /// <value>Defines the log severity.</value>
        [DataMember(Name="Level", EmitDefaultValue=false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogDto" /> class.
        /// </summary>
        /// <param name="Level">Defines the log severity..</param>
        /// <param name="WindowsIdentity">The name of the user that performed the action that was logged..</param>
        /// <param name="ProcessName">The name of the process..</param>
        /// <param name="TimeStamp">The exact date and time the action was performed..</param>
        /// <param name="Message">The log message. This can also be a message logged through the Log Message activity in UiPath Studio..</param>
        /// <param name="JobKey">The key of the job running the process that generated the log, if any..</param>
        /// <param name="RawMessage">A JSON format message containing all the above fields..</param>
        /// <param name="RobotName">The name of the Robot that generated the log..</param>
        /// <param name="MachineId">The Id of the Machine on which the Robot that generated the log is running..</param>
        /// <param name="Id">Id.</param>
        public LogDto(LevelEnum? Level = default(LevelEnum?), string WindowsIdentity = default(string), string ProcessName = default(string), DateTime? TimeStamp = default(DateTime?), string Message = default(string), Guid? JobKey = default(Guid?), string RawMessage = default(string), string RobotName = default(string), long? MachineId = default(long?), long? Id = default(long?))
        {
            this.Level = Level;
            this.WindowsIdentity = WindowsIdentity;
            this.ProcessName = ProcessName;
            this.TimeStamp = TimeStamp;
            this.Message = Message;
            this.JobKey = JobKey;
            this.RawMessage = RawMessage;
            this.RobotName = RobotName;
            this.MachineId = MachineId;
            this.Id = Id;
        }
        

        /// <summary>
        /// The name of the user that performed the action that was logged.
        /// </summary>
        /// <value>The name of the user that performed the action that was logged.</value>
        [DataMember(Name="WindowsIdentity", EmitDefaultValue=false)]
        public string WindowsIdentity { get; set; }

        /// <summary>
        /// The name of the process.
        /// </summary>
        /// <value>The name of the process.</value>
        [DataMember(Name="ProcessName", EmitDefaultValue=false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// The exact date and time the action was performed.
        /// </summary>
        /// <value>The exact date and time the action was performed.</value>
        [DataMember(Name="TimeStamp", EmitDefaultValue=false)]
        public DateTime? TimeStamp { get; set; }

        /// <summary>
        /// The log message. This can also be a message logged through the Log Message activity in UiPath Studio.
        /// </summary>
        /// <value>The log message. This can also be a message logged through the Log Message activity in UiPath Studio.</value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The key of the job running the process that generated the log, if any.
        /// </summary>
        /// <value>The key of the job running the process that generated the log, if any.</value>
        [DataMember(Name="JobKey", EmitDefaultValue=false)]
        public Guid? JobKey { get; set; }

        /// <summary>
        /// A JSON format message containing all the above fields.
        /// </summary>
        /// <value>A JSON format message containing all the above fields.</value>
        [DataMember(Name="RawMessage", EmitDefaultValue=false)]
        public string RawMessage { get; set; }

        /// <summary>
        /// The name of the Robot that generated the log.
        /// </summary>
        /// <value>The name of the Robot that generated the log.</value>
        [DataMember(Name="RobotName", EmitDefaultValue=false)]
        public string RobotName { get; set; }

        /// <summary>
        /// The Id of the Machine on which the Robot that generated the log is running.
        /// </summary>
        /// <value>The Id of the Machine on which the Robot that generated the log is running.</value>
        [DataMember(Name="MachineId", EmitDefaultValue=false)]
        public long? MachineId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogDto {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  WindowsIdentity: ").Append(WindowsIdentity).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  JobKey: ").Append(JobKey).Append("\n");
            sb.Append("  RawMessage: ").Append(RawMessage).Append("\n");
            sb.Append("  RobotName: ").Append(RobotName).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogDto);
        }

        /// <summary>
        /// Returns true if LogDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LogDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.WindowsIdentity == input.WindowsIdentity ||
                    (this.WindowsIdentity != null &&
                    this.WindowsIdentity.Equals(input.WindowsIdentity))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.JobKey == input.JobKey ||
                    (this.JobKey != null &&
                    this.JobKey.Equals(input.JobKey))
                ) && 
                (
                    this.RawMessage == input.RawMessage ||
                    (this.RawMessage != null &&
                    this.RawMessage.Equals(input.RawMessage))
                ) && 
                (
                    this.RobotName == input.RobotName ||
                    (this.RobotName != null &&
                    this.RobotName.Equals(input.RobotName))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.WindowsIdentity != null)
                    hashCode = hashCode * 59 + this.WindowsIdentity.GetHashCode();
                if (this.ProcessName != null)
                    hashCode = hashCode * 59 + this.ProcessName.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.JobKey != null)
                    hashCode = hashCode * 59 + this.JobKey.GetHashCode();
                if (this.RawMessage != null)
                    hashCode = hashCode * 59 + this.RawMessage.GetHashCode();
                if (this.RobotName != null)
                    hashCode = hashCode * 59 + this.RobotName.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
