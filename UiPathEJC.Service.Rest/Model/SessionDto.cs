/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores information about the last status reported to Orchestrator by a registered robot.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class SessionDto :  IEquatable<SessionDto>, IValidatableObject
    {
        /// <summary>
        /// The value of the last reported status.
        /// </summary>
        /// <value>The value of the last reported status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Available for value: Available
            /// </summary>
            [EnumMember(Value = "Available")]
            Available = 1,
            
            /// <summary>
            /// Enum Busy for value: Busy
            /// </summary>
            [EnumMember(Value = "Busy")]
            Busy = 2,
            
            /// <summary>
            /// Enum Disconnected for value: Disconnected
            /// </summary>
            [EnumMember(Value = "Disconnected")]
            Disconnected = 3,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 4
        }

        /// <summary>
        /// The value of the last reported status.
        /// </summary>
        /// <value>The value of the last reported status.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Last licensing error status.
        /// </summary>
        /// <value>Last licensing error status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LicenseErrorCodeEnum
        {
            
            /// <summary>
            /// Enum NoLicense for value: NoLicense
            /// </summary>
            [EnumMember(Value = "NoLicense")]
            NoLicense = 1,
            
            /// <summary>
            /// Enum LicenseExpired for value: LicenseExpired
            /// </summary>
            [EnumMember(Value = "LicenseExpired")]
            LicenseExpired = 2,
            
            /// <summary>
            /// Enum LicenseUnregistered for value: LicenseUnregistered
            /// </summary>
            [EnumMember(Value = "LicenseUnregistered")]
            LicenseUnregistered = 3,
            
            /// <summary>
            /// Enum NoAvailableLicenses for value: NoAvailableLicenses
            /// </summary>
            [EnumMember(Value = "NoAvailableLicenses")]
            NoAvailableLicenses = 4,
            
            /// <summary>
            /// Enum NotEnoughAvailableSlots for value: NotEnoughAvailableSlots
            /// </summary>
            [EnumMember(Value = "NotEnoughAvailableSlots")]
            NotEnoughAvailableSlots = 5,
            
            /// <summary>
            /// Enum NotEnoughRuntimeLicenses for value: NotEnoughRuntimeLicenses
            /// </summary>
            [EnumMember(Value = "NotEnoughRuntimeLicenses")]
            NotEnoughRuntimeLicenses = 6,
            
            /// <summary>
            /// Enum LicenseIsAlreadyInUse for value: LicenseIsAlreadyInUse
            /// </summary>
            [EnumMember(Value = "LicenseIsAlreadyInUse")]
            LicenseIsAlreadyInUse = 7,
            
            /// <summary>
            /// Enum InvalidRequest for value: InvalidRequest
            /// </summary>
            [EnumMember(Value = "InvalidRequest")]
            InvalidRequest = 8,
            
            /// <summary>
            /// Enum SlotsExceedLicenseLimit for value: SlotsExceedLicenseLimit
            /// </summary>
            [EnumMember(Value = "SlotsExceedLicenseLimit")]
            SlotsExceedLicenseLimit = 9,
            
            /// <summary>
            /// Enum RuntimeDisabled for value: RuntimeDisabled
            /// </summary>
            [EnumMember(Value = "RuntimeDisabled")]
            RuntimeDisabled = 10
        }

        /// <summary>
        /// Last licensing error status.
        /// </summary>
        /// <value>Last licensing error status.</value>
        [DataMember(Name="LicenseErrorCode", EmitDefaultValue=false)]
        public LicenseErrorCodeEnum? LicenseErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDto" /> class.
        /// </summary>
        /// <param name="Robot">The Robot for which the information is stored..</param>
        /// <param name="HostMachineName">The name of the machine a Robot is hosted on..</param>
        /// <param name="MachineId">The Id of the Machine..</param>
        /// <param name="MachineName">The Machine&#39;s name..</param>
        /// <param name="State">The value of the last reported status..</param>
        /// <param name="Job">The Job that is executed by the robot..</param>
        /// <param name="ReportingTime">The date and time when the last heartbeat came..</param>
        /// <param name="Info">May store additional information about the robot state..</param>
        /// <param name="IsUnresponsive">If the robot did not report status for longer than 120 seconds..</param>
        /// <param name="LicenseErrorCode">Last licensing error status..</param>
        /// <param name="Id">Id.</param>
        public SessionDto(RobotWithLicenseDto Robot = default(RobotWithLicenseDto), string HostMachineName = default(string), long? MachineId = default(long?), string MachineName = default(string), StateEnum? State = default(StateEnum?), JobDto Job = default(JobDto), DateTime? ReportingTime = default(DateTime?), string Info = default(string), bool? IsUnresponsive = default(bool?), LicenseErrorCodeEnum? LicenseErrorCode = default(LicenseErrorCodeEnum?), long? Id = default(long?))
        {
            this.Robot = Robot;
            this.HostMachineName = HostMachineName;
            this.MachineId = MachineId;
            this.MachineName = MachineName;
            this.State = State;
            this.Job = Job;
            this.ReportingTime = ReportingTime;
            this.Info = Info;
            this.IsUnresponsive = IsUnresponsive;
            this.LicenseErrorCode = LicenseErrorCode;
            this.Id = Id;
        }
        
        /// <summary>
        /// The Robot for which the information is stored.
        /// </summary>
        /// <value>The Robot for which the information is stored.</value>
        [DataMember(Name="Robot", EmitDefaultValue=false)]
        public RobotWithLicenseDto Robot { get; set; }

        /// <summary>
        /// The name of the machine a Robot is hosted on.
        /// </summary>
        /// <value>The name of the machine a Robot is hosted on.</value>
        [DataMember(Name="HostMachineName", EmitDefaultValue=false)]
        public string HostMachineName { get; set; }

        /// <summary>
        /// The Id of the Machine.
        /// </summary>
        /// <value>The Id of the Machine.</value>
        [DataMember(Name="MachineId", EmitDefaultValue=false)]
        public long? MachineId { get; set; }

        /// <summary>
        /// The Machine&#39;s name.
        /// </summary>
        /// <value>The Machine&#39;s name.</value>
        [DataMember(Name="MachineName", EmitDefaultValue=false)]
        public string MachineName { get; set; }


        /// <summary>
        /// The Job that is executed by the robot.
        /// </summary>
        /// <value>The Job that is executed by the robot.</value>
        [DataMember(Name="Job", EmitDefaultValue=false)]
        public JobDto Job { get; set; }

        /// <summary>
        /// The date and time when the last heartbeat came.
        /// </summary>
        /// <value>The date and time when the last heartbeat came.</value>
        [DataMember(Name="ReportingTime", EmitDefaultValue=false)]
        public DateTime? ReportingTime { get; set; }

        /// <summary>
        /// May store additional information about the robot state.
        /// </summary>
        /// <value>May store additional information about the robot state.</value>
        [DataMember(Name="Info", EmitDefaultValue=false)]
        public string Info { get; set; }

        /// <summary>
        /// If the robot did not report status for longer than 120 seconds.
        /// </summary>
        /// <value>If the robot did not report status for longer than 120 seconds.</value>
        [DataMember(Name="IsUnresponsive", EmitDefaultValue=false)]
        public bool? IsUnresponsive { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionDto {\n");
            sb.Append("  Robot: ").Append(Robot).Append("\n");
            sb.Append("  HostMachineName: ").Append(HostMachineName).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Job: ").Append(Job).Append("\n");
            sb.Append("  ReportingTime: ").Append(ReportingTime).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  IsUnresponsive: ").Append(IsUnresponsive).Append("\n");
            sb.Append("  LicenseErrorCode: ").Append(LicenseErrorCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionDto);
        }

        /// <summary>
        /// Returns true if SessionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Robot == input.Robot ||
                    (this.Robot != null &&
                    this.Robot.Equals(input.Robot))
                ) && 
                (
                    this.HostMachineName == input.HostMachineName ||
                    (this.HostMachineName != null &&
                    this.HostMachineName.Equals(input.HostMachineName))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Job == input.Job ||
                    (this.Job != null &&
                    this.Job.Equals(input.Job))
                ) && 
                (
                    this.ReportingTime == input.ReportingTime ||
                    (this.ReportingTime != null &&
                    this.ReportingTime.Equals(input.ReportingTime))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.IsUnresponsive == input.IsUnresponsive ||
                    (this.IsUnresponsive != null &&
                    this.IsUnresponsive.Equals(input.IsUnresponsive))
                ) && 
                (
                    this.LicenseErrorCode == input.LicenseErrorCode ||
                    (this.LicenseErrorCode != null &&
                    this.LicenseErrorCode.Equals(input.LicenseErrorCode))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Robot != null)
                    hashCode = hashCode * 59 + this.Robot.GetHashCode();
                if (this.HostMachineName != null)
                    hashCode = hashCode * 59 + this.HostMachineName.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.MachineName != null)
                    hashCode = hashCode * 59 + this.MachineName.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Job != null)
                    hashCode = hashCode * 59 + this.Job.GetHashCode();
                if (this.ReportingTime != null)
                    hashCode = hashCode * 59 + this.ReportingTime.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.IsUnresponsive != null)
                    hashCode = hashCode * 59 + this.IsUnresponsive.GetHashCode();
                if (this.LicenseErrorCode != null)
                    hashCode = hashCode * 59 + this.LicenseErrorCode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
