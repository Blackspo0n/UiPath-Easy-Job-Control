/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores notification data used to inform the users about specific application events.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class AlertDto :  IEquatable<AlertDto>, IValidatableObject
    {
        /// <summary>
        /// The component that raised the alert.
        /// </summary>
        /// <value>The component that raised the alert.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentEnum
        {
            
            /// <summary>
            /// Enum Robots for value: Robots
            /// </summary>
            [EnumMember(Value = "Robots")]
            Robots = 1,
            
            /// <summary>
            /// Enum Transactions for value: Transactions
            /// </summary>
            [EnumMember(Value = "Transactions")]
            Transactions = 2,
            
            /// <summary>
            /// Enum Schedules for value: Schedules
            /// </summary>
            [EnumMember(Value = "Schedules")]
            Schedules = 3,
            
            /// <summary>
            /// Enum Jobs for value: Jobs
            /// </summary>
            [EnumMember(Value = "Jobs")]
            Jobs = 4,
            
            /// <summary>
            /// Enum Process for value: Process
            /// </summary>
            [EnumMember(Value = "Process")]
            Process = 5
        }

        /// <summary>
        /// The component that raised the alert.
        /// </summary>
        /// <value>The component that raised the alert.</value>
        [DataMember(Name="Component", EmitDefaultValue=false)]
        public ComponentEnum? Component { get; set; }
        /// <summary>
        /// The severity level of the alert.
        /// </summary>
        /// <value>The severity level of the alert.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 1,
            
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 2,
            
            /// <summary>
            /// Enum Warn for value: Warn
            /// </summary>
            [EnumMember(Value = "Warn")]
            Warn = 3,
            
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 4,
            
            /// <summary>
            /// Enum Fatal for value: Fatal
            /// </summary>
            [EnumMember(Value = "Fatal")]
            Fatal = 5
        }

        /// <summary>
        /// The severity level of the alert.
        /// </summary>
        /// <value>The severity level of the alert.</value>
        [DataMember(Name="Severity", EmitDefaultValue=false)]
        public SeverityEnum Severity { get; set; }
        /// <summary>
        /// Defines if a specified notification has been read or not.  &lt;para /&gt;Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.
        /// </summary>
        /// <value>Defines if a specified notification has been read or not.  &lt;para /&gt;Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Unread for value: Unread
            /// </summary>
            [EnumMember(Value = "Unread")]
            Unread = 1,
            
            /// <summary>
            /// Enum Read for value: Read
            /// </summary>
            [EnumMember(Value = "Read")]
            Read = 2
        }

        /// <summary>
        /// Defines if a specified notification has been read or not.  &lt;para /&gt;Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.
        /// </summary>
        /// <value>Defines if a specified notification has been read or not.  &lt;para /&gt;Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AlertDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertDto" /> class.
        /// </summary>
        /// <param name="NotificationName">The name of a specific type of notification, e.g. Robot.StatusChanged.NotResponding..</param>
        /// <param name="Data">Stores data about the context in which the event occurred, in JSON format..</param>
        /// <param name="Component">The component that raised the alert..</param>
        /// <param name="Severity">The severity level of the alert. (required).</param>
        /// <param name="CreationTime">The date and time when the alert was generated..</param>
        /// <param name="State">Defines if a specified notification has been read or not.  &lt;para /&gt;Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read..</param>
        /// <param name="UserNotificationId">The database unique identifier for the alert notification sent to the current user..</param>
        /// <param name="Id">Id.</param>
        public AlertDto(string NotificationName = default(string), string Data = default(string), ComponentEnum? Component = default(ComponentEnum?), SeverityEnum Severity = default(SeverityEnum), DateTime? CreationTime = default(DateTime?), StateEnum? State = default(StateEnum?), Guid? UserNotificationId = default(Guid?), Guid? Id = default(Guid?))
        {
            // to ensure "Severity" is required (not null)
            if (Severity == null)
            {
                throw new InvalidDataException("Severity is a required property for AlertDto and cannot be null");
            }
            else
            {
                this.Severity = Severity;
            }
            this.NotificationName = NotificationName;
            this.Data = Data;
            this.Component = Component;
            this.CreationTime = CreationTime;
            this.State = State;
            this.UserNotificationId = UserNotificationId;
            this.Id = Id;
        }
        
        /// <summary>
        /// The name of a specific type of notification, e.g. Robot.StatusChanged.NotResponding.
        /// </summary>
        /// <value>The name of a specific type of notification, e.g. Robot.StatusChanged.NotResponding.</value>
        [DataMember(Name="NotificationName", EmitDefaultValue=false)]
        public string NotificationName { get; set; }

        /// <summary>
        /// Stores data about the context in which the event occurred, in JSON format.
        /// </summary>
        /// <value>Stores data about the context in which the event occurred, in JSON format.</value>
        [DataMember(Name="Data", EmitDefaultValue=false)]
        public string Data { get; set; }



        /// <summary>
        /// The date and time when the alert was generated.
        /// </summary>
        /// <value>The date and time when the alert was generated.</value>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }


        /// <summary>
        /// The database unique identifier for the alert notification sent to the current user.
        /// </summary>
        /// <value>The database unique identifier for the alert notification sent to the current user.</value>
        [DataMember(Name="UserNotificationId", EmitDefaultValue=false)]
        public Guid? UserNotificationId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertDto {\n");
            sb.Append("  NotificationName: ").Append(NotificationName).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UserNotificationId: ").Append(UserNotificationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertDto);
        }

        /// <summary>
        /// Returns true if AlertDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotificationName == input.NotificationName ||
                    (this.NotificationName != null &&
                    this.NotificationName.Equals(input.NotificationName))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.UserNotificationId == input.UserNotificationId ||
                    (this.UserNotificationId != null &&
                    this.UserNotificationId.Equals(input.UserNotificationId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotificationName != null)
                    hashCode = hashCode * 59 + this.NotificationName.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Component != null)
                    hashCode = hashCode * 59 + this.Component.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.UserNotificationId != null)
                    hashCode = hashCode * 59 + this.UserNotificationId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
