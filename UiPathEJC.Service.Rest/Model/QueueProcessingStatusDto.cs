/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PropertyChanged;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UiPathEJC.Service.Rest.Client.SwaggerDateConverter;

namespace UiPathEJC.Service.Rest.Model
{
    /// <summary>
    /// Stores aggregated report information about the processing status of all the items from a given queue.
    /// </summary>
    [DataContract]
    [ImplementPropertyChanged]
    public partial class QueueProcessingStatusDto :  IEquatable<QueueProcessingStatusDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueProcessingStatusDto" /> class.
        /// </summary>
        /// <param name="ItemsToProcess">The total number of items in the queue with the status New..</param>
        /// <param name="ItemsInProgress">The total number of items in the queue with the status InProgress..</param>
        /// <param name="QueueDefinitionId">The Id of the queue for which the report is done..</param>
        /// <param name="QueueDefinitionName">The name of the queue for which the report is done..</param>
        /// <param name="QueueDefinitionDescription">The description of the queue for which the report is done..</param>
        /// <param name="QueueDefinitionAcceptAutomaticallyRetry">States whether the queue accepts automatic item retry or not..</param>
        /// <param name="QueueDefinitionMaxNumberOfRetries">The maximum number of retries allowed for any item of the queue..</param>
        /// <param name="QueueDefinitionEnforceUniqueReference">States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule..</param>
        /// <param name="ProcessingMeanTime">The average time spent processing a successful item..</param>
        /// <param name="SuccessfulTransactionsNo">The total number of successfully processed items..</param>
        /// <param name="ApplicationExceptionsNo">The total number of application exceptions thrown while processing queue items..</param>
        /// <param name="BusinessExceptionsNo">The total number of business exceptions thrown while processing queue items..</param>
        /// <param name="SuccessfulTransactionsProcessingTime">The total number of seconds spent processing successful queue items..</param>
        /// <param name="ApplicationExceptionsProcessingTime">The total number of seconds spent processing queue items that failed with application exception..</param>
        /// <param name="BusinessExceptionsProcessingTime">The total number of seconds spent processing queue items that failed with business exception..</param>
        /// <param name="TotalNumberOfTransactions">The total number of item processing transactions, both failed and successful..</param>
        /// <param name="LastProcessed">The date and time of the last item processing..</param>
        /// <param name="Id">Id.</param>
        public QueueProcessingStatusDto(int? ItemsToProcess = default(int?), int? ItemsInProgress = default(int?), long? QueueDefinitionId = default(long?), string QueueDefinitionName = default(string), string QueueDefinitionDescription = default(string), bool? QueueDefinitionAcceptAutomaticallyRetry = default(bool?), int? QueueDefinitionMaxNumberOfRetries = default(int?), bool? QueueDefinitionEnforceUniqueReference = default(bool?), decimal? ProcessingMeanTime = default(decimal?), int? SuccessfulTransactionsNo = default(int?), int? ApplicationExceptionsNo = default(int?), int? BusinessExceptionsNo = default(int?), decimal? SuccessfulTransactionsProcessingTime = default(decimal?), decimal? ApplicationExceptionsProcessingTime = default(decimal?), decimal? BusinessExceptionsProcessingTime = default(decimal?), int? TotalNumberOfTransactions = default(int?), DateTime? LastProcessed = default(DateTime?), long? Id = default(long?))
        {
            this.ItemsToProcess = ItemsToProcess;
            this.ItemsInProgress = ItemsInProgress;
            this.QueueDefinitionId = QueueDefinitionId;
            this.QueueDefinitionName = QueueDefinitionName;
            this.QueueDefinitionDescription = QueueDefinitionDescription;
            this.QueueDefinitionAcceptAutomaticallyRetry = QueueDefinitionAcceptAutomaticallyRetry;
            this.QueueDefinitionMaxNumberOfRetries = QueueDefinitionMaxNumberOfRetries;
            this.QueueDefinitionEnforceUniqueReference = QueueDefinitionEnforceUniqueReference;
            this.ProcessingMeanTime = ProcessingMeanTime;
            this.SuccessfulTransactionsNo = SuccessfulTransactionsNo;
            this.ApplicationExceptionsNo = ApplicationExceptionsNo;
            this.BusinessExceptionsNo = BusinessExceptionsNo;
            this.SuccessfulTransactionsProcessingTime = SuccessfulTransactionsProcessingTime;
            this.ApplicationExceptionsProcessingTime = ApplicationExceptionsProcessingTime;
            this.BusinessExceptionsProcessingTime = BusinessExceptionsProcessingTime;
            this.TotalNumberOfTransactions = TotalNumberOfTransactions;
            this.LastProcessed = LastProcessed;
            this.Id = Id;
        }
        
        /// <summary>
        /// The total number of items in the queue with the status New.
        /// </summary>
        /// <value>The total number of items in the queue with the status New.</value>
        [DataMember(Name="ItemsToProcess", EmitDefaultValue=false)]
        public int? ItemsToProcess { get; set; }

        /// <summary>
        /// The total number of items in the queue with the status InProgress.
        /// </summary>
        /// <value>The total number of items in the queue with the status InProgress.</value>
        [DataMember(Name="ItemsInProgress", EmitDefaultValue=false)]
        public int? ItemsInProgress { get; set; }

        /// <summary>
        /// The Id of the queue for which the report is done.
        /// </summary>
        /// <value>The Id of the queue for which the report is done.</value>
        [DataMember(Name="QueueDefinitionId", EmitDefaultValue=false)]
        public long? QueueDefinitionId { get; set; }

        /// <summary>
        /// The name of the queue for which the report is done.
        /// </summary>
        /// <value>The name of the queue for which the report is done.</value>
        [DataMember(Name="QueueDefinitionName", EmitDefaultValue=false)]
        public string QueueDefinitionName { get; set; }

        /// <summary>
        /// The description of the queue for which the report is done.
        /// </summary>
        /// <value>The description of the queue for which the report is done.</value>
        [DataMember(Name="QueueDefinitionDescription", EmitDefaultValue=false)]
        public string QueueDefinitionDescription { get; set; }

        /// <summary>
        /// States whether the queue accepts automatic item retry or not.
        /// </summary>
        /// <value>States whether the queue accepts automatic item retry or not.</value>
        [DataMember(Name="QueueDefinitionAcceptAutomaticallyRetry", EmitDefaultValue=false)]
        public bool? QueueDefinitionAcceptAutomaticallyRetry { get; set; }

        /// <summary>
        /// The maximum number of retries allowed for any item of the queue.
        /// </summary>
        /// <value>The maximum number of retries allowed for any item of the queue.</value>
        [DataMember(Name="QueueDefinitionMaxNumberOfRetries", EmitDefaultValue=false)]
        public int? QueueDefinitionMaxNumberOfRetries { get; set; }

        /// <summary>
        /// States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.
        /// </summary>
        /// <value>States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.</value>
        [DataMember(Name="QueueDefinitionEnforceUniqueReference", EmitDefaultValue=false)]
        public bool? QueueDefinitionEnforceUniqueReference { get; set; }

        /// <summary>
        /// The average time spent processing a successful item.
        /// </summary>
        /// <value>The average time spent processing a successful item.</value>
        [DataMember(Name="ProcessingMeanTime", EmitDefaultValue=false)]
        public decimal? ProcessingMeanTime { get; set; }

        /// <summary>
        /// The total number of successfully processed items.
        /// </summary>
        /// <value>The total number of successfully processed items.</value>
        [DataMember(Name="SuccessfulTransactionsNo", EmitDefaultValue=false)]
        public int? SuccessfulTransactionsNo { get; set; }

        /// <summary>
        /// The total number of application exceptions thrown while processing queue items.
        /// </summary>
        /// <value>The total number of application exceptions thrown while processing queue items.</value>
        [DataMember(Name="ApplicationExceptionsNo", EmitDefaultValue=false)]
        public int? ApplicationExceptionsNo { get; set; }

        /// <summary>
        /// The total number of business exceptions thrown while processing queue items.
        /// </summary>
        /// <value>The total number of business exceptions thrown while processing queue items.</value>
        [DataMember(Name="BusinessExceptionsNo", EmitDefaultValue=false)]
        public int? BusinessExceptionsNo { get; set; }

        /// <summary>
        /// The total number of seconds spent processing successful queue items.
        /// </summary>
        /// <value>The total number of seconds spent processing successful queue items.</value>
        [DataMember(Name="SuccessfulTransactionsProcessingTime", EmitDefaultValue=false)]
        public decimal? SuccessfulTransactionsProcessingTime { get; set; }

        /// <summary>
        /// The total number of seconds spent processing queue items that failed with application exception.
        /// </summary>
        /// <value>The total number of seconds spent processing queue items that failed with application exception.</value>
        [DataMember(Name="ApplicationExceptionsProcessingTime", EmitDefaultValue=false)]
        public decimal? ApplicationExceptionsProcessingTime { get; set; }

        /// <summary>
        /// The total number of seconds spent processing queue items that failed with business exception.
        /// </summary>
        /// <value>The total number of seconds spent processing queue items that failed with business exception.</value>
        [DataMember(Name="BusinessExceptionsProcessingTime", EmitDefaultValue=false)]
        public decimal? BusinessExceptionsProcessingTime { get; set; }

        /// <summary>
        /// The total number of item processing transactions, both failed and successful.
        /// </summary>
        /// <value>The total number of item processing transactions, both failed and successful.</value>
        [DataMember(Name="TotalNumberOfTransactions", EmitDefaultValue=false)]
        public int? TotalNumberOfTransactions { get; set; }

        /// <summary>
        /// The date and time of the last item processing.
        /// </summary>
        /// <value>The date and time of the last item processing.</value>
        [DataMember(Name="LastProcessed", EmitDefaultValue=false)]
        public DateTime? LastProcessed { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueProcessingStatusDto {\n");
            sb.Append("  ItemsToProcess: ").Append(ItemsToProcess).Append("\n");
            sb.Append("  ItemsInProgress: ").Append(ItemsInProgress).Append("\n");
            sb.Append("  QueueDefinitionId: ").Append(QueueDefinitionId).Append("\n");
            sb.Append("  QueueDefinitionName: ").Append(QueueDefinitionName).Append("\n");
            sb.Append("  QueueDefinitionDescription: ").Append(QueueDefinitionDescription).Append("\n");
            sb.Append("  QueueDefinitionAcceptAutomaticallyRetry: ").Append(QueueDefinitionAcceptAutomaticallyRetry).Append("\n");
            sb.Append("  QueueDefinitionMaxNumberOfRetries: ").Append(QueueDefinitionMaxNumberOfRetries).Append("\n");
            sb.Append("  QueueDefinitionEnforceUniqueReference: ").Append(QueueDefinitionEnforceUniqueReference).Append("\n");
            sb.Append("  ProcessingMeanTime: ").Append(ProcessingMeanTime).Append("\n");
            sb.Append("  SuccessfulTransactionsNo: ").Append(SuccessfulTransactionsNo).Append("\n");
            sb.Append("  ApplicationExceptionsNo: ").Append(ApplicationExceptionsNo).Append("\n");
            sb.Append("  BusinessExceptionsNo: ").Append(BusinessExceptionsNo).Append("\n");
            sb.Append("  SuccessfulTransactionsProcessingTime: ").Append(SuccessfulTransactionsProcessingTime).Append("\n");
            sb.Append("  ApplicationExceptionsProcessingTime: ").Append(ApplicationExceptionsProcessingTime).Append("\n");
            sb.Append("  BusinessExceptionsProcessingTime: ").Append(BusinessExceptionsProcessingTime).Append("\n");
            sb.Append("  TotalNumberOfTransactions: ").Append(TotalNumberOfTransactions).Append("\n");
            sb.Append("  LastProcessed: ").Append(LastProcessed).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueProcessingStatusDto);
        }

        /// <summary>
        /// Returns true if QueueProcessingStatusDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueProcessingStatusDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueProcessingStatusDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemsToProcess == input.ItemsToProcess ||
                    (this.ItemsToProcess != null &&
                    this.ItemsToProcess.Equals(input.ItemsToProcess))
                ) && 
                (
                    this.ItemsInProgress == input.ItemsInProgress ||
                    (this.ItemsInProgress != null &&
                    this.ItemsInProgress.Equals(input.ItemsInProgress))
                ) && 
                (
                    this.QueueDefinitionId == input.QueueDefinitionId ||
                    (this.QueueDefinitionId != null &&
                    this.QueueDefinitionId.Equals(input.QueueDefinitionId))
                ) && 
                (
                    this.QueueDefinitionName == input.QueueDefinitionName ||
                    (this.QueueDefinitionName != null &&
                    this.QueueDefinitionName.Equals(input.QueueDefinitionName))
                ) && 
                (
                    this.QueueDefinitionDescription == input.QueueDefinitionDescription ||
                    (this.QueueDefinitionDescription != null &&
                    this.QueueDefinitionDescription.Equals(input.QueueDefinitionDescription))
                ) && 
                (
                    this.QueueDefinitionAcceptAutomaticallyRetry == input.QueueDefinitionAcceptAutomaticallyRetry ||
                    (this.QueueDefinitionAcceptAutomaticallyRetry != null &&
                    this.QueueDefinitionAcceptAutomaticallyRetry.Equals(input.QueueDefinitionAcceptAutomaticallyRetry))
                ) && 
                (
                    this.QueueDefinitionMaxNumberOfRetries == input.QueueDefinitionMaxNumberOfRetries ||
                    (this.QueueDefinitionMaxNumberOfRetries != null &&
                    this.QueueDefinitionMaxNumberOfRetries.Equals(input.QueueDefinitionMaxNumberOfRetries))
                ) && 
                (
                    this.QueueDefinitionEnforceUniqueReference == input.QueueDefinitionEnforceUniqueReference ||
                    (this.QueueDefinitionEnforceUniqueReference != null &&
                    this.QueueDefinitionEnforceUniqueReference.Equals(input.QueueDefinitionEnforceUniqueReference))
                ) && 
                (
                    this.ProcessingMeanTime == input.ProcessingMeanTime ||
                    (this.ProcessingMeanTime != null &&
                    this.ProcessingMeanTime.Equals(input.ProcessingMeanTime))
                ) && 
                (
                    this.SuccessfulTransactionsNo == input.SuccessfulTransactionsNo ||
                    (this.SuccessfulTransactionsNo != null &&
                    this.SuccessfulTransactionsNo.Equals(input.SuccessfulTransactionsNo))
                ) && 
                (
                    this.ApplicationExceptionsNo == input.ApplicationExceptionsNo ||
                    (this.ApplicationExceptionsNo != null &&
                    this.ApplicationExceptionsNo.Equals(input.ApplicationExceptionsNo))
                ) && 
                (
                    this.BusinessExceptionsNo == input.BusinessExceptionsNo ||
                    (this.BusinessExceptionsNo != null &&
                    this.BusinessExceptionsNo.Equals(input.BusinessExceptionsNo))
                ) && 
                (
                    this.SuccessfulTransactionsProcessingTime == input.SuccessfulTransactionsProcessingTime ||
                    (this.SuccessfulTransactionsProcessingTime != null &&
                    this.SuccessfulTransactionsProcessingTime.Equals(input.SuccessfulTransactionsProcessingTime))
                ) && 
                (
                    this.ApplicationExceptionsProcessingTime == input.ApplicationExceptionsProcessingTime ||
                    (this.ApplicationExceptionsProcessingTime != null &&
                    this.ApplicationExceptionsProcessingTime.Equals(input.ApplicationExceptionsProcessingTime))
                ) && 
                (
                    this.BusinessExceptionsProcessingTime == input.BusinessExceptionsProcessingTime ||
                    (this.BusinessExceptionsProcessingTime != null &&
                    this.BusinessExceptionsProcessingTime.Equals(input.BusinessExceptionsProcessingTime))
                ) && 
                (
                    this.TotalNumberOfTransactions == input.TotalNumberOfTransactions ||
                    (this.TotalNumberOfTransactions != null &&
                    this.TotalNumberOfTransactions.Equals(input.TotalNumberOfTransactions))
                ) && 
                (
                    this.LastProcessed == input.LastProcessed ||
                    (this.LastProcessed != null &&
                    this.LastProcessed.Equals(input.LastProcessed))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemsToProcess != null)
                    hashCode = hashCode * 59 + this.ItemsToProcess.GetHashCode();
                if (this.ItemsInProgress != null)
                    hashCode = hashCode * 59 + this.ItemsInProgress.GetHashCode();
                if (this.QueueDefinitionId != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionId.GetHashCode();
                if (this.QueueDefinitionName != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionName.GetHashCode();
                if (this.QueueDefinitionDescription != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionDescription.GetHashCode();
                if (this.QueueDefinitionAcceptAutomaticallyRetry != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionAcceptAutomaticallyRetry.GetHashCode();
                if (this.QueueDefinitionMaxNumberOfRetries != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionMaxNumberOfRetries.GetHashCode();
                if (this.QueueDefinitionEnforceUniqueReference != null)
                    hashCode = hashCode * 59 + this.QueueDefinitionEnforceUniqueReference.GetHashCode();
                if (this.ProcessingMeanTime != null)
                    hashCode = hashCode * 59 + this.ProcessingMeanTime.GetHashCode();
                if (this.SuccessfulTransactionsNo != null)
                    hashCode = hashCode * 59 + this.SuccessfulTransactionsNo.GetHashCode();
                if (this.ApplicationExceptionsNo != null)
                    hashCode = hashCode * 59 + this.ApplicationExceptionsNo.GetHashCode();
                if (this.BusinessExceptionsNo != null)
                    hashCode = hashCode * 59 + this.BusinessExceptionsNo.GetHashCode();
                if (this.SuccessfulTransactionsProcessingTime != null)
                    hashCode = hashCode * 59 + this.SuccessfulTransactionsProcessingTime.GetHashCode();
                if (this.ApplicationExceptionsProcessingTime != null)
                    hashCode = hashCode * 59 + this.ApplicationExceptionsProcessingTime.GetHashCode();
                if (this.BusinessExceptionsProcessingTime != null)
                    hashCode = hashCode * 59 + this.BusinessExceptionsProcessingTime.GetHashCode();
                if (this.TotalNumberOfTransactions != null)
                    hashCode = hashCode * 59 + this.TotalNumberOfTransactions.GetHashCode();
                if (this.LastProcessed != null)
                    hashCode = hashCode * 59 + this.LastProcessed.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// Property changed event handler
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Trigger when a property changed
        /// </summary>
        /// <param name="propertyName">Property Name</param>
        public virtual void OnPropertyChanged(string propertyName)
        {
            // NOTE: property changed is handled via "code weaving" using Fody.
            // Properties with setters are modified at compile time to notify of changes.
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
