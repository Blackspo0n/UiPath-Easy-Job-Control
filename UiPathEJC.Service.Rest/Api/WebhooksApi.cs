/* 
 * UiPath.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UiPathEJC.Service.Rest.Client;
using UiPathEJC.Service.Rest.Model;

namespace UiPathEJC.Service.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        void WebhooksDeleteById (long? id, string ifMatch = null);

        /// <summary>
        /// Delete a webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WebhooksDeleteByIdWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a single webhook
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>WebhookDto</returns>
        WebhookDto WebhooksGetById (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single webhook
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        ApiResponse<WebhookDto> WebhooksGetByIdWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets the list of event types a webhook can subscribe to
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ODataResponseListWebhookEventTypeDto</returns>
        ODataResponseListWebhookEventTypeDto WebhooksGetEventTypes ();

        /// <summary>
        /// Gets the list of event types a webhook can subscribe to
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ODataResponseListWebhookEventTypeDto</returns>
        ApiResponse<ODataResponseListWebhookEventTypeDto> WebhooksGetEventTypesWithHttpInfo ();
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListWebhookDto</returns>
        ODataResponseListWebhookDto WebhooksGetWebhooks (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListWebhookDto</returns>
        ApiResponse<ODataResponseListWebhookDto> WebhooksGetWebhooksWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Update entity in EntitySet Webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>WebhookDto</returns>
        WebhookDto WebhooksPatchById (long? id, WebhookDto webhookDto);

        /// <summary>
        /// Update entity in EntitySet Webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        ApiResponse<WebhookDto> WebhooksPatchByIdWithHttpInfo (long? id, WebhookDto webhookDto);
        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>PingEventDto</returns>
        PingEventDto WebhooksPingById (long? id);

        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ApiResponse of PingEventDto</returns>
        ApiResponse<PingEventDto> WebhooksPingByIdWithHttpInfo (long? id);
        /// <summary>
        /// Create a new webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>WebhookDto</returns>
        WebhookDto WebhooksPost (WebhookDto webhookDto);

        /// <summary>
        /// Create a new webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        ApiResponse<WebhookDto> WebhooksPostWithHttpInfo (WebhookDto webhookDto);
        /// <summary>
        /// Update an existing webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>WebhookDto</returns>
        WebhookDto WebhooksPutById (long? id, WebhookDto webhookDto);

        /// <summary>
        /// Update an existing webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        ApiResponse<WebhookDto> WebhooksPutByIdWithHttpInfo (long? id, WebhookDto webhookDto);
        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot;
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>CustomEventDto</returns>
        CustomEventDto WebhooksTriggerCustom (AnyObjectDto eventData);

        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot;
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>ApiResponse of CustomEventDto</returns>
        ApiResponse<CustomEventDto> WebhooksTriggerCustomWithHttpInfo (AnyObjectDto eventData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WebhooksDeleteByIdAsync (long? id, string ifMatch = null);

        /// <summary>
        /// Delete a webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Delete.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WebhooksDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null);
        /// <summary>
        /// Gets a single webhook
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of WebhookDto</returns>
        System.Threading.Tasks.Task<WebhookDto> WebhooksGetByIdAsync (long? id, string expand = null, string select = null);

        /// <summary>
        /// Gets a single webhook
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null);
        /// <summary>
        /// Gets the list of event types a webhook can subscribe to
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ODataResponseListWebhookEventTypeDto</returns>
        System.Threading.Tasks.Task<ODataResponseListWebhookEventTypeDto> WebhooksGetEventTypesAsync ();

        /// <summary>
        /// Gets the list of event types a webhook can subscribe to
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ODataResponseListWebhookEventTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListWebhookEventTypeDto>> WebhooksGetEventTypesAsyncWithHttpInfo ();
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListWebhookDto</returns>
        System.Threading.Tasks.Task<ODataResponseListWebhookDto> WebhooksGetWebhooksAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListWebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ODataResponseListWebhookDto>> WebhooksGetWebhooksAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null);
        /// <summary>
        /// Update entity in EntitySet Webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>Task of WebhookDto</returns>
        System.Threading.Tasks.Task<WebhookDto> WebhooksPatchByIdAsync (long? id, WebhookDto webhookDto);

        /// <summary>
        /// Update entity in EntitySet Webhooks
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksPatchByIdAsyncWithHttpInfo (long? id, WebhookDto webhookDto);
        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of PingEventDto</returns>
        System.Threading.Tasks.Task<PingEventDto> WebhooksPingByIdAsync (long? id);

        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ApiResponse (PingEventDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PingEventDto>> WebhooksPingByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Create a new webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>Task of WebhookDto</returns>
        System.Threading.Tasks.Task<WebhookDto> WebhooksPostAsync (WebhookDto webhookDto);

        /// <summary>
        /// Create a new webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Create.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksPostAsyncWithHttpInfo (WebhookDto webhookDto);
        /// <summary>
        /// Update an existing webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>Task of WebhookDto</returns>
        System.Threading.Tasks.Task<WebhookDto> WebhooksPutByIdAsync (long? id, WebhookDto webhookDto);

        /// <summary>
        /// Update an existing webhook subscription
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.Edit.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksPutByIdAsyncWithHttpInfo (long? id, WebhookDto webhookDto);
        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot;
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>Task of CustomEventDto</returns>
        System.Threading.Tasks.Task<CustomEventDto> WebhooksTriggerCustomAsync (AnyObjectDto eventData);

        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot;
        /// </summary>
        /// <remarks>
        /// Required permissions: Webhooks.View.
        /// </remarks>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>Task of ApiResponse (CustomEventDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomEventDto>> WebhooksTriggerCustomAsyncWithHttpInfo (AnyObjectDto eventData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private UiPathEJC.Service.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UiPathEJC.Service.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UiPathEJC.Service.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a webhook subscription Required permissions: Webhooks.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns></returns>
        public void WebhooksDeleteById (long? id, string ifMatch = null)
        {
             WebhooksDeleteByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Delete a webhook subscription Required permissions: Webhooks.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WebhooksDeleteByIdWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksDeleteById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a webhook subscription Required permissions: Webhooks.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WebhooksDeleteByIdAsync (long? id, string ifMatch = null)
        {
             await WebhooksDeleteByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Delete a webhook subscription Required permissions: Webhooks.Delete.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="ifMatch">If-Match header (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WebhooksDeleteByIdAsyncWithHttpInfo (long? id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksDeleteById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a single webhook Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>WebhookDto</returns>
        public WebhookDto WebhooksGetById (long? id, string expand = null, string select = null)
        {
             ApiResponse<WebhookDto> localVarResponse = WebhooksGetByIdWithHttpInfo(id, expand, select);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single webhook Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        public ApiResponse< WebhookDto > WebhooksGetByIdWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksGetById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Gets a single webhook Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of WebhookDto</returns>
        public async System.Threading.Tasks.Task<WebhookDto> WebhooksGetByIdAsync (long? id, string expand = null, string select = null)
        {
             ApiResponse<WebhookDto> localVarResponse = await WebhooksGetByIdAsyncWithHttpInfo(id, expand, select);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single webhook Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksGetByIdAsyncWithHttpInfo (long? id, string expand = null, string select = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksGetById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Gets the list of event types a webhook can subscribe to Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ODataResponseListWebhookEventTypeDto</returns>
        public ODataResponseListWebhookEventTypeDto WebhooksGetEventTypes ()
        {
             ApiResponse<ODataResponseListWebhookEventTypeDto> localVarResponse = WebhooksGetEventTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of event types a webhook can subscribe to Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ODataResponseListWebhookEventTypeDto</returns>
        public ApiResponse< ODataResponseListWebhookEventTypeDto > WebhooksGetEventTypesWithHttpInfo ()
        {

            var localVarPath = "/odata/Webhooks/UiPath.Server.Configuration.OData.GetEventTypes()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGetEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListWebhookEventTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListWebhookEventTypeDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListWebhookEventTypeDto)));
        }

        /// <summary>
        /// Gets the list of event types a webhook can subscribe to Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ODataResponseListWebhookEventTypeDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListWebhookEventTypeDto> WebhooksGetEventTypesAsync ()
        {
             ApiResponse<ODataResponseListWebhookEventTypeDto> localVarResponse = await WebhooksGetEventTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of event types a webhook can subscribe to Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ODataResponseListWebhookEventTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListWebhookEventTypeDto>> WebhooksGetEventTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/odata/Webhooks/UiPath.Server.Configuration.OData.GetEventTypes()";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGetEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListWebhookEventTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListWebhookEventTypeDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListWebhookEventTypeDto)));
        }

        /// <summary>
        /// List webhooks Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ODataResponseListWebhookDto</returns>
        public ODataResponseListWebhookDto WebhooksGetWebhooks (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListWebhookDto> localVarResponse = WebhooksGetWebhooksWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>ApiResponse of ODataResponseListWebhookDto</returns>
        public ApiResponse< ODataResponseListWebhookDto > WebhooksGetWebhooksWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListWebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListWebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListWebhookDto)));
        }

        /// <summary>
        /// List webhooks Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ODataResponseListWebhookDto</returns>
        public async System.Threading.Tasks.Task<ODataResponseListWebhookDto> WebhooksGetWebhooksAsync (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
             ApiResponse<ODataResponseListWebhookDto> localVarResponse = await WebhooksGetWebhooksAsyncWithHttpInfo(expand, filter, select, orderby, top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List webhooks Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Expands related entities inline. (optional)</param>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="select">Selects which properties to include in the response. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <param name="count">Includes a count of the matching results in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ODataResponseListWebhookDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ODataResponseListWebhookDto>> WebhooksGetWebhooksAsyncWithHttpInfo (string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {

            var localVarPath = "/odata/Webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (select != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ODataResponseListWebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ODataResponseListWebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ODataResponseListWebhookDto)));
        }

        /// <summary>
        /// Update entity in EntitySet Webhooks Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>WebhookDto</returns>
        public WebhookDto WebhooksPatchById (long? id, WebhookDto webhookDto)
        {
             ApiResponse<WebhookDto> localVarResponse = WebhooksPatchByIdWithHttpInfo(id, webhookDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update entity in EntitySet Webhooks Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        public ApiResponse< WebhookDto > WebhooksPatchByIdWithHttpInfo (long? id, WebhookDto webhookDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksPatchById");
            // verify the required parameter 'webhookDto' is set
            if (webhookDto == null)
                throw new ApiException(400, "Missing required parameter 'webhookDto' when calling WebhooksApi->WebhooksPatchById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (webhookDto != null && webhookDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPatchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Update entity in EntitySet Webhooks Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>Task of WebhookDto</returns>
        public async System.Threading.Tasks.Task<WebhookDto> WebhooksPatchByIdAsync (long? id, WebhookDto webhookDto)
        {
             ApiResponse<WebhookDto> localVarResponse = await WebhooksPatchByIdAsyncWithHttpInfo(id, webhookDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update entity in EntitySet Webhooks Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to patch</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksPatchByIdAsyncWithHttpInfo (long? id, WebhookDto webhookDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksPatchById");
            // verify the required parameter 'webhookDto' is set
            if (webhookDto == null)
                throw new ApiException(400, "Missing required parameter 'webhookDto' when calling WebhooksApi->WebhooksPatchById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (webhookDto != null && webhookDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPatchById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>PingEventDto</returns>
        public PingEventDto WebhooksPingById (long? id)
        {
             ApiResponse<PingEventDto> localVarResponse = WebhooksPingByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>ApiResponse of PingEventDto</returns>
        public ApiResponse< PingEventDto > WebhooksPingByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksPingById");

            var localVarPath = "/odata/Webhooks({Id})/UiPath.Server.Configuration.OData.Ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingEventDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingEventDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingEventDto)));
        }

        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of PingEventDto</returns>
        public async System.Threading.Tasks.Task<PingEventDto> WebhooksPingByIdAsync (long? id)
        {
             ApiResponse<PingEventDto> localVarResponse = await WebhooksPingByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sends a Ping request to webhook endpoint.   Used for testing connectivity and availability of target URL Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <returns>Task of ApiResponse (PingEventDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PingEventDto>> WebhooksPingByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksPingById");

            var localVarPath = "/odata/Webhooks({Id})/UiPath.Server.Configuration.OData.Ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingEventDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingEventDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingEventDto)));
        }

        /// <summary>
        /// Create a new webhook subscription Required permissions: Webhooks.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>WebhookDto</returns>
        public WebhookDto WebhooksPost (WebhookDto webhookDto)
        {
             ApiResponse<WebhookDto> localVarResponse = WebhooksPostWithHttpInfo(webhookDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new webhook subscription Required permissions: Webhooks.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        public ApiResponse< WebhookDto > WebhooksPostWithHttpInfo (WebhookDto webhookDto)
        {
            // verify the required parameter 'webhookDto' is set
            if (webhookDto == null)
                throw new ApiException(400, "Missing required parameter 'webhookDto' when calling WebhooksApi->WebhooksPost");

            var localVarPath = "/odata/Webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookDto != null && webhookDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Create a new webhook subscription Required permissions: Webhooks.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>Task of WebhookDto</returns>
        public async System.Threading.Tasks.Task<WebhookDto> WebhooksPostAsync (WebhookDto webhookDto)
        {
             ApiResponse<WebhookDto> localVarResponse = await WebhooksPostAsyncWithHttpInfo(webhookDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new webhook subscription Required permissions: Webhooks.Create.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookDto">The entity to post</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksPostAsyncWithHttpInfo (WebhookDto webhookDto)
        {
            // verify the required parameter 'webhookDto' is set
            if (webhookDto == null)
                throw new ApiException(400, "Missing required parameter 'webhookDto' when calling WebhooksApi->WebhooksPost");

            var localVarPath = "/odata/Webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookDto != null && webhookDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Update an existing webhook subscription Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>WebhookDto</returns>
        public WebhookDto WebhooksPutById (long? id, WebhookDto webhookDto)
        {
             ApiResponse<WebhookDto> localVarResponse = WebhooksPutByIdWithHttpInfo(id, webhookDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing webhook subscription Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        public ApiResponse< WebhookDto > WebhooksPutByIdWithHttpInfo (long? id, WebhookDto webhookDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksPutById");
            // verify the required parameter 'webhookDto' is set
            if (webhookDto == null)
                throw new ApiException(400, "Missing required parameter 'webhookDto' when calling WebhooksApi->WebhooksPutById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (webhookDto != null && webhookDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Update an existing webhook subscription Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>Task of WebhookDto</returns>
        public async System.Threading.Tasks.Task<WebhookDto> WebhooksPutByIdAsync (long? id, WebhookDto webhookDto)
        {
             ApiResponse<WebhookDto> localVarResponse = await WebhooksPutByIdAsyncWithHttpInfo(id, webhookDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing webhook subscription Required permissions: Webhooks.Edit.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">key: Id</param>
        /// <param name="webhookDto">The entity to put</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDto>> WebhooksPutByIdAsyncWithHttpInfo (long? id, WebhookDto webhookDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->WebhooksPutById");
            // verify the required parameter 'webhookDto' is set
            if (webhookDto == null)
                throw new ApiException(400, "Missing required parameter 'webhookDto' when calling WebhooksApi->WebhooksPutById");

            var localVarPath = "/odata/Webhooks({Id})";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (webhookDto != null && webhookDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhookDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookDto; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPutById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDto)));
        }

        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot; Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>CustomEventDto</returns>
        public CustomEventDto WebhooksTriggerCustom (AnyObjectDto eventData)
        {
             ApiResponse<CustomEventDto> localVarResponse = WebhooksTriggerCustomWithHttpInfo(eventData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot; Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>ApiResponse of CustomEventDto</returns>
        public ApiResponse< CustomEventDto > WebhooksTriggerCustomWithHttpInfo (AnyObjectDto eventData)
        {
            // verify the required parameter 'eventData' is set
            if (eventData == null)
                throw new ApiException(400, "Missing required parameter 'eventData' when calling WebhooksApi->WebhooksTriggerCustom");

            var localVarPath = "/odata/Webhooks/UiPath.Server.Configuration.OData.TriggerCustom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventData != null && eventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventData; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksTriggerCustom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomEventDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomEventDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomEventDto)));
        }

        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot; Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>Task of CustomEventDto</returns>
        public async System.Threading.Tasks.Task<CustomEventDto> WebhooksTriggerCustomAsync (AnyObjectDto eventData)
        {
             ApiResponse<CustomEventDto> localVarResponse = await WebhooksTriggerCustomAsyncWithHttpInfo(eventData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Triggers an event of type \&quot;custom\&quot; Required permissions: Webhooks.View.
        /// </summary>
        /// <exception cref="UiPathEJC.Service.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventData">Any custom event data payload</param>
        /// <returns>Task of ApiResponse (CustomEventDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomEventDto>> WebhooksTriggerCustomAsyncWithHttpInfo (AnyObjectDto eventData)
        {
            // verify the required parameter 'eventData' is set
            if (eventData == null)
                throw new ApiException(400, "Missing required parameter 'eventData' when calling WebhooksApi->WebhooksTriggerCustom");

            var localVarPath = "/odata/Webhooks/UiPath.Server.Configuration.OData.TriggerCustom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventData != null && eventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventData; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksTriggerCustom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomEventDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomEventDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomEventDto)));
        }

    }
}
